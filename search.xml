<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JavaScript学习笔记01（基本语法、数据类型、运算符）]]></title>
      <url>https://flintx.github.io/2017/02/23/learnjs-01/</url>
      <content type="html"><![CDATA[<h2 id="基本语法-amp-数据类型"><a href="#基本语法-amp-数据类型" class="headerlink" title="基本语法 &amp; 数据类型"></a>基本语法 &amp; 数据类型</h2><ol>
<li><p>变量名是大小写英文、数字、<code>$</code>和<code>_</code>的组合，且不能用数字开头，使用var进行基本赋值：<code>var x = 1;</code></p>
</li>
<li><p>字符串（String）类型可以使用单引号<code>&#39;</code>或双引号<code>&quot;</code>来指示文本范围，并且可以在单引号中使用双引号，或是双引号中使用单引号。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"My name is '233', and you?"</span>); <span class="comment">// My name is '233', and you?</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Nice to meet you, "666"'</span>); <span class="comment">// Nice to meet you, "666"</span></div></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果需要存储多行字符串，可使用``来表示：</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">     <span class="keyword">var</span> s = <span class="string">`Esl</span></div><div class="line">     Psy</div><div class="line">     Congroo`;</div><div class="line">      <span class="built_in">console</span>.log(s);</div><div class="line">     <span class="comment">/*</span></div><div class="line">* Esl</div><div class="line">* Psy</div><div class="line">* Congroo</div><div class="line">*/</div></pre></td></tr></table></figure>
</li>
<li><p>此外，多个字符串的链接可以使用<code>+</code>操作符，或采用ES6新增的模板字符串：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'Flint'</span>;</div><div class="line"><span class="keyword">var</span> age = <span class="string">'22'</span>;</div><div class="line"><span class="keyword">var</span> s1 = <span class="string">'My name is '</span> + name + <span class="string">' and I\'m '</span> + age + <span class="string">' years old.'</span>;</div><div class="line"><span class="built_in">console</span>.log(s1); <span class="comment">// My name is Flint and I'm 22 years old.</span></div><div class="line"><span class="keyword">var</span> s2 = <span class="string">`My name is <span class="subst">$&#123;name&#125;</span> and I\'m <span class="subst">$&#123;age&#125;</span> years old.`</span>;</div><div class="line"><span class="built_in">console</span>.log(s2); <span class="comment">// My name is Flint and I'm 22 years old.</span></div><div class="line">s1 === s2; <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>   <strong>注意</strong>：模板字符串仅可用于``包括的字符串。</p>
<p>   <strong>特别注意</strong>：字符串是不可变的，String 类定义的方法都不能改变字符串的内容。虽然对字符串的某个索引赋值不会有错误提示，但是也没有任何效果。诸如toUpperCase() 方法，返回的是全新的字符串，而不是修改原始字符串。</p>
<p>   关于字符串的各种操作，今后使用中再进行整理归纳。</p>
<p>   详细资料：<a href="http://www.w3school.com.cn/jsref/jsref_obj_string.asp" target="_blank" rel="external">JavaScript String 对象属性与方法</a></p>
</li>
<li><p>数值（Number）类型包括：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span>; <span class="comment">// 整数123</span></div><div class="line"><span class="number">0.456</span>; <span class="comment">// 浮点数0.456</span></div><div class="line"><span class="number">6.66666e4</span>; <span class="comment">// 科学计数法表示的6.66666x10^4，等同于66666.6</span></div><div class="line"><span class="number">-789</span>; <span class="comment">// 负数</span></div><div class="line"><span class="literal">NaN</span>; <span class="comment">// NaN表示Not a Number，当无法计算结果时用NaN表示</span></div><div class="line"><span class="literal">Infinity</span>; <span class="comment">// Infinity表示无限大，当数值超过了最大值时，就表示为Infinity</span></div><div class="line"></div><div class="line"><span class="comment">/*基本运算*/</span></div><div class="line"><span class="number">1</span> + <span class="number">1</span>; <span class="comment">// 2</span></div><div class="line"><span class="number">4</span> - <span class="number">5.1</span>; <span class="comment">// -1.0999999999999996</span></div><div class="line"><span class="number">3</span> / <span class="number">2</span> <span class="comment">// 1.5, JS中没有整除运算，需要整除运算可使用Math.floor或Math.ceil</span></div><div class="line"><span class="number">5</span> % <span class="number">3</span> <span class="comment">// 2, 取余数</span></div><div class="line"><span class="number">7.5</span> % <span class="number">1</span> <span class="comment">// 0.5, 浮点数亦可</span></div><div class="line"><span class="number">2</span> / <span class="number">0</span>; <span class="comment">// Infinity</span></div><div class="line"><span class="number">0</span> / <span class="number">0</span>; <span class="comment">// NaN</span></div></pre></td></tr></table></figure>
<p>值得注意的是，JS的浮点数运算有一个固有bug，即精度误差：<code>0.1 + 0.2 == 0.3</code> 返回结果为<code>false</code>，利用<code>console.log(0.2 + 0.1)</code>，得到结果<code>0.30000000000000004</code>。这是由于二进制运算机制造成的（部分小数无法用有限位二进制表示，比如<code>0.1</code> <code>0.33</code> 等），几乎所有的编程语言都会有类似精度误差的问题，包括C/C++/Java/Python等。解决此类问题可以参考<a href="http://madscript.com/javascript/javscript-float-number-compute-problem/" target="_blank" rel="external">通过isEqual工具方法判断数值是否相等</a>，或者给出明确的精度要求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 利用fix</span></div><div class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// false</span></div><div class="line"><span class="built_in">parseFloat</span>((<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">2</span>)) === <span class="number">0.3</span>; <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 利用abs</span></div><div class="line"><span class="number">1</span> / <span class="number">3</span> === (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>); <span class="comment">// false</span></div><div class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span> / <span class="number">3</span> - (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>)) &lt; <span class="number">0.0000001</span>; <span class="comment">// true</span></div><div class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span> / <span class="number">3</span> - (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>)) &lt; <span class="number">1e-7</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>此外，JS中所有数字均为<strong>64</strong>位。</p>
<p>详细资料：<a href="http://www.w3school.com.cn/jsref/jsref_obj_number.asp" target="_blank" rel="external">JavaScript Number 对象属性与方法</a></p>
</li>
<li><p>布尔（Boolean）类型只有<code>true</code>、<code>false</code>两种值，以及与<code>&amp;&amp;</code>或<code>||</code>非<code>!</code>三种运算。</p>
<p>详细资料：<a href="http://www.w3school.com.cn/jsref/jsref_obj_boolean.asp" target="_blank" rel="external">JavaScript Boolean 对象属性与方法</a></p>
</li>
<li><p>比较运算符有很多祖传的坑，这里只提一下相等运算符的种种问题。</p>
<blockquote>
<p>JavaScript在设计时，有两种比较运算符：</p>
<p>第一种是<code>==</code>比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p>
<p>第二种是<code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回<code>false</code>，如果一致，再比较。</p>
<p>由于JavaScript这个设计缺陷，<strong>不要使用</strong><code>==</code>比较，<strong>坚持使用</strong><code>===</code>比较。</p>
</blockquote>
<p>举一些例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="literal">false</span> == <span class="number">0</span>; <span class="comment">// true, 将boolean类型的false转换为number类型的0，再进行比较</span></div><div class="line"><span class="literal">false</span> === <span class="number">0</span>; <span class="comment">// false, 两者类型不同（boolean与number）, 故直接返回false</span></div><div class="line"></div><div class="line"><span class="literal">Infinity</span> === <span class="literal">Infinity</span>; <span class="comment">// true</span></div><div class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>; <span class="comment">// false, NaN与所有值都不相等，包括它自己</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// true, 唯一能判断NaN的方法</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>JS中有两种表示”空”的类型，即<code>null</code>与<code>undefined</code>，类似于C/C++的NULL或Python的None。其中<code>null</code>表示一个空的值，而<code>undefined</code>表示值未定义。</p>
<p>但<code>null</code>不同于<code>0</code>以及<code>&#39;&#39;</code>，<code>0</code>是数值0，<code>&#39;&#39;</code>表示长度为0的字符串。</p>
</li>
<li><p>数组（Array）类型与Python的list比较相似，可以存储不同数据类型的元素，并能直接用[]操作符或<code>new Array()</code>方法来构造一个数组。</p>
<p>​</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="string">'dog'</span>, <span class="string">'利'</span>, <span class="string">'郭嘉'</span>, <span class="string">'live'</span> === <span class="string">'die'</span>, <span class="number">1</span>];</div><div class="line"><span class="built_in">console</span>.log(array); <span class="comment">// ["dog", "利", "郭嘉", false, 1]</span></div><div class="line"><span class="built_in">console</span>.log(array.length); <span class="comment">// 5</span></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(array, <span class="string">'Not because of bad fortune to avoid the trend'</span>, <span class="string">'haha'</span>);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [Array[5], "Not because of bad fortune to avoid the trend", "haha"]</span></div><div class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 3</span></div><div class="line">arr[<span class="number">0</span>]; <span class="comment">// ["dog", "利", "郭嘉", false, 1]</span></div><div class="line">arr[<span class="number">1</span>]; <span class="comment">// "Not because of bad fortune to avoid the trend"</span></div><div class="line">arr[<span class="number">3</span>]; <span class="comment">// undefined, 超出索引范围返回undefined</span></div></pre></td></tr></table></figure>
<p>详细资料：<a href="http://www.w3school.com.cn/jsref/jsref_obj_array.asp" target="_blank" rel="external">JavaScript Array 对象属性与方法</a></p>
</li>
<li><p>对象（Object）感觉更像Python里面的dict，是一种无序的集合数据类型，由若干<code>(key: value)</code>的键值对组成。</p>
<p>基本上 JavaScript 里的任何东西都是对象。</p>
<p>用面向对象（Object - Oriented）的观点来看，对象由属性与方法组成，其本质上也还是键值对，即<code>(属性名/PropertyName: 属性值)</code>与<code>(方法名/MethodName: 函数表达式或Function对象)</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myDog = &#123;</div><div class="line">  	<span class="attr">name</span>: <span class="string">'233'</span>,</div><div class="line">  	<span class="attr">age</span>: <span class="number">3</span>,</div><div class="line">  	<span class="string">'back-color'</span>: <span class="number">0x3f3f3f</span>, <span class="comment">// 如果属性名包含特殊字符，必须使用''括起来</span></div><div class="line">  	bark: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      	<span class="built_in">console</span>.log(<span class="string">"汪汪汪!"</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/*访问对象属性与方法*/</span></div><div class="line"><span class="built_in">console</span>.log(myDog.name); <span class="comment">// 通过.操作符访问对象属性</span></div><div class="line"><span class="built_in">console</span>.log(myDog[<span class="string">'age'</span>]); <span class="comment">// 通过[]操作符访问对象属性</span></div><div class="line"><span class="built_in">console</span>.log(myDog[<span class="string">'back-color'</span>]); <span class="comment">// 若属性名包含特殊字符, 则只能用[]操作符来访问</span></div><div class="line">myDog.bark(); <span class="comment">// 通过.操作符访问对象方法</span></div><div class="line"><span class="built_in">console</span>.log(myDog.girlfrind); <span class="comment">// undefined, 不存在该属性</span></div><div class="line"></div><div class="line"><span class="comment">/*增删对象属性与方法*/</span></div><div class="line">myDog.girlfrind = <span class="string">'666'</span>; <span class="comment">// 新增一个girlfriend属性</span></div><div class="line"><span class="built_in">console</span>.log(myDog.girlfriend); <span class="comment">// 666</span></div><div class="line">myDog.girlfriend = <span class="string">'QAQ'</span>; <span class="comment">// 修改girlfriend属性</span></div><div class="line"><span class="built_in">console</span>.log(myDog.girlfriend); <span class="comment">// QAQ</span></div><div class="line"><span class="keyword">delete</span> myDog.girlfriend; <span class="comment">// 删除girlfriend属性, delete myDog['girlfrind']亦可</span></div><div class="line"><span class="built_in">console</span>.log(myDog.girlfriend); <span class="comment">// undefined, 不存在该属性</span></div><div class="line"></div><div class="line"><span class="comment">/*验证对象是否存在某属性或方法*/</span></div><div class="line"></div><div class="line"><span class="comment">// 检测对象是否拥有某一属性，可以用in操作符</span></div><div class="line"><span class="string">'name'</span> <span class="keyword">in</span> myDog; <span class="comment">// true</span></div><div class="line"><span class="string">'girlfriend'</span> <span class="keyword">in</span> myDog; <span class="comment">// false</span></div><div class="line"><span class="string">'toString'</span> <span class="keyword">in</span> myDog; <span class="comment">// true, 该属性继承自object对象</span></div><div class="line"></div><div class="line"><span class="comment">// 判断一个属性是否为对象自身拥有，而非继承得到，可使用hasOwnProperty()方法</span></div><div class="line">myDog.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></div><div class="line">myDog.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>​</p>
<p>​</p>
</li>
</ol>
<h2 id="条件判断-amp-循环控制"><a href="#条件判断-amp-循环控制" class="headerlink" title="条件判断 &amp; 循环控制"></a>条件判断 &amp; 循环控制</h2><ol>
<li><p>条件判断，与多数编程语言大同小异，就是<code>if</code> <code>else</code> <code>else if</code>，以及<code>switch</code>,并且支持嵌套。</p>
<p>需要注意的就是<code>if</code>后的条件判断语句，一般是值为 <code>true</code> 或 <code>false</code> 的表达式，但JavaScript并没有像Java一样强制要求是逻辑判断表达式，条件语句的位置可能会有其他语句出现。</p>
<p>于是有如下准则：</p>
<blockquote>
<p>所有<strong>不是</strong> <code>undefined</code>、<code>null</code>、<code>0</code>、<code>NaN</code>、空字符串 (<code>&quot;&quot;</code>) 的任意对象，包括值为<code>false</code>的Boolean对象， 在条件语句中都为<strong>true</strong>。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</div><div class="line"><span class="keyword">if</span> (b) <span class="comment">// 表达式的值为true</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  	<span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"><span class="comment">/* </span></div><div class="line"> * 反观C++，若bool b = false;</div><div class="line"> * 则if (b) 表达式值为false.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="string">'123'</span>;</div><div class="line"><span class="keyword">var</span> es = <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span> (s.length) &#123; <span class="comment">// 条件计算结果为3, 表达式值为true</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  	<span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (s) &#123; <span class="comment">// '123'表达式值为true</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  	<span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (es) &#123; <span class="comment">// ''表达式值为false</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  	<span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> zero = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (zero) <span class="comment">// 表达式结果为false</span></div><div class="line">  	<span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  	<span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"><span class="keyword">if</span> (!zero) <span class="comment">// 表达式结果为true</span></div><div class="line">  	<span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  	<span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="comment">// !!!这仅是实验，极其不推荐在条件表达式中单纯的使用赋值语句</span></div><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>, y = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (x = y) <span class="comment">// 表达式结果为false</span></div><div class="line">  	<span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  	<span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>, y = <span class="number">2</span>;</div><div class="line"><span class="keyword">if</span> (x = y) <span class="comment">// 表达式结果为true</span></div><div class="line">  	<span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  	<span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"><span class="comment">// 在赋值语句作为条件表达式的情况下，先执行赋值语句，然后将赋值后对象作为条件</span></div></pre></td></tr></table></figure>
<p>总结一下，就是：</p>
<blockquote>
<p>尽量使用值为 true 或 false 的逻辑表达式作为condition</p>
<p>“空”（<code>undefined</code>、<code>null</code>、<code>0</code>、<code>NaN</code>、<code>&quot;&quot;</code>）的东西是<strong>false</strong>，除此之外一切对象皆为<strong>true</strong>。</p>
</blockquote>
</li>
<li><p>迭代器<code>for</code>的使用方式和C++/Java基本一致（除了赋值语句）</p>
<p>​</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ([initialization]; [condition]; [final-expression])</div><div class="line">   statement</div><div class="line"></div><div class="line"><span class="comment">/*example*/</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  	<span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">*/</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  	<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">     	<span class="keyword">continue</span>;</div><div class="line">  	<span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">1</div><div class="line">3</div><div class="line">*/</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  	<span class="keyword">if</span> (i &gt; <span class="number">2</span>)</div><div class="line">      	<span class="keyword">break</span>;</div><div class="line">  	<span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">*/</div></pre></td></tr></table></figure>
</li>
<li><p>迭代器<code>for ... in</code>用于以<strong>任意序</strong>迭代一个对象的可枚举属性，其迭代顺序依赖于执行环境。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'Flint'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">22</span>,</div><div class="line">  	<span class="attr">sex</span>: <span class="string">'male'</span>,</div><div class="line">    <span class="attr">city</span>: <span class="string">'Wuhan'</span>,</div><div class="line">  	<span class="attr">cry</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      	<span class="built_in">console</span>.log(<span class="string">'QAQ'</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123; <span class="comment">// 过滤掉继承的属性</span></div><div class="line">        <span class="built_in">console</span>.log(key); <span class="comment">// 'name', 'age', 'sex', 'city', 'cry'.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'H'</span>, <span class="string">'He'</span>, <span class="string">'Li'</span>, <span class="string">'Be'</span>, <span class="string">'B'</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</div><div class="line">  	<span class="built_in">console</span>.log(i); <span class="comment">// '0', '1', '2', '3', '4'. 注意i是string不是number</span></div><div class="line">  	<span class="built_in">console</span>.log(arr[i]); <span class="comment">// 'H', 'He', 'Li', 'Be', 'B'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p><code>for ... of</code>语句是在可迭代对象基础上创建的一个循环。不同于<code>for ... in</code>遍历对象属性的名称，<code>for ... of</code>仅遍历一个对象的可迭代部分并且直接遍历属性值而非属性名。区别如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>];</div><div class="line">arr.name = <span class="string">'alpha'</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> arr) &#123;</div><div class="line">	<span class="built_in">console</span>.log(key); <span class="comment">// '0', '1', '2', '3', 'name'</span></div><div class="line">  	<span class="built_in">console</span>.log(arr[key]) <span class="comment">// 'apple', 'banana', 'cat', 'dog', 'alpha'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> arr) &#123;</div><div class="line">  	<span class="built_in">console</span>.log(key) <span class="comment">// 'apple', 'banana', 'cat', 'dog'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p><code>forEach</code>是大部分可迭代对象<code>iterable</code>内置的一个方法，是一种比较推荐的遍历方式。</p>
<p>原型如下（以<code>Array</code>为例）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">array.forEach(callback(currentValue, index, array)&#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;, <span class="keyword">this</span>)</div><div class="line"><span class="comment">// or</span></div><div class="line">array.forEach(callback[, thisArg])</div></pre></td></tr></table></figure>
<blockquote>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li><p><code>callback</code>为数组中每个元素执行的函数，该函数接收三个参数：</p>
<ul>
<li><code>currentValue(当前值)</code> ：数组中正在处理的当前元素。</li>
<li><code>index(索引)</code> ：数组中正在处理的当前元素的索引。</li>
<li><code>array</code> ：<code>forEach()</code>方法正在操作的数组。 </li>
</ul>
</li>
<li><p><code>thisArg</code>为可选参数。当执行回调函数时用作<code>this</code>值。</p>
<p>​</p>
</li>
</ul>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul>
<li><code>undefined</code></li>
</ul>
</blockquote>
<p>使用示范：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>];</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'arr['</span> + index + <span class="string">'] = '</span> + element);</div><div class="line">&#125;);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * arr[0] = apple</div><div class="line"> * arr[1] = banana</div><div class="line"> * arr[2] = cat</div><div class="line"> * arr[3] = dog</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArrayElements</span>(<span class="params">item, i, arr</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'array['</span> + i + <span class="string">'] = '</span> + item + <span class="string">";"</span>);</div><div class="line">	<span class="keyword">if</span> (i === arr.length - <span class="number">1</span>) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'array is : '</span> + arr);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">[<span class="string">'Aa'</span>, <span class="string">'Bb'</span>, <span class="string">'Cc'</span>].forEach(logArrayElements);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * array[0] = Aa;</div><div class="line"> * array[1] = Bb;</div><div class="line"> * array[2] = Cc;</div><div class="line"> * array is : Aa,Bb,Cc</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// Set与Map的forEach()方法各有其定义</span></div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="literal">undefined</span>]);</div><div class="line">s.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, sameValue, set</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;value&#125;</span> and <span class="subst">$&#123;sameValue&#125;</span>;`</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// A and A;</span></div><div class="line"><span class="comment">// B and B;</span></div><div class="line"><span class="comment">// C and C;</span></div><div class="line"><span class="comment">// undefined and undefined;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'No.1'</span>, <span class="string">'Alice'</span>], [<span class="string">'No.2'</span>, <span class="string">'Bob'</span>], [<span class="string">'No.3'</span>, <span class="string">'Candy'</span>]]);</div><div class="line">m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> ==&gt; <span class="subst">$&#123;value&#125;</span>;`</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// No.1 ==&gt; Alice;</span></div><div class="line"><span class="comment">// No.2 ==&gt; Bob;</span></div><div class="line"><span class="comment">// No.3 ==&gt; Candy;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PC程序清单 & 实用小工具]]></title>
      <url>https://flintx.github.io/2017/02/04/tools-list/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前用的PC大限将至，即将随本科岁月一起成为过往。</p>
<p>在寿终正寝之前，整理一份陪伴五年时光的程序清单。</p>
<a id="more"></a>
<h2 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h2><hr>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><blockquote>
<p><code>Google Chrome</code></p>
<p><code>Mozilla Firefox</code></p>
</blockquote>
<h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><blockquote>
<p><code>网易云音乐</code></p>
</blockquote>
<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><blockquote>
<p><code>PotPlayer</code></p>
</blockquote>
<h3 id="聊天"><a href="#聊天" class="headerlink" title="聊天"></a>聊天</h3><blockquote>
<p><code>QQ轻聊版</code></p>
</blockquote>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><blockquote>
<p><code>迅雷极速版</code></p>
<p><code>百度云客户端</code></p>
<p><code>µTorrent 2.0.4</code> </p>
</blockquote>
<h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><blockquote>
<p><code>Steam</code></p>
<p><code>TGP</code></p>
<p><code>UPlay</code></p>
</blockquote>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><h4 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h4><blockquote>
<p><strong>C/C++/C#:</strong></p>
<p>​    <code>Dev C++ 4.9.9.2</code></p>
<p>​    <code>Code::Blocks IDE 16.1.1.0</code></p>
<p>​    <code>Microsoft Visual Studio 14.0</code></p>
<p><strong>Java:</strong></p>
<p>​    <code>IntelliJ IDEA 15.0.2</code></p>
<p>​    <code>Android Studio 2.2</code></p>
<p>​    <code>Eclipse Java Mars</code></p>
<p><strong>Python:</strong></p>
<p>​    <code>PyCharm 2016.1</code></p>
<p><strong>PHP:</strong></p>
<p>​    <code>PhpStorm 10.0.3</code></p>
</blockquote>
<h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4><blockquote>
<p><code>Notepad++ 6.9.2</code> （普通文本处理）</p>
<p><code>gVim 7.4</code>（单文件程序、算法demo编写）</p>
<p><code>Sublime text 3</code>（前端处理）</p>
<p><code>Visual Studio Code 1.8.1</code>（闲置中Orz）</p>
<p><code>Typora 0.9.23</code>（markdown文件）</p>
</blockquote>
<h4 id="编译器-amp-解释器"><a href="#编译器-amp-解释器" class="headerlink" title="编译器 &amp; 解释器"></a>编译器 &amp; 解释器</h4><blockquote>
<p><code>gcc 4.7.1</code></p>
<p><code>jdk 1.8.0_73</code></p>
<p><code>Python 3.4 &amp; 2.7</code></p>
<p><code>PHP 7.0 &amp; 5.5</code></p>
</blockquote>
<h4 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h4><blockquote>
<p><code>MySQL</code></p>
<p><code>Git</code></p>
<p><code>Node.js</code></p>
<p><code>Apache 2.4</code></p>
<p>…</p>
</blockquote>
<h3 id="学习-研究"><a href="#学习-研究" class="headerlink" title="学习/研究"></a>学习/研究</h3><blockquote>
<p><code>Microsoft Office 2016</code> （文档处理）</p>
<p><code>Microsoft Visio 2016</code> （绘图）</p>
<p><code>MATLAB R2016a</code>（科学计算、图像处理）</p>
<p><code>Acrobat Reader DC</code>（pdf阅读）</p>
<p><code>VMware Workstation Pro 12.1</code>（虚拟机）</p>
<p><code>Adobe Photoshop CS6</code> （表情包制作【???】）</p>
</blockquote>
<h3 id="实用小工具"><a href="#实用小工具" class="headerlink" title="实用小工具"></a>实用小工具</h3><blockquote>
<p>本地文件检索：</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/Everything-1.3.4.686.x64.Multilingual-Setup.exe" target="_blank" rel="external">Everything.exe</a></p>
<p>电脑色温控制：</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/flux-setup.exe" target="_blank" rel="external">flux.exe</a></p>
<p>host修改器：</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/tool.exe" target="_blank" rel="external">HostTool.exe</a></p>
<p>源码可参考(<a href="https://github.com/HostsTools/Windows" target="_blank" rel="external">https://github.com/HostsTools/Windows</a>)</p>
<p>Windows字体渲染：</p>
<p><a href="http://www.mactype.net/" target="_blank" rel="external">MacType</a></p>
<p>截图:</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/Snipaste-1.11.3-x64.zip" target="_blank" rel="external">Snipaste.exe</a></p>
<p>最喜欢的两款字体：</p>
<p><a href="https://github.com/adobe-fonts/source-code-pro/archive/2.030R-ro/1.050R-it.zip" target="_blank" rel="external">Source Code Pro</a></p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/MONACO.TTF" target="_blank" rel="external">Moncao</a></p>
<p>MinGW编译器：</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/mingw-get-setup.exe" target="_blank" rel="external">mingw-get-setup.exe</a></p>
</blockquote>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line">source $VIMRUNTIME/mswin.vim</div><div class="line"></div><div class="line">behave mswin</div><div class="line">set nocompatible</div><div class="line">set nobackup</div><div class="line">set ignorecase</div><div class="line">syn on</div><div class="line">&quot;set t_Co=256 </div><div class="line">colo molokai</div><div class="line">set hlsearch</div><div class="line">filetype indent on</div><div class="line">se ru nu ar sw=4 ts=4 noswf et sta nowrap ww=&lt;,&gt;,[,] gfn=Source_Code_Pro_Medium:h14:cANSI</div><div class="line">set shiftwidth=4</div><div class="line">set tabstop=4</div><div class="line"></div><div class="line">&quot;高亮当前行</div><div class="line">&quot;set cursorline</div><div class="line"></div><div class="line">&quot;统计字数</div><div class="line">map &lt;Enter&gt;&lt;Enter&gt; g&lt;c-G&gt;</div><div class="line"></div><div class="line">&quot;隐藏工具栏与菜单栏</div><div class="line">&quot;set guioptions-=m</div><div class="line">set guioptions-=T</div><div class="line">set guioptions-=r</div><div class="line">set guioptions-=L</div><div class="line"></div><div class="line">autocmd BufEnter * lcd %:p:h</div><div class="line"></div><div class="line"></div><div class="line">imap &lt;c-d&gt; &lt;c-o&gt;dd</div><div class="line">imap &lt;c-]&gt; &#123;&lt;cr&gt;&#125;&lt;c-o&gt;O&lt;left&gt;&lt;right&gt;</div><div class="line">imap &lt;c-k&gt; &lt;up&gt;</div><div class="line">imap &lt;c-j&gt; &lt;down&gt;</div><div class="line">imap &lt;c-h&gt; &lt;left&gt;</div><div class="line">imap &lt;c-l&gt; &lt;right&gt;</div><div class="line">imap &lt;c-tab&gt; &lt;esc&gt;gt</div><div class="line">imap &lt;cr&gt; &lt;cr&gt;&lt;left&gt;&lt;right&gt;</div><div class="line"></div><div class="line">inoremap ( ()&lt;left&gt;</div><div class="line">inoremap [ []&lt;left&gt;</div><div class="line"></div><div class="line">noremap &lt;F6&gt; =a&#123;</div><div class="line"></div><div class="line">map &lt;F7&gt; :g/^\s*$/d&lt;CR&gt;</div><div class="line">map &lt;c-t&gt; :tabnew&lt;CR&gt;</div><div class="line">map &lt;F3&gt; :e test.cpp&lt;CR&gt;</div><div class="line">map &lt;F9&gt; :call CR()&lt;CR&gt;&lt;CR&gt;</div><div class="line">func CR()</div><div class="line">exec &apos;update&apos;</div><div class="line">if &amp;filetype == &quot;java&quot;  </div><div class="line">    exec &quot;!javac % &amp;&amp; java %&lt;&quot; </div><div class="line">elseif &amp;filetype == &quot;python&quot;</div><div class="line">    exec &quot;!python %&quot;</div><div class="line">else</div><div class="line">    exec &apos;!g++ %&lt;.cpp -o %&lt; &amp;&amp; %&lt;&apos;</div><div class="line">endif</div><div class="line">endfunc</div><div class="line">map &lt;f2&gt; :call SetTitle()&lt;CR&gt;Gkkk</div><div class="line">func SetTitle()</div><div class="line">let l = 0</div><div class="line">let l = l + 1 | call setline(l, &apos;/*&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;Creat Time:&apos;.strftime(&apos;%c&apos;))</div><div class="line">let l = l + 1 | call setline(l, &apos;*/&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;//#pragma comment(linker, &quot;/STACK:102400000,102400000&quot;)&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;iostream&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;cstdio&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;cstring&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;cstdlib&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;cmath&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;algorithm&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;functional&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;string&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;map&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;set&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;vector&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;queue&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;stack&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;bitset&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;ctime&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;using namespace std;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define clr( x , y ) memset(x,y,sizeof(x))&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define cls( x ) memset(x,0,sizeof(x))&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define pr( x ) cout &lt;&lt; #x &lt;&lt; &quot; = &quot; &lt;&lt; x &lt;&lt; endl &apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define pri( x ) cout &lt;&lt; #x &lt;&lt; &quot; = &quot; &lt;&lt; x &lt;&lt; &quot; &quot; &apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define test( t ) int t ; cin &gt;&gt; t ; int kase = 1 ; while( t-- )&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define out( kase ) printf( &quot;Case %d: &quot; , kase++ )&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define sqr( x ) ( x * x )&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define mp make_pair&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define pii pair&lt;int,int&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define fi first&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define se second&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define pb push_back&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;typedef long long lint;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;const double eps = 1e-8 ;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;const int inf = 0x3f3f3f3f ;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;const long long INF = 0x3f3f3f3f3f3f3f3fLL ;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;int main()&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&#123;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    //freopen(&quot;my.in&quot;,&quot;r&quot;,stdin);&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    //freopen(&quot;my.out&quot;,&quot;w&quot;,stdout);&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    return 0;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&#125;&apos;)</div><div class="line">endfunc</div><div class="line"></div><div class="line">map&lt;f4&gt; :call AddComment()&lt;cr&gt;</div><div class="line">func AddComment()</div><div class="line">    if matchstr(getline(&apos;.&apos;), &apos;[^ ]&apos;) == &apos;/&apos;</div><div class="line">        normal ^xx</div><div class="line">    else</div><div class="line">        normal ^i//</div><div class="line">    endif</div><div class="line">endfunc</div><div class="line"></div><div class="line">map &lt;f5&gt; :call SetTitle2()&lt;CR&gt;Gkkk</div><div class="line">func SetTitle2()</div><div class="line">let l = 0</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;bits/stdc++.h&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;using namespace std;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;int main()&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&#123;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    freopen(&quot;my.in&quot;,&quot;r&quot;,stdin);&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    //freopen(&quot;my.out&quot;,&quot;w&quot;,stdout);&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    return 0;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&#125;&apos;)</div><div class="line">endfunc</div><div class="line"></div><div class="line"></div><div class="line">set printoptions=syntax:n,number:y,portrait:y</div><div class="line"></div><div class="line">cd E:\Coder\my vim\</div><div class="line"></div><div class="line">set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</div><div class="line">au GUIEnter * simalt ~x                           &quot;窗口启动时自动最大化</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello, My Blog]]></title>
      <url>https://flintx.github.io/2017/02/02/hello/</url>
      <content type="html"><![CDATA[<h2 id="图片插入测试"><a href="#图片插入测试" class="headerlink" title="图片插入测试"></a>图片插入测试</h2><p><img src="http://okqi2ipwh.bkt.clouddn.com/39163751_p0.jpg" alt="a image"></p>
<a id="more"></a>
<h2 id="代码高亮测试"><a href="#代码高亮测试" class="headerlink" title="代码高亮测试"></a>代码高亮测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">print(<span class="string">"hello, my blog"</span>)</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.math.BigInteger;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner cin = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">int</span> t = cin.nextInt();</div><div class="line">		<span class="keyword">int</span> i = <span class="number">1</span> ;</div><div class="line">		<span class="keyword">while</span>( i &lt;= t )&#123;</div><div class="line">			BigInteger a = cin.nextBigInteger();</div><div class="line">			BigInteger b = cin.nextBigInteger();</div><div class="line">			BigInteger c = a.mod(b) ;</div><div class="line">			<span class="keyword">if</span>( c == BigInteger.ZERO )</div><div class="line">				System.out.println(<span class="string">"Case "</span>+i+<span class="string">": divisible"</span>);</div><div class="line">			<span class="keyword">else</span></div><div class="line">				System.out.println(<span class="string">"Case "</span>+i+<span class="string">": not divisible"</span>);</div><div class="line">		&#125;</div><div class="line">		cin.close();</div><div class="line">		</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数学公式测试"><a href="#数学公式测试" class="headerlink" title="数学公式测试"></a>数学公式测试</h2><script type="math/tex; mode=display">
\begin{array}{c|lcr}
n & \text{Left} & \text{Center} & \text{Right} \\
\hline
1 & 0.24 & 1 & 125 \\
2 & -1 & 189 & -8 \\
3 & -20 & 2000 & 1+10i \\
\end{array}</script><p>$ x^2 + y^2 = z_1 + z_{a2} $</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[建站日志]]></title>
      <url>https://flintx.github.io/2017/02/02/Blog-Logs/</url>
      <content type="html"><![CDATA[<h2 id="2017-02-08"><a href="#2017-02-08" class="headerlink" title="2017 - 02 - 08"></a>2017 - 02 - 08</h2><ul>
<li>增加文章加密功能（解密后会出现数学公式渲染与字体api引起的代码高亮错误，仅适用于加密简单文本）</li>
</ul>
<h2 id="2017-02-07"><a href="#2017-02-07" class="headerlink" title="2017 - 02 - 07"></a>2017 - 02 - 07</h2><ul>
<li>添加友链</li>
<li>添加<code>README.md</code>文件</li>
<li>添加<code>RSS</code>连接</li>
</ul>
<h2 id="2017-02-06"><a href="#2017-02-06" class="headerlink" title="2017 - 02 - 06"></a>2017 - 02 - 06</h2><ul>
<li>增加多说评论功能、<code>UA</code>显示功能</li>
<li>增加阅读次数统计功能（利用<code>LeanCloud</code>）</li>
<li>添加<code>关于</code>、<code>分类</code>、<code>标签</code>页面</li>
</ul>
<h2 id="2017-02-04"><a href="#2017-02-04" class="headerlink" title="2017 - 02 - 04"></a>2017 - 02 - 04</h2><ul>
<li>blog主题由<code>NexT</code>修改为<code>yilia</code></li>
<li>绑定域名<a href="http://www.flintx.me" target="_blank" rel="external">flintx.me</a></li>
<li>blog主题由<code>yilia</code>修改为<code>NexT</code></li>
<li>外观Scheme由<code>Pisces</code>修改为<code>Mist</code></li>
<li>开启代码高亮功能</li>
<li>开启<code>MathJax</code>数学公式支持</li>
<li>更换部分字体，并将fonts api的host由google切换至中科大镜像</li>
<li>使用七牛云作为图床</li>
</ul>
<h2 id="2017-02-03"><a href="#2017-02-03" class="headerlink" title="2017 - 02 - 03"></a>2017 - 02 - 03</h2><ul>
<li>修改语言为中文</li>
</ul>
<h2 id="2017-02-02"><a href="#2017-02-02" class="headerlink" title="2017 - 02 - 02"></a>2017 - 02 - 02</h2><ul>
<li>建立项目<a href="https://github.com/flintx/flintx.github.io" target="_blank" rel="external">flintx.github.io</a></li>
<li>blog框架由<code>Jekyll</code>切换为<code>Hexo</code></li>
<li>使用<code>NexT</code>作为blog主题，并采用<code>Pisces</code>作为外观Scheme</li>
<li>添加侧边栏社交link</li>
<li>添加作者头像、描述</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
