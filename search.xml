<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Centos 7 Python3 以及 pip3 安装]]></title>
      <url>https://flintx.github.io/2017/12/15/Centos%207%20Python3%20%E4%BB%A5%E5%8F%8A%20pip3%20%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="用户不在-sudoers-文件中的解决方法"><a href="#用户不在-sudoers-文件中的解决方法" class="headerlink" title="用户不在 sudoers 文件中的解决方法"></a>用户不在 sudoers 文件中的解决方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># 切换到root用户权限</div><div class="line">$ su</div><div class="line">密码: </div><div class="line"></div><div class="line"># 查看/etc/sudoers文件权限，如果只读权限，修改为可写权限</div><div class="line">$ ls -l /etc/sudoers</div><div class="line">-r--r-----. 1 root root 3938 9月   6 21:01 /etc/sudoers</div><div class="line">$ chmod 777 /etc/sudoers</div><div class="line">$ ls -l /etc/sudoers</div><div class="line">-rwxrwxrwx. 1 root root 3938 9月   6 21:01 /etc/sudoers</div><div class="line"></div><div class="line"># 编辑/etc/sudoers文件，添加要提升权限的用户</div><div class="line">$ vim /etc/sudoers</div><div class="line"></div><div class="line"># 找到 root    ALL=(ALL)      ALL 这句话，修改为：</div><div class="line">root    ALL=(ALL)       ALL</div><div class="line">admin   ALL=(ALL)       ALL</div><div class="line"># 用户名    网络中的主机=（执行命令的目标用户）    执行的命令范围</div><div class="line">&gt; :x # 保存退出</div><div class="line"></div><div class="line"># 恢复/etc/sudoers的访问权限为 440</div><div class="line">$ chmod 440 /etc/sudoers</div><div class="line">$ ls -l /etc/sudoers</div><div class="line">-r--r-----. 1 root root 3938 9月   6 21:01 /etc/sudoers</div><div class="line"></div><div class="line"># 退出 root，登录 admin，测试 sudo</div><div class="line">$ su admin</div><div class="line">$ sudo yum install -y openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-deve</div><div class="line"># OK</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Centos-7-Python3-以及-pip3-安装"><a href="#Centos-7-Python3-以及-pip3-安装" class="headerlink" title="Centos 7 Python3 以及 pip3 安装"></a>Centos 7 Python3 以及 pip3 安装</h2><h3 id="安装-Python3"><a href="#安装-Python3" class="headerlink" title="安装 Python3"></a>安装 Python3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># 可能使用到的依赖</div><div class="line">$ sudo yum install -y openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-deve</div><div class="line"></div><div class="line"># 下载源码，如果想换其他版本可以去 https://www.python.org/ftp/python/ 上找</div><div class="line">$ wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz</div><div class="line"></div><div class="line"># 解压文件</div><div class="line">$ tar -xzvf Python-3.6.3.tgz</div><div class="line"></div><div class="line"># 配置安装路径, 默认安装路径是usr/bin，但由于已自带python2，使用默认路径会产生冲突，故需要安装在另外的位置</div><div class="line">$ cd Python-3.6.3</div><div class="line">$ ./configure --prefix=/usr/local</div><div class="line"></div><div class="line"># 编译安装</div><div class="line">$ sudo make </div><div class="line">$ sudo make install</div><div class="line"></div><div class="line"># 测试（Python-3.6.3目录下）</div><div class="line">$ ./python -V</div><div class="line">Python 3.6.3</div></pre></td></tr></table></figure>
<h3 id="创建-python3-的软链接"><a href="#创建-python3-的软链接" class="headerlink" title="创建 python3 的软链接"></a>创建 python3 的软链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ sudo ln -s /usr/local/bin/python3 /usr/bin/python3</div><div class="line"></div><div class="line"># 测试（任意目录下）</div><div class="line">$ python3 -V</div><div class="line">Python 3.6.3</div><div class="line">$ python -V</div><div class="line">Python 2.7.5</div></pre></td></tr></table></figure>
<p>创建成功后，即可用 <code>python</code> 命令来使用 python2，用 <code>python3</code> 命令来使用 python3</p>
<h3 id="安装-pip3-并配置软链接"><a href="#安装-pip3-并配置软链接" class="headerlink" title="安装 pip3 并配置软链接"></a>安装 pip3 并配置软链接</h3><p>一般来说，Centos 7 会自带一个 python 2，但并未安装相应版本的 pip （即pip2），为了便于双版本的无缝切换使用，先安装一个 pip2：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 首先安装 epel 扩展源</div><div class="line">$ sudo yum -y install epel-release</div><div class="line"></div><div class="line"># 安装 python-pip</div><div class="line">$ sudo yum -y install python-pip</div><div class="line"></div><div class="line"># 清除 cache</div><div class="line">$ sudo yum clean all</div><div class="line"></div><div class="line"># 测试（任意目录下）</div><div class="line">$ pip -V</div><div class="line">pip 8.1.2 from /usr/lib/python2.7/site-packages (python 2.7)</div></pre></td></tr></table></figure>
<p>在高版本的 Python 3 安装中，往往会自带 pip，于是在执行 <code>make install</code> 时可能就已经安装了 pip3。通过以下命令来确认是否安装了pip3：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pip3 -V</div><div class="line">pip 9.0.1 from /usr/local/lib/python3.6/site-packages (python 3.6)</div></pre></td></tr></table></figure>
<p>如果是提示未找到命令，则说明未安装或未链接，可通过源码来安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 下载源代码</div><div class="line">$ wget --no-check-certificate https://github.com/pypa/pip/archive/9.0.1.tar.gz</div><div class="line"></div><div class="line"># 解压文件</div><div class="line">$ tar -zvxf 9.0.1</div><div class="line">$ cd pip-9.0.1</div><div class="line"></div><div class="line"># 使用 Python 3 安装</div><div class="line">$ python3 setup.py install</div><div class="line"></div><div class="line"># 配置软链接</div><div class="line">$ sudo ln -s /usr/local/bin/pip /usr/bin/pip3</div><div class="line"></div><div class="line"># 测试（任意目录下）</div><div class="line">$ pip3 -V</div><div class="line">pip 9.0.1 from /usr/local/lib/python3.6/site-packages (python 3.6)</div></pre></td></tr></table></figure>
<h3 id="更换系统默认-Python-版本"><a href="#更换系统默认-Python-版本" class="headerlink" title="更换系统默认 Python 版本"></a>更换系统默认 Python 版本</h3><p>进行完以上几步，即能共存使用两个版本的 Python 代码，若想将 Python 默认版本更改为 python 3（即通过 <code>python</code> 命令而非 <code>python3</code> 命令来使用 Python），还需要额外进行一些配置。</p>
<p>具体方法参考 <a href="http://blog.csdn.net/hobohero/article/details/54381475" target="_blank" rel="external">http://blog.csdn.net/hobohero/article/details/54381475</a> 。</p>
<p>由于 yum 以及部分应用依赖于 Python 2，推荐还是使用两个版本共存，默认使用Python2 的方案。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Prometheus 与 Grafana 实现服务器运行状态监控]]></title>
      <url>https://flintx.github.io/2017/12/12/Prometheus%20+%20Grafana%20%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7/</url>
      <content type="html"><![CDATA[<h2 id="什么是Prometheus"><a href="#什么是Prometheus" class="headerlink" title="什么是Prometheus?"></a>什么是Prometheus?</h2><p>Prometheus 是由 SoundCloud 开发的开源监控报警系统和时序列数据库(TSDB)。</p>
<p>Prometheus 使用 Go 语言开发，是 Google BorgMon 监控系统的开源版本。</p>
<a id="more"></a>
<p>其架构如下：</p>
<p><img src="https://prometheus.io/assets/architecture.svg" alt=""></p>
<p>Prometheus 的基本原理是：</p>
<blockquote>
<p>通过HTTP协议周期性抓取被监控组件的状态，任意组件只要提供对应的 HTTP 接口就可以接入监控。不需要任何SDK或者其他的集成过程。</p>
</blockquote>
<p>Prometheus服务过程大概是这样：</p>
<ul>
<li>Prometheus Daemon负责定时去目标上抓取metrics(指标)数据，每个抓取目标需要暴露一个 http 服务的接口给它定时抓取。Prometheus 采用 pull 的方式进行监控，即服务器可以直接通过目标 pull 数据.</li>
<li>Prometheus 在本地存储抓取的所有数据，并通过一定规则进行清理和整理数据，并把得到的结果存储到新的时间序列中。</li>
<li>Prometheus 通过 PromQL和其他 API 可视化地展示收集的数据。Prometheus 支持很多方式的图表可视化，例如 <strong>Grafana</strong>、自带的Promdash以及自身提供的模版引擎等等。Prometheus 还提供 HTTP API 的查询方式，自定义所需要的输出。</li>
<li>PushGateway支持 client 主动推送 metrics 到 PushGateway，而 Prometheus 只是定时去 Gateway 上抓取数据。</li>
<li>Alertmanager是独立于Prometheus的一个组件，可以支持 Prometheus 的查询语句，提供十分灵活的报警方式。</li>
</ul>
<p>而我们的使用场景如下：</p>
<blockquote>
<ul>
<li>4 台需要被监控的服务器；</li>
<li>监控项主要有 CPU、内存的使用情况，可以使用 node_exporter 插件实现；</li>
<li>1 台服务器既被监控同时也作为 server 来接收其余 3 台服务器的运行状况；</li>
<li>可视化部分用 Grafana 来完成。</li>
</ul>
</blockquote>
<h2 id="Prometheus-以及-node-exporter-的安装"><a href="#Prometheus-以及-node-exporter-的安装" class="headerlink" title="Prometheus 以及 node_exporter 的安装"></a>Prometheus 以及 node_exporter 的安装</h2><ol>
<li><p>先在 server 机（用了4号机作为 server）上下载最新的 release 并解压 : <a href="https://prometheus.io/download/" target="_blank" rel="external">https://prometheus.io/download/</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/prometheus/prometheus/releases/download/v2.0.0/prometheus-2.0.0.linux-amd64.tar.gz</div><div class="line">$ tar xvfz prometheus-*.tar.gz</div><div class="line">$ mv prometheus-2.0.0.linux-amd64 prometheus <span class="comment"># 为文件夹改名</span></div></pre></td></tr></table></figure>
</li>
<li><p>在 prometheus 目录下有一个名为 <code>prometheus.yml</code> 的主配置文件。查看其内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd prometheus</div><div class="line">$ vim prometheus.yml</div></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># my global config</span></div><div class="line"><span class="attr">global:</span></div><div class="line"><span class="attr">  scrape_interval:</span>     <span class="number">15</span>s <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></div><div class="line"><span class="attr">  evaluation_interval:</span> <span class="number">15</span>s <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></div><div class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></div><div class="line"></div><div class="line"><span class="comment"># Alertmanager configuration</span></div><div class="line"><span class="attr">alerting:</span></div><div class="line"><span class="attr">  alertmanagers:</span></div><div class="line"><span class="attr">  - static_configs:</span></div><div class="line"><span class="attr">    - targets:</span></div><div class="line">      <span class="comment"># - alertmanager:9093</span></div><div class="line"></div><div class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></div><div class="line"><span class="attr">rule_files:</span></div><div class="line">  <span class="comment"># - "first_rules.yml"</span></div><div class="line">  <span class="comment"># - "second_rules.yml"</span></div><div class="line"></div><div class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></div><div class="line"><span class="comment"># Here it's Prometheus itself.</span></div><div class="line"><span class="attr">scrape_configs:</span></div><div class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></div><div class="line"><span class="attr">  - job_name:</span> <span class="string">'prometheus'</span></div><div class="line"></div><div class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></div><div class="line">    <span class="comment"># scheme defaults to 'http'.</span></div><div class="line"></div><div class="line"><span class="attr">    static_configs:</span></div><div class="line"><span class="attr">      - targets:</span> [<span class="string">'localhost:9090'</span>]</div></pre></td></tr></table></figure>
<p>其中 <code>scrape_configs</code> 项目中的内容是我们主要关注的，该配置项决定了我们的 Prometheus 需要去抓取哪些数据，默认配置中只有一个 <code>prometheus</code> 的 <code>job</code> ，这个 <code>job</code> 是 Prometheus 自带的，它的功能是提供 Prometheus 进程本身的运行数据以供我们抓取。</p>
<p>除了 <code>prometheus</code> 这个 <code>job</code> 以外，我们还没任何为 Prometheus 提供数据的 HTTP API 程序。于是我们先将 Prometheus 的配置任务放去后面，下一步是在四台服务器上安装  <code>node_exporter</code> </p>
</li>
<li><p>在 4 台需要监控的服务器上下载解压 <code>node_exporter</code> ：<a href="https://prometheus.io/download/#node_exporter" target="_blank" rel="external">https://prometheus.io/download/#node_exporter</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/prometheus/node_exporter/releases/download/v0.15.1/node_exporter-0.15.1.linux-amd64.tar.gz</div><div class="line">$ tar -zxvf node_exporter-0.15.1.linux-amd64.tar.gz</div><div class="line">$ mv node_exporter-0.15.1.linux-amd64 prometheus/node_exporter # 将文件夹重命名后移入prometheus 文件夹</div><div class="line">$ ls prometheus</div><div class="line">console_libraries  consoles  data LICENSE  node_exporter  NOTICE  prometheus  prometheus.yml  promtool</div></pre></td></tr></table></figure>
<p>由于 <code>node_exporter</code> 是编译好的程序，我们可以将其配为服务直接运行。</p>
</li>
<li><p>在 4 台需要监控的服务器上配置 <code>node_exporter</code> 服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /etc/systemd/system/node_exporter.service</div></pre></td></tr></table></figure>
<p>内容如下：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="section">[Unit]</span></div><div class="line"><span class="attr">Description</span>=Node Exporter</div><div class="line"><span class="section"></span></div><div class="line">[Service]</div><div class="line"><span class="attr">User</span>=admin </div><div class="line"><span class="attr">ExecStart</span>=/home/admin/prometheus/node_exporter/node_exporter</div><div class="line"><span class="section"></span></div><div class="line">[Install]</div><div class="line"><span class="attr">WantedBy</span>=default.target</div></pre></td></tr></table></figure>
<p>运行服务装载命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl daemon-reload</div><div class="line">$ sudo systemctl enable node_exporter.service</div><div class="line">$ sudo systemctl start node_exporter.service</div><div class="line">$ systemctl status node_exporter</div><div class="line">● node_exporter.service - Node Exporter</div><div class="line">   Loaded: loaded (/etc/systemd/system/node_exporter.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since 二 2017-12-05 17:39:32 CST; 1 day 2h ago</div><div class="line"> Main PID: 4752 (node_exporter)</div><div class="line">   CGroup: /system.slice/node_exporter.service</div><div class="line">           └─4752 /home/admin/prometheus/node_exporter/node_exporter</div></pre></td></tr></table></figure>
<p><code>node_exporter</code> 的 HTTP API 默认端口是 9100 ，为其开放防火墙：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ sudo firewall-cmd --zone=public --add-port=9100/tcp --permanent ; sudo firewall-cmd --reload</div><div class="line"></div><div class="line"># 测试</div><div class="line">$ curl http://localhost:9100</div><div class="line">&lt;html&gt;</div><div class="line">			&lt;head&gt;&lt;title&gt;Node Exporter&lt;/title&gt;&lt;/head&gt;</div><div class="line">			&lt;body&gt;</div><div class="line">			&lt;h1&gt;Node Exporter&lt;/h1&gt;</div><div class="line">			&lt;p&gt;&lt;a href=&quot;/metrics&quot;&gt;Metrics&lt;/a&gt;&lt;/p&gt;</div><div class="line">			&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>重新编辑 server 机上的 <code>prometheus.yml</code> 配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># my global config</span></div><div class="line"><span class="attr">global:</span></div><div class="line"><span class="attr">  scrape_interval:</span>     <span class="number">15</span>s <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></div><div class="line"><span class="attr">  evaluation_interval:</span> <span class="number">15</span>s <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></div><div class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></div><div class="line"></div><div class="line"><span class="comment"># Alertmanager configuration</span></div><div class="line"><span class="attr">alerting:</span></div><div class="line"><span class="attr">  alertmanagers:</span></div><div class="line"><span class="attr">  - static_configs:</span></div><div class="line"><span class="attr">    - targets:</span></div><div class="line">      <span class="comment"># - alertmanager:9093</span></div><div class="line"></div><div class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></div><div class="line"><span class="attr">rule_files:</span></div><div class="line">  <span class="comment"># - "first_rules.yml"</span></div><div class="line">  <span class="comment"># - "second_rules.yml"</span></div><div class="line"></div><div class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></div><div class="line"><span class="comment"># Here it's Prometheus itself.</span></div><div class="line"><span class="attr">scrape_configs:</span></div><div class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></div><div class="line"><span class="attr">  - job_name:</span> <span class="string">'prometheus'</span></div><div class="line"></div><div class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></div><div class="line">    <span class="comment"># scheme defaults to 'http'.</span></div><div class="line"></div><div class="line"><span class="attr">    static_configs:</span></div><div class="line"><span class="attr">      - targets:</span> [<span class="string">'localhost:9090'</span>]</div><div class="line">      </div><div class="line"><span class="comment"># 添加的部分</span></div><div class="line">      </div><div class="line"><span class="attr">  - job_name:</span> <span class="string">"node1"</span></div><div class="line"><span class="attr">    static_configs:</span></div><div class="line"><span class="attr">      - targets:</span> [<span class="string">'111.x.xxx.20:9100'</span>]</div><div class="line">      </div><div class="line"><span class="attr">  - job_name:</span> <span class="string">"node2"</span></div><div class="line"><span class="attr">    static_configs:</span></div><div class="line"><span class="attr">      - targets:</span> [<span class="string">'111.x.xxx.20:9100'</span>]</div><div class="line"></div><div class="line"><span class="attr">  - job_name:</span> <span class="string">"node3"</span></div><div class="line"><span class="attr">    static_configs:</span></div><div class="line"><span class="attr">      - targets:</span> [<span class="string">'111.x.xxx.20:9100'</span>]</div><div class="line"></div><div class="line"><span class="attr">  - job_name:</span> <span class="string">"node4"</span></div><div class="line"><span class="attr">    static_configs:</span></div><div class="line"><span class="attr">      - targets:</span> [<span class="string">'111.x.xxx.21:9100'</span>]</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>配置 Prometheus  服务并运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /etc/systemd/system/prometheus.service</div><div class="line">$ cat vim /etc/systemd/system/prometheus.service</div><div class="line">[Unit]</div><div class="line">Description=Node Exporter</div><div class="line"></div><div class="line">[Service]</div><div class="line">User=root</div><div class="line">ExecStart=/home/admin/prometheus/prometheus --config.file=/home/admin/prometheus/prometheus.yml </div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=default.target</div><div class="line"></div><div class="line">$ sudo systemctl daemon-reload</div><div class="line">$ sudo systemctl enable prometheus.service</div><div class="line">$ sudo systemctl start prometheus.service</div><div class="line">$ systemctl status prometheus</div><div class="line">● prometheus.service - Node Exporter</div><div class="line">   Loaded: loaded (/etc/systemd/system/prometheus.service; enabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since 三 2017-12-06 20:43:35 CST; 3s ago</div><div class="line"> Main PID: 5918 (prometheus)</div><div class="line">   CGroup: /system.slice/prometheus.service</div><div class="line">           └─5918 /home/admin/prometheus/prometheus --config.file=/home/admin/prometheus/prometheus.yml</div><div class="line">           </div><div class="line"># 为 Prometheus 开启防火墙</div><div class="line">$ sudo firewall-cmd --zone=public --add-port=9090/tcp --permanent ; sudo firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>测试，访问 <a href="http://yourserverip:9090/graph" target="_blank" rel="external">http://yourserverip:9090/graph</a> ，执行 <code>node_load1</code> 可绘制 CPU 瞬时运行图，也可以通过 <a href="http://yourserverip:9090/targets" target="_blank" rel="external">http://yourserverip:9090/targets</a> 来查看 job 的部署情况，通过 <a href="http://yourserverip:9090/metrics。" target="_blank" rel="external">http://yourserverip:9090/metrics。</a></p>
</li>
</ol>
<h2 id="Grafana-的安装"><a href="#Grafana-的安装" class="headerlink" title="Grafana 的安装"></a>Grafana 的安装</h2><p>用 Prometheus 自带的控制面板略显简陋，一时要手动刷新数据，二是可视化功能不够强大、不支持自定义数据显示，三是执行命令太过繁琐。</p>
<p>于是我们选择 Grafana 来作为可视化工具。</p>
<p>其安装过程（可在任意主机安装）如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-4.6.2-1.x86_64.rpm</div><div class="line"># 为 Grafana 开启防火墙</div><div class="line">$ sudo firewall-cmd --zone=public --add-port=9090/tcp --permanent ; sudo firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>启动服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service grafana-server start</div></pre></td></tr></table></figure>
<p>启动后可使用 <code>http://yourip:3000</code> 访问 Grafana 页面，配置好用户名和密码后，先设置好数据源（data source），也就是从哪里获取数据。</p>
<p>参考：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/grafana_data_source.png" alt=""></p>
<p>可视化的具体配置可参考官方文档，推荐使用 Node Exporter Server Metrics 模板，访问 <code>https://grafana.com/dashboards/405</code> ，在 Dashboard 中导入该模板即可</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习笔记06（Ajax 与 JSON）]]></title>
      <url>https://flintx.github.io/2017/09/20/learnjs-06/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考 &amp; 学习：</p>
<p><a href="https://book.douban.com/subject/10792216/" target="_blank" rel="external">锋利的jQuery</a></p>
<p><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖老师的JavaScript教程</a></p>
<p><a href="http://www.runoob.com/jquery/jquery-intro.html" target="_blank" rel="external">jQuery 教程 | 菜鸟教程</a></p>
<p><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰的网络日志</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference" target="_blank" rel="external">JavaScript 参考文档</a></p>
<p><a href="http://www.w3school.com.cn/js/index.asp" target="_blank" rel="external">W3School JavaScript 教程</a></p>
<p>由衷感谢这些资料的提供者与撰写者！</p>
</blockquote>
<a id="more"></a>
<p>Ajax 全称是 <strong>Asynchronous JavaScript and XML（异步的JavaScript与XML）</strong> , 它的出现开启了无刷新即可更新页面的时代，并使用户操作与服务器响应异步化（使之不需要相互等待），大大减轻了服务器与带宽的负担。</p>
<h2 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h2><p>Ajax 技术的核心是 XMLHttpRequest 对象，用以发送异步请求、接收服务器响应与执行回调函数。</p>
<p>一个demo（<code>learn-ajax-01.html</code> ）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> xmlHttpReq = <span class="literal">null</span>;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123; <span class="comment">// 兼容IE5 &amp; IE6</span></div><div class="line">                xmlHttpReq = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                xmlHttpReq = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">          	<span class="comment">// 第一个参数：请求方法</span></div><div class="line">          	<span class="comment">// 第二个参数：请求url</span></div><div class="line">          	<span class="comment">// 第三个参数：是否异步加载，默认为true。如果为false，则网页需要等待响应后才能继续加载</span></div><div class="line">            xmlHttpReq.open(<span class="string">"GET"</span>, <span class="string">"test-01.php"</span>, <span class="literal">true</span>); </div><div class="line">            <span class="comment">// 设置回调函数</span></div><div class="line">            xmlHttpReq.onreadystatechange = RequestCallback;</div><div class="line">          	<span class="comment">// 发送请求，GET请求不需要参数，POST请求需要把body部分以字符串或者FormData对象传进去</span></div><div class="line">            xmlHttpReq.send(<span class="literal">null</span>);</div><div class="line">            </div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">RequestCallback</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (xmlHttpReq.readyState === <span class="number">4</span>) &#123; <span class="comment">// 请求加载完成（readyState值为4）</span></div><div class="line">                    <span class="keyword">if</span> (xmlHttpReq.status === <span class="number">200</span>) &#123; <span class="comment">// 响应成功（HTTP状态码为200）</span></div><div class="line">                        <span class="built_in">document</span>.getElementById(<span class="string">"id1"</span>).innerHTML = xmlHttpReq.responseText;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id1"</span> <span class="attr">class</span>=<span class="string">"divclass"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">onclick</span>=<span class="string">"ajax();"</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>同目录下的 <code>test-01.php</code> 文件：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">echo</span> <span class="string">"Hello, Ajax"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>点击send按钮，会有如下反应：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/learn-ajax.gif" alt=""></p>
<h2 id="同源策略与跨域请求问题"><a href="#同源策略与跨域请求问题" class="headerlink" title="同源策略与跨域请求问题"></a>同源策略与跨域请求问题</h2><h3 id="什么是同源与跨域？"><a href="#什么是同源与跨域？" class="headerlink" title="什么是同源与跨域？"></a>什么是同源与跨域？</h3><ul>
<li>同源：域名要相同（<code>www.example.com</code>和<code>example.com</code>不同），协议要相同（<code>http</code>和<code>https</code>不同），端口号要相同（<code>:80</code>端口和<code>:8088</code>不同）。</li>
<li>跨域：同源的反义词，一般有这几种情况。<ul>
<li>端口不同</li>
<li>协议不同</li>
<li>主域相同，子域不同（可通过插入<code>iframe</code> + 设置 <code>document.domain</code> 来解决）</li>
<li>主域不相同</li>
<li>还有一种情况，端口、协议均相同，但ip地址与域名两者之间也算跨域（哪怕二者是映射关系）</li>
</ul>
</li>
</ul>
<p>下面说一下 Ajax 的跨域请求问题。</p>
<p>浏览器出于安全考虑，会限制 JavaScript （即脚本层面）发起的跨域请求，这里做个示例：</p>
<ol>
<li><p>在硬盘任意位置新建一个文件夹（我的是 <code>9000/</code> ），在文件夹中新建一个php文件（例如 <code>index.php</code> ），内容如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="keyword">echo</span> <span class="string">'text in 127.0.0.1:9000'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在 <code>9000</code> 文件夹下打开命令行，输入如下命令（启动PHP自带的Web Server，后面跟网络地址及监听的端口号，默认的网站根目录为当前目录）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ php -S 127.0.0.1:9000</div><div class="line">PHP 5.6.30 Development Server started at Mon Sep 04 13:20:23 2017</div><div class="line">Listening on http://127.0.0.1:9000</div><div class="line">Document root is F:\...\9000</div><div class="line">Press Ctrl-C to quit.</div></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中访问 <code>http://127.0.0.1:9000/index.php</code> 或 <code>http://localhost:9000/index.php</code> 会得到如下内容：</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">text in 127.0.0.1:9000</div></pre></td></tr></table></figure>
</li>
<li><p>将之前 <code>learn-ajax-01.html</code> 中的 <code>xmlHttpReq.open(&quot;GET&quot;, &quot;test-01.php&quot;, true);</code> 修改为 <code>xmlHttpReq.open(&quot;GET&quot;, &quot;http://localhost:9000/index.php&quot;, true);</code> ，点击 Send 按钮无任何反应，打开 Chrome 开发者工具，发现如下错误：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/ajax-%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E8%A2%AB%E6%8B%92.png" alt=""></p>
<p>这就是跨域（<a href="http://localhost:80" target="_blank" rel="external">http://localhost:80</a> 与 <a href="http://localhost:9000" target="_blank" rel="external">http://localhost:9000</a> ，不同端口域）请求错误。</p>
</li>
</ol>
<p>值得一提的是，对跨域请求的限制是浏览器的行为，并非 JavaScript 本身的限制，不同浏览器限制策略可能有所不一。</p>
<p>一般来说，现代浏览器在平衡安全性和可用性的基础上，有所选择地为跨域请求开放后门。 例如 <code>img</code>  <code>script</code>  <code>style</code> 等标签，都允许跨域引用资源。但对 Ajax 等利用脚本进行不同域之间的数据通信技术来说，浏览器是坚决把同源策略执行到底的，如果不做任何处理直接发出跨域请求，将会报错。</p>
<p>要实现 Ajax 的跨域请求，有多种hack方法或者h5新标准引入的方法，但核心原则是：</p>
<blockquote>
<p>是否允许 Ajax 跨域请求的控制权在服务器端。</p>
</blockquote>
<p>即没有什么方法能绝对实现跨域请求，能否实现关键在于服务器端的控制。接下来要讲的几种跨域方法也大多需要服务器端的配合或环境条件支持。</p>
<p>一般实现 Ajax 跨域通信的方法主要有两类：</p>
<ol>
<li>Hack类：即通过具有<code>src</code>属性的HTML标签来传递消息，比较常见的有 JSONP 方法。</li>
<li>H5新标准：HTML5引入了跨域资源共享（CORS）的事实标准，还提供了 <code>window.postMessage()</code> 方法让窗口之间来交换信息。</li>
</ol>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>从上面的例子中可以看出，由于浏览器的限制，我们不能用 Ajax 来直接请求不同域上的数据。</p>
<p>然而，引入不同域上的 js 文件却是可以的，JSONP 正是利用这个特性来实现。</p>
<p><strong>JSONP</strong> 全称是 <strong>JSON with Padding</strong> ，它将返回的 JSON 数据包装成了以 JSON 数据为参数的回调函数。</p>
<p>为了介绍 JSONP，先将之前在 <code>9000</code> 文件夹下的 <code>index.php</code> 修改为：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $arr = <span class="keyword">array</span>(<span class="string">'name'</span> =&gt; <span class="string">'flintx'</span>, <span class="string">'age'</span> =&gt; <span class="string">'22'</span>, <span class="string">'text'</span> =&gt; <span class="string">'text in 127.0.0.1:9000'</span>);</div><div class="line">    <span class="keyword">echo</span> json_encode($arr);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>在浏览器访问 <a href="http://localhost:9000/index.php" target="_blank" rel="external">http://localhost:9000/index.php</a> ，返回的信息如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"name"</span>:<span class="string">"flintx"</span>,<span class="attr">"age"</span>:<span class="string">"22"</span>,<span class="attr">"text"</span>:<span class="string">"text in 127.0.0.1:9000"</span>&#125;</div></pre></td></tr></table></figure>
<p>如果我们修改 <code>index.php</code> ，将返回的 JSON 数据包装成了以 JSON 数据为参数的回调函数：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $callback = $_GET[<span class="string">'callback'</span>];</div><div class="line">    $arr = <span class="keyword">array</span>(<span class="string">'name'</span> =&gt; <span class="string">'flintx'</span>, <span class="string">'age'</span> =&gt; <span class="string">'22'</span>, <span class="string">'text'</span> =&gt; <span class="string">'text in 127.0.0.1:9000'</span>);</div><div class="line">    <span class="keyword">echo</span> $callback . <span class="string">"("</span> . json_encode($arr) . <span class="string">");"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>在浏览器访问 <a href="http://localhost:9000/index.php?callback=deal_data" target="_blank" rel="external">http://localhost:9000/index.php?callback=deal_data</a> ，返回的信息如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deal_data(&#123;"name":"flintx","age":"22","text":"text in 127.0.0.1:9000"&#125;);</div></pre></td></tr></table></figure>
<p>如果我们在之前的 <code>learn-ajax-01.html</code> 中增加一个 <code>script</code> 标签：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://localhost:9000/index.php?callback=deal_data"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>那么就相当于在另一个域中，执行了以返回的 JSON 数据为参数的回调函数 <code>deal_data({&quot;name&quot;:&quot;flintx&quot;,&quot;age&quot;:&quot;22&quot;,&quot;text&quot;:&quot;text in 127.0.0.1:9000&quot;});</code> </p>
<p>如果提前在 <code>learn-ajax-01.html</code> 中定义了 <code>deal_data(json_data)</code> 函数，就意味着完成了对跨域请求返回数据的调用。</p>
<p>这就是 JSONP 方式。</p>
<p>下面是完整的 demo：</p>
<ul>
<li>localhost 默认端口下的 <code>learn-ajax-01.html</code> </li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> url = <span class="string">"http://localhost:9000/index.php?callback=deal_data"</span>;</div><div class="line">            <span class="keyword">var</span> scriptDom = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">            scriptDom.src = url;</div><div class="line">            <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(scriptDom);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">deal_data</span>(<span class="params">json_data</span>) </span>&#123;</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"id1"</span>).innerHTML = <span class="string">"name: "</span> + json_data[<span class="string">"name"</span>] + </div><div class="line">                <span class="string">"; age: "</span> + json_data[<span class="string">"age"</span>] + </div><div class="line">                <span class="string">"; text: "</span> + json_data[<span class="string">"text"</span>];</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id1"</span> <span class="attr">class</span>=<span class="string">"divclass"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">onclick</span>=<span class="string">"jsonp();"</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>localhost 9000 端口下的 <code>index.php</code> </li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $callback = $_GET[<span class="string">'callback'</span>];</div><div class="line">    $arr = <span class="keyword">array</span>(<span class="string">'name'</span> =&gt; <span class="string">'flintx'</span>, <span class="string">'age'</span> =&gt; <span class="string">'22'</span>, <span class="string">'text'</span> =&gt; <span class="string">'text in 127.0.0.1:9000'</span>);</div><div class="line">    <span class="keyword">echo</span> $callback . <span class="string">"("</span> . json_encode($arr) . <span class="string">");"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/learn-ajax-jsonp.gif" alt=""></p>
<p>事实上，插入 <code>script</code> 标签与定义回调函数的操作是可以通过一些库中的方法来自动完成的，例如 jQuery 中的 <code>getJSON()</code> 方法，下面的代码执行效果和之前纯 js 的版本一致：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.staticfile.org/jquery/3.2.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $.getJSON(<span class="string">"http://localhost:9000/index.php?callback=?"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">json_data</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> innerHtml = <span class="string">"name: "</span> + json_data[<span class="string">"name"</span>] + </div><div class="line">                    <span class="string">"; age: "</span> + json_data[<span class="string">"age"</span>] + </div><div class="line">                    <span class="string">"; text: "</span> + json_data[<span class="string">"text"</span>];</div><div class="line">                $(<span class="string">"#id1"</span>).html(innerHtml);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>getJSON()</code> 方法会自动判断请求是否跨域，不跨域调用普通的 Ajax 方法；跨域则使用 JSONP 方法，临时生成一个回调函数名字来替代 <code>callback=?</code> 的 <code>?</code> 部分（一般是 <code>jQuery32107324169903315518_1504591602038</code> 之类的）。</p>
<p>除了 <code>$.getJSON()</code> 方法外，也可以直接用 <code>$.ajax()</code> 方法来完成 JSONP 请求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// $.getJSON("http://localhost:9000/index.php?callback=?", function(json_data) &#123;</span></div><div class="line">            <span class="comment">//     var innerHtml = "name: " + json_data["name"] + </span></div><div class="line">            <span class="comment">//         "; age: " + json_data["age"] + </span></div><div class="line">            <span class="comment">//         "; text: " + json_data["text"];</span></div><div class="line">            <span class="comment">//     $("#id1").html(innerHtml);</span></div><div class="line">            <span class="comment">// &#125;);</span></div><div class="line">  </div><div class="line">  			<span class="comment">// 与注释部分代码等价</span></div><div class="line">            $.ajax(&#123;</div><div class="line">                <span class="attr">type</span>: <span class="string">"GET"</span>, <span class="comment">// 请求方式</span></div><div class="line">                url: <span class="string">"http://localhost:9000/index.php"</span>,</div><div class="line">                <span class="attr">dataType</span>: <span class="string">"jsonp"</span>, <span class="comment">// 返回数据类型</span></div><div class="line">                crossDomain: <span class="literal">true</span>, <span class="comment">// 是否跨域</span></div><div class="line">                success: <span class="function"><span class="keyword">function</span>(<span class="params">json_data</span>) </span>&#123; <span class="comment">// 请求成功后的回调函数</span></div><div class="line">                    <span class="keyword">var</span> innerHtml = <span class="string">"name: "</span> + json_data[<span class="string">"name"</span>] + </div><div class="line">                        <span class="string">"; age: "</span> + json_data[<span class="string">"age"</span>] + </div><div class="line">                        <span class="string">"; text: "</span> + json_data[<span class="string">"text"</span>];</div><div class="line">                    $(<span class="string">"#id1"</span>).html(innerHtml);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>JSONP 是一种很巧妙的跨域请求方式，但和所有依赖于创建HTML标签的方式一样，JSONP只支持GET请求。即使用 <code>$.ajax()</code> 方法将 <code>type</code> 设置为其他请求方式，只要 <code>dataType</code> 是 <code>jsonp</code> ，还是会换回来。</p>
<p>而GET的数据是放在URL里的。 虽然 <a href="https://www.w3.org/Protocols/rfc2616/rfc2616.html" target="_blank" rel="external">RFC 2616</a> 没有提到限制到多少， 但提到了服务器可以对自己认为比较长的URL返回414状态码。一般来讲URL限长是在2000字符左右。所以JSONP方式对跨域请求较大数据比较无力。</p>
<h3 id="CROS"><a href="#CROS" class="headerlink" title="CROS"></a>CROS</h3><p>CROS 是 HTML5 引入的新标准，关于它的介绍我直接引用 <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">阮一峰老师的文章</a> : </p>
<blockquote>
<p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p>
<p>它允许浏览器向跨源服务器，发出<a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="external"><code>XMLHttpRequest</code></a>请求，从而克服了AJAX只能<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="external">同源</a>使用的限制。</p>
<p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>
<p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>
</blockquote>
<p>CORS 支持所有类型的 HTTP 请求，是跨域请求的王道方式。</p>
<p>一个Demo：</p>
<p>修改 9000 端口下的 <code>index.php</code> 文件为：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  	<span class="comment">// 必要字段。值为请求时Origin字段的值，或者是一个*，表示接受任意域名的请求。</span></div><div class="line">    header(<span class="string">'Access-Control-Allow-Origin: *'</span>); </div><div class="line">	<span class="comment">// 必要字段。值为逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。</span></div><div class="line">    header(<span class="string">'Access-Control-Allow-Methods: GET, POST'</span>);</div><div class="line">	<span class="comment">// 可选字段。值为本次预检请求的有效期，单位为秒。</span></div><div class="line">    header(<span class="string">'Access-Control-Max-Age: 1000'</span>);</div><div class="line"></div><div class="line">    $arr = <span class="keyword">array</span>(<span class="string">'name'</span> =&gt; <span class="string">'flintx'</span>, <span class="string">'age'</span> =&gt; <span class="string">'22'</span>, <span class="string">'text'</span> =&gt; <span class="string">'text in 127.0.0.1:9000'</span>);</div><div class="line">    <span class="keyword">echo</span> json_encode($arr);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>然后 80 端口下的 <code>learn-ajax-01.html</code> 文件用普通 Ajax 请求 9000 端口下的 <code>index.php</code> : </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.staticfile.org/jquery/3.2.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $.ajax(&#123;</div><div class="line">                <span class="attr">type</span>: <span class="string">"GET"</span>, <span class="comment">// 请求方式</span></div><div class="line">                url: <span class="string">"http://localhost:9000/index.php"</span>,</div><div class="line">                <span class="attr">dataType</span>: <span class="string">"json"</span>, <span class="comment">// 返回数据类型</span></div><div class="line">                crossDomain: <span class="literal">true</span>, <span class="comment">// 是否跨域</span></div><div class="line">                success: <span class="function"><span class="keyword">function</span>(<span class="params">json_data</span>) </span>&#123; <span class="comment">// 请求成功后的回调函数</span></div><div class="line">                    <span class="keyword">var</span> innerHtml = <span class="string">"name: "</span> + json_data[<span class="string">"name"</span>] + </div><div class="line">                        <span class="string">"; age: "</span> + json_data[<span class="string">"age"</span>] + </div><div class="line">                        <span class="string">"; text: "</span> + json_data[<span class="string">"text"</span>];</div><div class="line">                    $(<span class="string">"#id1"</span>).html(innerHtml);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>请求成功：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/ajax-cors%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E6%88%90%E5%8A%9F.png" alt=""></p>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ul>
<li><a href="http://www.cnblogs.com/alsy/p/5470772.html" target="_blank" rel="external">iframe + window.domain 实现跨子域请求</a></li>
<li>利用 window 实现跨域请求：<ul>
<li><a href="http://www.cnblogs.com/alsy/p/5470772.html" target="_blank" rel="external">iframe + window.name</a></li>
<li><a href="http://www.cnblogs.com/alsy/p/5470772.html" target="_blank" rel="external">iframe + window.postMessage</a> （html5新API）</li>
</ul>
</li>
</ul>
<h2 id="jQuery-中的-Ajax"><a href="#jQuery-中的-Ajax" class="headerlink" title="jQuery 中的 Ajax"></a>jQuery 中的 Ajax</h2><p>jQuery 对 Ajax 操作进行了封装，根据封装的程度可以将 jQuery 中的 Ajax 方法分为三个层次，分别是：</p>
<ul>
<li><p>第一层：<code>$.ajax()</code> </p>
<p><code>$.ajax(options)</code>  是 jQuery 中最底层的 Ajax 方法实现，参数是一个由 key-value 构成的 Object，参数详情见 <a href="http://www.css88.com/jqapi-1.9/jQuery.ajax/" target="_blank" rel="external">jQuery.ajax()</a> .</p>
</li>
<li><p>第二层：<code>$.get()</code> , <code>$.post()</code> , <code>load()</code> </p>
<p>这三个方法是最为常用的方法。</p>
</li>
<li><p>第三层：<code>$.getScript()</code> , <code>$.getJSON()</code> </p>
</li>
</ul>
<h3 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h3><p>先编写一个 <code>learn-ajax-02.html</code> ：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container1"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>Load<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.staticfile.org/jquery/3.2.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $(<span class="string">"#container1"</span>).load(<span class="string">"content.html"</span>);</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以及用于加载的同目录下的 <code>content.html</code> ：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>王麻子<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>执行效果：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/jQuery.load.gif" alt=""></p>
<p>事实上，还可以为参数 url 指定选择器，以加载指定的 html 内容，url 选择器格式为 <code>url selector</code> 。</p>
<p>修改 <code>learn-ajax-02.html</code> 与 <code>content.html</code> ：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container1"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>Load div1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>Load id-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn3"</span>&gt;</span>Load divx<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn4"</span>&gt;</span>Load all<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.staticfile.org/jquery/3.2.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $(<span class="string">"#container1"</span>).load(<span class="string">"content.html .div1"</span>);</div><div class="line">        &#125;);</div><div class="line">        $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $(<span class="string">"#container1"</span>).load(<span class="string">"content.html #id-1"</span>);</div><div class="line">        &#125;);</div><div class="line">        $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $(<span class="string">"#container1"</span>).load(<span class="string">"content.html [class^=div]"</span>);</div><div class="line">        &#125;);</div><div class="line">        $(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $(<span class="string">"#container1"</span>).load(<span class="string">"content.html"</span>);</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>class=div1的张三<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>class=div2的李四<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>class=div3的王麻子<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id-1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>id=id-1的结衣酱<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>执行效果：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/jQuery.load_2.gif" alt=""></p>
<p><code>load()</code> 方法中，如果没有要发送的 data 数据（即第二个参数不是 data），则以 GET 方式来发出请求，反之则以 POST 来发出请求，即：</p>
<ul>
<li><code>load(url, function(){...});</code> =&gt; GET 方式</li>
<li><code>load(url, {key1:value1, key2:value2, ...}, function(){...});</code> =&gt; POST 方式</li>
</ul>
<p>其中 function(){…} 是回调函数，无论 Ajax 请求是否 <strong>成功</strong>， 只要请求<strong>完成</strong>，均会执行。</p>
<h3 id="get-和-post"><a href="#get-和-post" class="headerlink" title="get() 和 post()"></a>get() 和 post()</h3><p><code>load()</code> 方法一般用于加载静态资源，如果与服务器有数据交互，最好还是使用 <code>$.get()</code> 或 <code>$.post()</code> 方法。</p>
<p>两个方法的参数均有4个：</p>
<ul>
<li><p>url，请求的url；</p>
</li>
<li><p>data（可选），发送至服务器的 key-value 数据，GET 方式以拼接字符串的方式构造查询 url，POST 方式以消息内容实体的方式来发送 data；</p>
</li>
<li><p>callback（可选），回调函数，只有当请求成功时才执行；如果要分别执行请求成功、请求失败、请求完成等情景下不同的回调函数，可使用 <code>jqXHR.success()</code>, <code>jqXHR.error()</code> 和 <code>jqXHR.complete()</code> （jQuery 1.5 ~ 1.8，3.0后已删除）或 <code>jqXHR.done()</code> （表示成功）, <code>jqXHR.fail()</code> （表示错误）和 <code>jqXHR.always()</code> （jQuery 1.6+）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$.get(<span class="string">"example.php"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">"success"</span>);</div><div class="line">&#125;).success(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// .done()</span></div><div class="line">    alert(<span class="string">"second success"</span>);</div><div class="line">&#125;).error(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// .fail()</span></div><div class="line">    alert(<span class="string">"error"</span>);</div><div class="line">&#125;).complete(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// .always()</span></div><div class="line">    alert(<span class="string">"complete"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>type（可选），返回的数据内容格式，包括 <code>xml</code> , <code>html</code> , <code>json</code> , <code>script</code> , <code>text</code> , …</p>
</li>
</ul>
<p>demo: <code>learn-ajax-03.html</code> + <code>test.php</code> </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"form1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Comment<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nickname: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"get"</span> <span class="attr">value</span>=<span class="string">"Send by GET"</span>&gt;</span> &amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp</div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"post"</span> <span class="attr">value</span>=<span class="string">"Send by POST"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"comment"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.staticfile.org/jquery/3.2.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        </div><div class="line">        $(<span class="string">"#get"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log($(<span class="string">"#name"</span>).val());</div><div class="line">            $.get(<span class="string">"test.php"</span>, &#123;</div><div class="line">                <span class="attr">name</span> : $(<span class="string">"#name"</span>).val(),</div><div class="line">                <span class="attr">content</span> : $(<span class="string">"#content"</span>).val(),</div><div class="line">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                $(<span class="string">"#comment"</span>).append(<span class="string">"&lt;p&gt;"</span> + data.name + <span class="string">" says: "</span> + data.content + <span class="string">"&lt;/p&gt;"</span>);</div><div class="line">            &#125;, <span class="string">"json"</span>);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        $(<span class="string">"#post"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            $.post(<span class="string">"test.php"</span>, &#123;</div><div class="line">                <span class="attr">name</span> : $(<span class="string">"#name"</span>).val(),</div><div class="line">                <span class="attr">content</span> : $(<span class="string">"#content"</span>).val(),</div><div class="line">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                $(<span class="string">"#comment"</span>).append(<span class="string">"&lt;p&gt;"</span> + data.name + <span class="string">" says: "</span> + data.content + <span class="string">"&lt;/p&gt;"</span>);</div><div class="line">            &#125;, <span class="string">"json"</span>);</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $name = $_GET[<span class="string">'name'</span>]? $_GET[<span class="string">'name'</span>] : $_POST[<span class="string">'name'</span>];</div><div class="line">    $content = $_GET[<span class="string">'content'</span>]? $_GET[<span class="string">'content'</span>] : $_POST[<span class="string">'content'</span>];</div><div class="line">    $arr = <span class="keyword">array</span>(<span class="string">'name'</span> =&gt; $name, <span class="string">'content'</span> =&gt; $content . <span class="string">" by "</span> . $_SERVER[<span class="string">'REQUEST_METHOD'</span>]);</div><div class="line">    <span class="keyword">echo</span> json_encode($arr);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/jQuery.getpost.gif" alt=""></p>
<h3 id="其他方法-1"><a href="#其他方法-1" class="headerlink" title="其他方法"></a>其他方法</h3><p>看 <a href="http://www.css88.com/jqapi-1.9/category/ajax/" target="_blank" rel="external">文档</a> 吧 : )</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2018京东校招题 求幂]]></title>
      <url>https://flintx.github.io/2017/09/17/2018jd-pow/</url>
      <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定 $n$ ，求有多少个四元组 $a,b,c,d$ 满足 $a^b = c^d,1 \leq a,b,c,d \leq n, n \leq 10^5$</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>$a^b = c^d$ 等式成立分两种情况：</p>
<ul>
<li>$a^b = a^b$ ，即自身等于自身；</li>
<li>$(i^x)^c = (i^y)^d,xc=yd\leq n$ .</li>
</ul>
<p>关于第一种情况，显然存在 $n^2$ 个这样的等式，因为 $a, b$ 均有 $n$ 种情况。</p>
<p>关于第二种情况，可以先枚举 $(x,y)$ 二元组，当 $(x,y)$ 确定时，二元组 $(c,d)$ 的就只有</p>
<p> <script type="math/tex">\frac{2*n}{\max(x,y)/\gcd(x,y)}</script> 种可能情况。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> b == <span class="number">0</span>? a : gcd(b, a % b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">        <span class="keyword">int</span> sqn = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n + <span class="number">0.5</span>);</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = (<span class="number">1L</span>L * n * (<span class="number">2</span> * n - <span class="number">1</span>)) % MOD;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= sqn; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (s.find(i) != s.end()) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">            <span class="keyword">long</span> <span class="keyword">long</span> tmp = i;</div><div class="line">            <span class="keyword">while</span> (tmp &lt;= n) &#123;</div><div class="line">                s.insert(tmp);</div><div class="line">                tmp *= i;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= cnt; x++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> y = x + <span class="number">1</span>; y &lt;= cnt; y++) &#123;</div><div class="line">                    ans += (n / (y / gcd(x, y))) * <span class="number">2L</span>L;</div><div class="line">                    ans %= MOD;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ans % MOD &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有一些题有时间可以看下：</p>
<ul>
<li>招商银行的<a href="https://www.nowcoder.com/discuss/43597?type=0&amp;order=0&amp;pos=16&amp;page=0" target="_blank" rel="external">博弈题</a>，数据很弱，但是正解不好找啊。</li>
<li><a href="https://www.nowcoder.com/test/6910869/summary" target="_blank" rel="external">网易</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自动化测试工具 Selenium Python 使用浅析]]></title>
      <url>https://flintx.github.io/2017/08/29/selenium-python-spider/</url>
      <content type="html"><![CDATA[<p>前不久做的项目里有个很坑的事，项目要求通过远程摄像头来实时获取景区的客流量信息，一开始是用海康威视提供的SDK在做，孰料用SDK提供的远程登陆接口始终登陆不上去，错误代码为访问超时。不仅如此，尝试了所有海康提供的所有demo与官方工具iVMS-4200，又关闭了防火墙，这个问题依然无解。</p>
<p>但奇怪的是，浏览器可以访问摄像头远程管理页面，通过tcping工具也能ping通。万般无奈之下，只好用爬虫访问远程管理页来抓取实时客流信息。</p>
<p>在写爬虫的过程中接触了三个比较有趣的东西：用于自动化测试的selenium、用于读取配置文件的configParser、和Windows定时任务。这两天相对有时间，准备把学习过程中的一些东西记录下来。</p>
<p>这篇文章主要讲selenium。</p>
<a id="more"></a>
<p>Selenium是一个用来做自动化测试的工具，支持包括 Chrome，Safari，Firefox 等主流浏览器，并且能用包括Java、C#、Python、Ruby、PHP、Perl、JavaScript等多种语言进行开发。这里我们选取Python与Chrome来进行下一步的学习。</p>
<p>Selenium能够模拟人工的多种操作，例如点击事件、回车键触发、文本输入、表单填充、复选框切换等。利用Selenium可以将较为复杂琐碎的手动操作实现自动化。</p>
<p>Selenium官网的使用手册：<a href="http://selenium-python.readthedocs.io/" target="_blank" rel="external">Selenium with Python</a> </p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol>
<li><p>安装selenium，可以通过pip或下载<a href="https://pypi.python.org/pypi/selenium" target="_blank" rel="external">源码</a>来安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># pip 方法</div><div class="line">pip install selenium</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 源码安装</div><div class="line">python setup.py install</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>下载浏览器驱动。selenium需要安装相应的driver来驱动真实浏览器，常见浏览器的driver下载地址如下，Chrome driver版本与内核版本对应关系参考<a href="http://blog.csdn.net/cz9025/article/details/70160273" target="_blank" rel="external">这里</a>，下载后将其解压到PATH变量中的路径即可。（Linux放置在 <code>/usr/bin</code> 或 <code>/usr/local/bin/</code> 下）</p>
</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>Chrome</strong>:</th>
<th><a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="external">google官方的</a>，<a href="http://npm.taobao.org/mirrors/chromedriver" target="_blank" rel="external">淘宝npm的</a></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Edge</strong>:</td>
<td><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/" target="_blank" rel="external">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></td>
</tr>
<tr>
<td><strong>Firefox</strong>:</td>
<td><a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="external">https://github.com/mozilla/geckodriver/releases</a></td>
</tr>
<tr>
<td><strong>Safari</strong>:</td>
<td><a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/" target="_blank" rel="external">https://webkit.org/blog/6900/webdriver-support-in-safari-10/</a></td>
</tr>
</tbody>
</table>
</div>
<ol>
<li><p>使用测试</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="comment"># browser = webdriver.Chrome(chrome_driver_path) 通过参数来指定driver地址也可以</span></div><div class="line">browser = webdriver.Chrome() </div><div class="line">browser.get(<span class="string">"http://www.baidu.com/"</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用浅析"><a href="#使用浅析" class="headerlink" title="使用浅析"></a>使用浅析</h2><h3 id="find-查找页面元素"><a href="#find-查找页面元素" class="headerlink" title="find-查找页面元素"></a>find-查找页面元素</h3><p>selenium提供了多种多样的查询元素的方式，而这些方式均有 <code>find_element_by_xxx()</code> 与 <code>find_elements_by_xxx()</code> 两个版本 ：</p>
<ul>
<li><code>find_element_by_id()</code> /  <code>find_elements_by_id()</code> : 根据元素id来查找指定元素  </li>
<li><code>find_element_by_name()</code> /  <code>find_elements_by_name()</code> : 根据元素name来查找指定元素  </li>
<li><code>find_element_by_class_name()</code> /  <code>find_elements_by_class_name()</code> : 根据元素类名来查找指定元素  </li>
<li><code>find_element_by_tag_name()</code> /  <code>find_elements_by_tag_name()</code> : 根据标签名来查找指定元素  </li>
<li><code>find_element_by_link_text()</code> /  <code>find_elements_by_link_text()</code> : 根据链接文本来查找指定元素  </li>
<li><code>find_element_by_partial_link_text()</code> /  <code>find_elements_by_partial_link_text()</code> : 根据部分链接文本来查找指定元素  </li>
<li><code>find_element_by_xpath()</code> /  <code>find_elements_by_xpath()</code> : 根据xpath来查找指定元素，关于xpath的资料可参考：<a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp" target="_blank" rel="external">XPath 语法</a></li>
<li><code>find_element_by_css_selector()</code> / <code>find_elements_by_css_selector()</code> : 查找CSS 选择器来查找元素</li>
</ul>
<p>一个元素的xpath或css selector，可以使用开发者工具来获取：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E7%9A%84xpath%E4%B8%8Eselector.png" alt=""></p>
<p>使用参考：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_selenium</span><span class="params">()</span>:</span></div><div class="line">    browser = webdriver.Chrome()</div><div class="line">    browser.get(<span class="string">"http://www.baidu.com"</span>)</div><div class="line"></div><div class="line">    <span class="comment"># by id, 等价于 elem_qrcode_img = browser.find_element(By.CLASS_NAME, "qrcode-img")</span></div><div class="line">    elem_img_qrcode = browser.find_element_by_class_name(<span class="string">"qrcode-img"</span>)</div><div class="line">    print(elem_img_qrcode.size)</div><div class="line"></div><div class="line">    <span class="comment"># by name, 等价于 elem_news_a = browser.find_element(By.NAME, "tj_trnews")</span></div><div class="line">    elem_a_news = browser.find_element_by_name(<span class="string">"tj_trnews"</span>)</div><div class="line">    print(elem_a_news.text)</div><div class="line"></div><div class="line">    <span class="comment"># by class name, 等价于 elem_qrcode_img = browser.find_element(By.ID, "su")</span></div><div class="line">    elem_baidu_button = browser.find_element_by_id(<span class="string">"su"</span>)</div><div class="line"></div><div class="line">    <span class="comment"># by tag name, 等价于 elem_p = browser.find_elements(By.TAG_NAME, "p")</span></div><div class="line">    elem_p_list = browser.find_elements_by_tag_name(<span class="string">"p"</span>)</div><div class="line">    elem_p_text_list = list(map(<span class="keyword">lambda</span> x: x.text, elem_p_list))</div><div class="line">    print(elem_p_text_list)</div><div class="line"></div><div class="line">    <span class="comment"># 通过链接文本内容, 等价于 elem_tieba_a = browser.find_element(By.LINK_TEXT, "贴吧")</span></div><div class="line">    elem_a_tieba = browser.find_element_by_link_text(<span class="string">"贴吧"</span>)</div><div class="line">    print(elem_a_tieba.get_property(<span class="string">"href"</span>))</div><div class="line"></div><div class="line">    <span class="comment"># 通过部分链接文本内容, 等价于 elem_hao123_a = browser.find_element(By.PARTIAL_LINK_TEXT, "hao")</span></div><div class="line">    elem_a_hao123 = browser.find_element_by_partial_link_text(<span class="string">"hao"</span>)</div><div class="line">    print(elem_a_hao123.text + <span class="string">": "</span> + elem_a_hao123.get_property(<span class="string">"href"</span>))</div><div class="line"></div><div class="line">    <span class="comment"># by XPath or CSS Selector</span></div><div class="line">    elem_input_kw = browser.find_element_by_xpath(<span class="string">"//*[@id='kw']"</span>)</div><div class="line">    elem_input_kw = browser.find_element_by_css_selector(<span class="string">"#kw"</span>)</div><div class="line">    elem_input_kw.send_keys(<span class="string">"bilibili"</span>)</div><div class="line">    elem_baidu_button.click()</div><div class="line"></div><div class="line">    browser.close() <span class="comment"># 关闭tab</span></div><div class="line">    browser.quit() <span class="comment"># 退出浏览器</span></div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    test_selenium()</div></pre></td></tr></table></figure>
<h3 id="get-获取页面信息"><a href="#get-获取页面信息" class="headerlink" title="get-获取页面信息"></a>get-获取页面信息</h3><p>页面信息可以通过浏览器 driver 对象与元素 element 对象来获取。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">driver = webdriver.Chrome()</div><div class="line">element = driver.find_element(By.xxx, <span class="string">"xxx"</span>)</div></pre></td></tr></table></figure>
<h4 id="WebElement"><a href="#WebElement" class="headerlink" title="WebElement"></a>WebElement</h4><ul>
<li><p><code>WebElement.id</code> : 获取当前元素的ID </p>
</li>
<li><p><code>WebElement.text</code> : 获取当前元素的内容</p>
</li>
<li><p><code>WebElement.tag_name</code> : 获取当前元素标签名 </p>
</li>
<li><p><code>WebElement.get_attribute(name)</code> : 获得当前元素特性值 </p>
</li>
<li><p><code>WebElement.get_property(name)</code> : 获得当前元素属性值，关于 attribute 与 property 的区别可参考：<a href="http://joji.me/zh-cn/blog/html-attribute-vs-dom-property" target="_blank" rel="external">详解JavaScript中attribute和property的区别以及最佳实践</a> ，在js中推荐使用 property 方法，但由于 selenium 库中 <code>get_attribute()</code> 方法中首先是执行 <code>get_property()</code> 方法，若 property 不存在则寻找 attribute ， <code>get_attribute()</code> 方法源码注释为：</p>
<blockquote>
<p>This method will first try to return the value of a property with the<br>given name. If a property with that name doesn’t exist, it returns the<br>value of the attribute with the same name. If there’s no attribute with<br>that name, <code>None</code> is returned.</p>
<p>Values which are considered truthy, that is equals “true” or “false”,<br>are returned as booleans.  All other non-<code>None</code> values are returned<br>as strings.  For attributes or properties which do not exist, <code>None</code><br>is returned.</p>
</blockquote>
<p>所以这里推荐使用 <code>get_attribute()</code> 方法。</p>
</li>
<li><p><code>WebElement.is_displayed()</code> : 判断当前元素是否可见 </p>
</li>
<li><p><code>WebElement.is_enabled()</code> : 判断当前元素是否被启用 </p>
</li>
<li><p><code>WebElement.is_selected()</code> : 判断当前元素是否被选中 </p>
</li>
<li><p><code>WebElement.size</code> : 获取当前元素尺寸 </p>
</li>
<li><p><code>WebElement.location</code> : 获取当前元素坐标，可以通过 <code>WebElement.rect</code> 来同时获取 <code>size</code> 与 <code>location</code> </p>
</li>
</ul>
<h4 id="WebDriver"><a href="#WebDriver" class="headerlink" title="WebDriver"></a>WebDriver</h4><ul>
<li><code>WebDriver.current_url</code> : 获取当前链接 </li>
<li><code>WebDriver.title</code> : 获取当前标题 </li>
<li><code>WebDriver.page_source</code> : 获取页面源码</li>
</ul>
<h3 id="operation-页面操作"><a href="#operation-页面操作" class="headerlink" title="operation-页面操作"></a>operation-页面操作</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul>
<li><code>.clear()</code> : 清除可编辑元素的内容 </li>
<li><code>.send_keys(txt)</code> : 在可编辑元素元素上模拟按键输入 </li>
<li><code>.submit()</code> : 提交表单,要求提交对象是一个表单</li>
</ul>
<p>以上三个操作只能用于可编辑的元素或表单。</p>
<ul>
<li><code>.click()</code> : 单击元素，可用于任何可以点击的元素 </li>
</ul>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">driver = webdriver.Chrome()</div><div class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</div><div class="line">elem_input_kw = driver.find_element_by_id(<span class="string">"kw"</span>)</div><div class="line">elem_input_kw.send_keys(<span class="string">"bilibili"</span>)</div><div class="line"><span class="comment"># 三种方法是同一效果</span></div><div class="line"><span class="comment"># 1.</span></div><div class="line"><span class="comment"># elem_input_kw.send_keys(Keys.RETURN)</span></div><div class="line"><span class="comment"># 2.</span></div><div class="line"><span class="comment"># elem_input_kw.submit()</span></div><div class="line"><span class="comment"># 3.</span></div><div class="line">driver.find_element_by_id(<span class="string">"su"</span>).click()</div><div class="line"></div><div class="line">time.sleep(<span class="number">3</span>)</div><div class="line">driver.save_screenshot(<span class="string">"E:\\screen1.png"</span>)</div><div class="line">elem_input_kw = driver.find_element_by_id(<span class="string">"kw"</span>)</div><div class="line">elem_input_kw.clear()</div><div class="line">driver.save_screenshot(<span class="string">"E:\\screen2.png"</span>)</div></pre></td></tr></table></figure>
<h4 id="等待操作"><a href="#等待操作" class="headerlink" title="等待操作"></a>等待操作</h4><p>由于目前大部分网页都不是纯静态的，都用到了大量Ajax这一类的异步动态加载技术，所以可能由于受限于网络速率、稳定性等问题，导致找不到需要的 WebElement（实际上是未加载完毕）。selenium为我们提供了两种等待页面加载的操作方法：显式（Explicit）等待与隐式（Implicit）等待。</p>
<h5 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h5><p>所谓显式等待，就是指预先定义好等待条件，待条件满足后再开始执行。</p>
<p>看一段代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</div><div class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</div><div class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</div><div class="line"></div><div class="line">driver = webdriver.Chrome()</div><div class="line">driver.get(<span class="string">"http://somedomain/url_that_delays_loading"</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    element_existed = WebDriverWait(driver, <span class="number">10</span>).until(</div><div class="line">        EC.presence_of_element_located((By.ID, <span class="string">"myDynamicElement"</span>))</div><div class="line">    )</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    driver.quit()</div></pre></td></tr></table></figure>
<p>这段代码中，我们实例化了一个等待类 WebDriverWait，并传入了两个参数：当前浏览器 driver 与等待时间 10 （秒）。然后调用 until 方法，方法参数为等待条件，即id=”myDynamicElement”的元素是否存在。运行这个 <code>until</code> 方法，方法将会在满足等待条件后返回一个True，否则当等待时间到将抛出 <code>TimeoutException</code> 异常。</p>
<p>同理，有 <code>until</code> 方法，也有 <code>until_not</code> 方法。这两个方法的参数包括：</p>
<ul>
<li><code>timeout</code> : 等待时间，单位为秒</li>
<li><code>poll_frequency</code> : 调用判定等待条件方法的时间间隔，单位为秒，默认为0.5s</li>
<li><code>ignored_exceptions</code> : 忽略的异常，如果在调用until或until_not的过程中抛出这个元组中的异常，则不中断代码，继续等待，如果抛出的是这个元组外的异常，则中断代码，抛出异常。默认只有NoSuchElementException。</li>
</ul>
<p>而 selenium 的 expected_conditions 模块为我们提供了一系列构造等待条件的方法，其中包括：</p>
<ul>
<li><code>title_is</code> : 验证 driver 的 title 是否与传入的 title 一致 </li>
<li><code>title_contains</code> : 验证 driver 的 title 中是否包含传入的 title</li>
<li><code>presence_of_element_located</code> : 验证页面中是否存在传入的元素，传入元素的格式是 locator 元组，如 <code>(By.ID, &quot;id1&quot;)</code></li>
<li><code>visibility_of_element_located</code> : 验证页面中传入的元素（ <code>locator</code> 元组格式 ）是否可见，这里的可见不仅仅是 <code>display</code> 属性非 <code>None</code> ，还意味着宽高均大于0</li>
<li><code>visibility_of</code> : 验证页面中传入的元素（ <code>WebElement</code> 格式 ）是否可见。</li>
<li><code>presence_of_all_elements_located</code> : 验证页面中是否存在传入的所有元素，传入元素的格式是 locator 元组构成的 list，如 <code>[(By.ID, &quot;id1&quot;), (By.NAME, &quot;name1&quot;)</code></li>
<li><code>text_to_be_present_in_element</code> : 验证在指定页面元素的text中是否包含传入的文本</li>
<li><code>text_to_be_present_in_element_value</code> :  验证在指定页面元素的value中是否包含传入的文本</li>
<li><code>frame_to_be_available_and_switch_to_it</code> : 验证frame是否可切入，传入 locator 元组 或 WebElement</li>
<li><code>invisibility_of_element_located</code> : 验证页面中传入的元素（ <code>locator</code> 元组格式 ）是否可见</li>
<li><code>element_to_be_clickable</code> : 验证页面中传入的元素（ <code>WebElement</code> 格式 ）是否可见。</li>
<li><code>staleness_of</code> : 判断传入元素（<code>WebElement</code> 格式）是否仍在DOM中</li>
<li><code>element_to_be_selected</code> : 判断传入元素（<code>WebElement</code> 格式）是否被选中</li>
<li><code>element_located_to_be_selected</code> : 判断传入元素（<code>locator</code> 元组格式）是否被选中</li>
<li><code>element_selection_state_to_be</code> : 验证传入的可选择元素（<code>WebElement</code> 格式）是否处于某传入状态</li>
<li><code>element_located_selection_state_to_be</code> : 验证传入的可选择元素（<code>WebElement</code> 格式）是否处于某传入状态</li>
<li><code>alert_is_present</code> : 验证是否有 <code>alert</code> 出现。</li>
</ul>
<p>更多API可参考<a href="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions" target="_blank" rel="external">官方文档</a></p>
<h5 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h5><p>所谓隐式等待，就是 <code>time.sleep(seconds)</code> 。不过selenium还是为其提供了标准方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">driver = webdriver.Firefox()</div><div class="line">driver.implicitly_wait(<span class="number">10</span>) <span class="comment"># seconds</span></div><div class="line">driver.get(<span class="string">"http://somedomain/url_that_delays_loading"</span>)</div><div class="line">myDynamicElement = driver.find_element_by_id(<span class="string">"myDynamicElement"</span>)</div></pre></td></tr></table></figure>
<h4 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h4><p><a href="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains" target="_blank" rel="external">ActionChains</a></p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</div><div class="line"></div><div class="line">element = driver.find_element_by_name(<span class="string">"source"</span>)</div><div class="line">target = driver.find_element_by_name(<span class="string">"target"</span>)</div><div class="line">action_chains = ActionChains(driver)</div><div class="line">action_chains.drag_and_drop(element, target).perform()</div></pre></td></tr></table></figure>
<h4 id="键盘-表单操作"><a href="#键盘-表单操作" class="headerlink" title="键盘/表单操作"></a>键盘/表单操作</h4><p><a href="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.keys" target="_blank" rel="external">Keys</a></p>
<p><a href="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.select" target="_blank" rel="external">Select</a></p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</div><div class="line">select = Select(driver.find_element_by_id(<span class="string">'my_id'</span>))</div><div class="line">select.select_by_index(index) <span class="comment"># 根据索引值</span></div><div class="line">select.select_by_visible_text(<span class="string">"text"</span>) <span class="comment"># 根据选项文本</span></div><div class="line">select.select_by_value(value) <span class="comment"># 根据选项值</span></div><div class="line"></div><div class="line">select.deselect_all() <span class="comment"># 全部取消选择/重置</span></div><div class="line"></div><div class="line">all_selected_options = select.all_selected_options <span class="comment"># 获取所有已选项</span></div><div class="line">options = select.options <span class="comment"># 获取所有可选项</span></div></pre></td></tr></table></figure>
<h4 id="窗口-切换操作"><a href="#窗口-切换操作" class="headerlink" title="窗口/切换操作"></a>窗口/切换操作</h4><ul>
<li><code>driver.switch_to_window(window_name)</code> :  切换到指定的window，window_name 可以通过 <code>driver.window_handles</code> 来获取：</li>
</ul>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line">driver = webdriver.Chrome()</div><div class="line">driver.get(<span class="string">'http://www.baidu.com'</span>)</div><div class="line">js = <span class="string">"window.open('http://flintx.me')"</span></div><div class="line">driver.execute_script(js)</div><div class="line">driver.switch_to_window(driver.window_handles[<span class="number">0</span>])</div></pre></td></tr></table></figure>
<p>  ​</p>
<ul>
<li><p><code>driver.switch_to_frame(frame_name)</code> :  切换到指定的frame</p>
</li>
<li><p><code>driver.switch_to_alert()</code> : 切换到当前弹出的alert</p>
</li>
<li><p><code>driver.forward()</code> : 前进</p>
</li>
<li><p><code>driver.back()</code> : 后退</p>
</li>
<li><p><code>driver.maximize_window()</code> : 窗口最大化</p>
<p>​</p>
</li>
</ul>
<h4 id="Cookies处理"><a href="#Cookies处理" class="headerlink" title="Cookies处理"></a>Cookies处理</h4><ul>
<li>添加 Cookies : <code>add_cookie(cookie_dict)</code></li>
<li>获取 Cookies : <code>get_cookie(name)</code> / <code>get_cookies()</code></li>
<li>删除 Cookies : <code>delete_cookie(name)</code> / <code>delete_all_cookies()</code></li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://blog.leanote.com/post/dapingxia@163.com/Python%E7%88%AC%E8%99%AB%E5%88%A9%E5%99%A85%E4%B9%8BSelenium%E7%9A%84%E4%BD%BF%E7%94%A8" target="_blank" rel="external">Python爬虫利器5之Selenium的使用</a></li>
<li><a href="http://selenium-python.readthedocs.io/" target="_blank" rel="external">Selenium with Python</a> </li>
<li><a href="http://www.cnblogs.com/Albert-Lee/p/6238866.html" target="_blank" rel="external">Python爬虫小白入门（四）PhatomJS+Selenium第一篇 - 阿里波特 - 博客园</a></li>
</ul>
<p>由衷感谢这些资料的撰写者与提供者！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[争分夺秒学技术]]></title>
      <url>https://flintx.github.io/2017/07/29/save-time-to-learn/</url>
      <content type="html"><![CDATA[<p>7月份，每天40度的高温下，我历经了毕业以来的最身心俱疲的辛苦：令人惶惶的项目需求，无一秒闲暇的加班加点，知识匮乏与能力不足带来的不甘。</p>
<p>有感于未来生活也不会那么容易，我必须快速地成长起来，去汲取各种知识。同时经营好身体，目前还是太瘦了。</p>
<p>研究生的计划目前只有这么一个：争分夺秒学习技术，早睡早起好好吃饭。</p>
<a id="more"></a>
<p>目前有要学习的一些东西。</p>
<h3 id="8月份要完成的文章"><a href="#8月份要完成的文章" class="headerlink" title="8月份要完成的文章"></a>8月份要完成的文章</h3><hr>
<ul>
<li>[ ] JSON 与 Ajax</li>
<li>[ ] 浏览器兼容性问题小结</li>
<li>[ ] Python中selenium、configparser</li>
<li>[ ] js中的underscore</li>
<li>[ ] bootstrap初步使用</li>
</ul>
<h3 id="8、9月要看的一些书"><a href="#8、9月要看的一些书" class="headerlink" title="8、9月要看的一些书"></a>8、9月要看的一些书</h3><hr>
<ul>
<li><p>《第一行代码》第2版</p>
<p>重点是第6章之后的内容</p>
</li>
<li><p>《用Python写网络爬虫》</p>
</li>
<li><p>《锋利的jQuery》第2版</p>
</li>
</ul>
<h3 id="一些资料"><a href="#一些资料" class="headerlink" title="一些资料"></a>一些资料</h3><hr>
<ul>
<li><p><a href="http://www.code123.cc/1791.html" target="_blank" rel="external">Web前端开发资源整合</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/21935921" target="_blank" rel="external">前端学习路径</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/25604225" target="_blank" rel="external">必备神器：前端开发全面知识库</a></p>
<p>​</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习笔记05（jQuery选择器与DOM操作）]]></title>
      <url>https://flintx.github.io/2017/07/10/learnjs-05/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考 &amp; 学习：</p>
<p><a href="https://book.douban.com/subject/10792216/" target="_blank" rel="external">锋利的jQuery</a></p>
<p><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖老师的JavaScript教程</a></p>
<p><a href="http://www.runoob.com/jquery/jquery-intro.html" target="_blank" rel="external">jQuery 教程 | 菜鸟教程</a></p>
<p><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰的网络日志</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference" target="_blank" rel="external">JavaScript 参考文档</a></p>
<p><a href="http://www.w3school.com.cn/js/index.asp" target="_blank" rel="external">W3School JavaScript 教程</a></p>
<p>由衷感谢这些资料的提供者与撰写者！</p>
</blockquote>
<a id="more"></a>
<p>jQuery 是一个 JavaScript 库，jQuery 库为使用者提供了以下功能：</p>
<ul>
<li>HTML 元素选择器（selector）</li>
<li>HTML DOM 遍历</li>
<li>HTML 元素操作、CSS操作</li>
<li>HTML 事件（event）</li>
<li>一些封装好的动画与特效</li>
<li>AJAX 方法</li>
<li>丰富的插件</li>
</ul>
<h2 id="jQuery-使用"><a href="#jQuery-使用" class="headerlink" title="jQuery 使用"></a>jQuery 使用</h2><p>使用方式有三：</p>
<ol>
<li><p>下载后通过 <code>&lt;script src=&quot;jquery-x.x.x.min.js&quot;&gt;&lt;/script&gt;</code> 引入，下载地址：<a href="http://jquery.com/download/" target="_blank" rel="external">http://jquery.com/download/</a></p>
</li>
<li><p>CDN 引入。</p>
<p>jQuery 官方的：<a href="https://code.jquery.com/" target="_blank" rel="external">link</a></p>
<p>国内网站推荐：</p>
<ul>
<li>七牛云的：<a href="https://www.staticfile.org/" target="_blank" rel="external">link</a></li>
<li>又拍云的：<a href="http://www.bootcdn.cn/" target="_blank" rel="external">link</a></li>
<li>百度的（优点是稳定，劣势是版本不够新，仅支持http）：<a href="http://cdn.code.baidu.com/" target="_blank" rel="external">link</a></li>
</ul>
<p>国际网站推荐：</p>
<ul>
<li>微软的：<a href="https://docs.microsoft.com/en-us/aspnet/ajax/cdn/overview#jQuery_Releases_on_the_CDN_0" target="_blank" rel="external">link</a></li>
<li>cdnjs.com：<a href="https://cdnjs.com/" target="_blank" rel="external">link</a></li>
<li>Google的：<a href="https://developers.google.com/speed/libraries/" target="_blank" rel="external">link</a></li>
</ul>
</li>
<li><p>在 Console 控制台中引入 jQuery</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jQuery; <span class="comment">// Uncaught ReferenceError: jQuery is not defined</span></div><div class="line"><span class="keyword">var</span> jq = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">jq.src = <span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"</span>;</div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(jq);</div><div class="line">jQuery <span class="comment">// function (e,t)&#123;return new st.fn.init(e,t,X)&#125;</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h2 id="jQuery-语法"><a href="#jQuery-语法" class="headerlink" title="jQuery 语法"></a>jQuery 语法</h2><h3 id="符号"><a href="#符号" class="headerlink" title="$ 符号"></a>$ 符号</h3><p>jQuery 把所有功能封装在一个全局变量 <code>jQuery</code> 中，而 <code>$</code> 是 <code>jQuery</code> 的别名。</p>
<p>在实际开发中，往往直接使用 <code>$</code> 符号。</p>
<p>如果引入多个 js 框架造成了该符号被相互占用，也可以使用 <code>noConflict()</code> 方法来解除对 <code>$</code> 的占用，交还该符号的占用权。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ === jQuery; <span class="comment">// true</span></div><div class="line"><span class="keyword">typeof</span>($); <span class="comment">// "function"</span></div><div class="line">$; <span class="comment">// function (e,t)&#123;return new st.fn.init(e,t,X)&#125;</span></div><div class="line"><span class="keyword">var</span> tmp = $.noConflict(); <span class="comment">// 创建一个新的别名tmp, 用以在接下来的库中使用 jQuery 对象</span></div><div class="line">$; <span class="comment">// undefined</span></div><div class="line">tmp; <span class="comment">// function (e,t)&#123;return new st.fn.init(e,t,X)&#125;</span></div></pre></td></tr></table></figure>
<p><code>$</code> 本质上是一个函数。</p>
<p>但 js 中函数也是一个对象，故 <code>$</code> 拥有众多属性与方法。</p>
<p>它的基本语法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(selector).action();</div><div class="line"><span class="comment">// $ -- 即全局变量jQuery</span></div><div class="line"><span class="comment">// selector -- 选择器，用于查询 HTML element</span></div><div class="line"><span class="comment">// action -- 对 element 所执行的操作</span></div><div class="line"></div><div class="line"><span class="comment">/* for example */</span></div><div class="line">$(<span class="string">"p"</span>).hide() <span class="comment">// 隐藏所有 &lt;p&gt; 元素</span></div><div class="line">$(<span class="string">"p.test"</span>).text(<span class="string">"Hello World"</span>) <span class="comment">// 将所有 class="test" 的 &lt;p&gt; 元素的文本设置为 "Hello World"</span></div><div class="line">$(<span class="string">"a#test"</span>).attr(<span class="string">"href"</span>, <span class="string">"http://flintx.me"</span>) <span class="comment">// 将所有 id="test" 的 &lt;a&gt; 元素的链接地址设置为本博客</span></div></pre></td></tr></table></figure>
<h3 id="文档就绪事件"><a href="#文档就绪事件" class="headerlink" title="文档就绪事件"></a>文档就绪事件</h3><p>为了防止网页在文档加载完成之前就运行 jQuery 代码（可能会导致操作一个不存在的元素、获得未完全渲染的元素等），在运行 jQuery 之前我们往往需要加上判断。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 写法 1</span></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> </div><div class="line">   <span class="comment">// do some things...</span></div><div class="line"> </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 写法 2</span></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> </div><div class="line">   <span class="comment">// do some things...</span></div><div class="line"> </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>写法 1 可读性较好，写法 2 较简洁，推荐使用写法 1。</p>
<p><code>ready()</code> 方法与原生 JavaScript 中的 <code>window.onload()</code> 方法较为类似，但略有不同，如下表所示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">window.onload</th>
<th style="text-align:center">ready</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">执行时机</td>
<td style="text-align:center">网页所有内容加载完毕</td>
<td style="text-align:center">网页所有 DOM 结构绘制完毕（关联内容不一定加载完毕）</td>
</tr>
<tr>
<td style="text-align:center">调用次数</td>
<td style="text-align:center">只能调用一次（多次编写 <code>onload</code> 方法只会执行最后编辑的方法内容）</td>
<td style="text-align:center">可多次调用</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	alert(<span class="string">'first test'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	alert(<span class="string">'second test'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 结果只输出 'second test'</span></div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	alert(<span class="string">'hello, world!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	alert(<span class="string">'hello again'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 两个结果依次输出</span></div></pre></td></tr></table></figure>
<h2 id="jQuery-选择器（Selector）"><a href="#jQuery-选择器（Selector）" class="headerlink" title="jQuery 选择器（Selector）"></a>jQuery 选择器（Selector）</h2><p>选择器是 jQuery 的核心，它帮助我们快速定位到一个或多个 DOM 节点。</p>
<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p>基本选择器主要包括：</p>
<ul>
<li><code>$(&quot;#id&quot;)</code> 根据给定的id匹配一个元素；</li>
<li><code>$(&quot;.class&quot;)</code> 根据给定的类名匹配元素；</li>
<li><code>$(&quot;element&quot;)</code> 根据给定的元素名匹配元素；</li>
<li><code>$(&quot;[attr=&#39;xxx&#39;]&quot;)</code> 根据给定的属性值匹配元素；</li>
<li><code>$(&quot;selector1, selector2, ..., selectorN&quot;)</code> 将每一个选择器匹配到的元素合并后一起返回；</li>
</ul>
<p>下面以 <a href="https://www.baidu.com/" target="_blank" rel="external">百度首页</a> 为例，来展示 jQuery 选择器的使用（百度首页已引入 jQuery，可直接使用）。</p>
<h4 id="按-id-查找"><a href="#按-id-查找" class="headerlink" title="按 id 查找"></a>按 id 查找</h4><p>如果某个DOM节点有<code>id</code>属性，我们可以利用 <code>$(&quot;#id&quot;)</code> 来对其进行定位。</p>
<p>利用 Chrome 的开发者工具，可以快速定位到百度首页 logo 图片所在的 element：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lg"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">hidefocus</span>=<span class="string">"true"</span> <span class="attr">src</span>=<span class="string">"//www.baidu.com/img/bd_logo1.png"</span> <span class="attr">width</span>=<span class="string">"270"</span> <span class="attr">height</span>=<span class="string">"129"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>执行如下语句：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#lg"</span>) <span class="comment">// [div#lg, context: document, selector: "#lg"]</span></div></pre></td></tr></table></figure>
<p>可准确定位到 logo 图片所在的 div 元素。</p>
<p>随后我们让其消失：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#lg'</span>).hide();</div></pre></td></tr></table></figure>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170410172657.png" alt=""></p>
<p>再让其出现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#lg'</span>).show(); <span class="comment">// 上述操作与使用两次$('#lg').toggle();是同样的效果</span></div></pre></td></tr></table></figure>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170410172616.png" alt=""></p>
<h4 id="按-tag-查找"><a href="#按-tag-查找" class="headerlink" title="按 tag 查找"></a>按 tag 查找</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 基本语法</span></div><div class="line"></div><div class="line">$(<span class="string">'tag_name'</span>).method();</div><div class="line"></div><div class="line"><span class="comment">// 让百度首页所有链接消失</span></div><div class="line">$(<span class="string">'a'</span>).fadeToggle();</div></pre></td></tr></table></figure>
<h4 id="按-class-查找"><a href="#按-class-查找" class="headerlink" title="按 class 查找"></a>按 class 查找</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 基本语法</span></div><div class="line">$(<span class="string">'.class_name'</span>).method();</div><div class="line"></div><div class="line"><span class="comment">// 让b站(www.bilibili.com)所有图片改成ac娘</span></div><div class="line">$(<span class="string">'img'</span>).attr(<span class="string">'src'</span>, <span class="string">'http://omfq5kywz.bkt.clouddn.com/10.png'</span>);</div></pre></td></tr></table></figure>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170508151343.png" alt=""></p>
<h4 id="按属性查找"><a href="#按属性查找" class="headerlink" title="按属性查找"></a>按属性查找</h4><p>其实 id 也好，class 也好，都可以看做一个 DOM 节点的属性，使用属性来查找往往会更加便捷。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 选取带有href属性的元素</span></div><div class="line">$(<span class="string">"[href]"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 选取target属性为"_blank"的元素</span></div><div class="line">$(<span class="string">"[target='_blank']"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 选取target属性不为"_blank"的a元素</span></div><div class="line">$(<span class="string">"a[target!='_blank']"</span>)</div></pre></td></tr></table></figure>
<h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><p><img src="http://img.blog.csdn.net/20160221180840819" alt=""></p>
<p><code>$(&quot;ancestor descendant&quot;)</code> 与 <code>(&quot;parent &gt; child&quot;)</code> 的区别在于：前者选取 <code>ancestor</code> 节点的所有后代中的 <code>descendant</code> 元素，后者选取 <code>parent</code> 节点的下一层子节点中的 <code>child</code> 元素</p>
<p>此外，在 jQuery 中还可以用 <code>next()</code> 方法来替代 <code>$(&#39;prev + next&#39;)</code> ，用 <code>nextAll()</code> 方法来替代 <code>$(&#39;prev ~ siblings&#39;)</code> </p>
<p>一些使用示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将 body 内的所有 div 元素背景色变为 Miku 色 (图1)</span></div><div class="line">$(<span class="string">'body div'</span>).css(<span class="string">"background"</span>,<span class="string">"#39c5bb"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 将 body 下一层节点中的所有 div 元素背景色变为 Miku 色 (图2)</span></div><div class="line">$(<span class="string">'body&gt;div'</span>).css(<span class="string">"background"</span>,<span class="string">"#39c5bb"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 将 id 为 lga 的节点之后的下一个兄弟(同级) div 节点隐藏，这句话可以在Google首页试一下:)</span></div><div class="line">$(<span class="string">'#lga+div'</span>).toggle()</div><div class="line"></div><div class="line"><span class="comment">// 将 id 为 cst 的节点之后的所有兄弟(同级) div 节点隐藏，这句话可以在Google首页试一下:)</span></div><div class="line">$(<span class="string">'#cst~div'</span>).toggle()</div></pre></td></tr></table></figure>
<p>图1：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/%E5%B1%82%E6%AC%A1%E9%80%89%E6%8B%A9%E5%99%A81.png" alt=""></p>
<p>图2：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/%E5%B1%82%E6%AC%A1%E9%80%89%E6%8B%A9%E5%99%A82.png" alt=""></p>
<h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><h4 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h4><p><img src="http://okqi2ipwh.bkt.clouddn.com/%E5%9F%BA%E6%9C%AC%E8%BF%87%E6%BB%A4%E9%80%89%E6%8B%A9%E5%99%A8.png" alt=""></p>
<h4 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h4><p><img src="http://okqi2ipwh.bkt.clouddn.com/%E5%86%85%E5%AE%B9%E9%80%89%E6%8B%A9%E8%BF%87%E6%BB%A4%E5%99%A8.gif" alt=""></p>
<h4 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h4><p><img src="http://okqi2ipwh.bkt.clouddn.com/%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E8%BF%87%E6%BB%A4%E5%99%A8.jpg" alt=""></p>
<h4 id="表单过滤选择器"><a href="#表单过滤选择器" class="headerlink" title="表单过滤选择器"></a>表单过滤选择器</h4><p><img src="http://okqi2ipwh.bkt.clouddn.com/%E8%A1%A8%E5%8D%95%E8%BF%87%E6%BB%A4%E9%80%89%E6%8B%A9%E5%99%A8.png" alt=""></p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ol>
<li><p>当有傻逼在属性值中使用了 <code>.</code> <code>#</code> <code>()</code> <code>[]</code> <code>:</code> 等字符，这时候选择器很容易出问题，需要使用转义字符（即在特殊字符前加一个 <code>\\</code> ）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"s#b[id]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="string">'#s#b[id]'</span>) <span class="comment">// 怕是要跪。。</span></div><div class="line">	$(<span class="string">'#s//#b//[id//]'</span>) <span class="comment">// It's OK.</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>还有一个要注意的是：选择器里不要有多余的空格！！！多一个空格少一个空格，选择器表达的意义就会大有不同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#test :hidden'</span>) <span class="comment">// 选取 id 为 test 的元素后代中的隐藏元素</span></div><div class="line">$(<span class="string">'#test:hidden'</span>) <span class="comment">// 选取 id 为 test 的隐藏元素</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol>
<li><p>给网页中所有 <code>&lt;p&gt;</code> 元素添加 <code>onClick()</code> 事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原生写法</span></div><div class="line"><span class="keyword">var</span> items = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);<span class="comment">// 获取页面中的所有p元素</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;	</div><div class="line">	items[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 给每一个p添加onclick事件</span></div><div class="line">		<span class="comment">// do something</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// jQuery写法</span></div><div class="line">$(<span class="string">'p'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	<span class="comment">// do something</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>使一个表格隔行变色</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原生写法</span></div><div class="line"><span class="keyword">var</span> item = <span class="built_in">document</span>.getElementById(<span class="string">"tb1"</span>);			<span class="comment">// 获取id为tb1的元素(table)</span></div><div class="line"><span class="keyword">var</span> tbody = item.getElementsByTagName(<span class="string">"tbody"</span>)[<span class="number">0</span>];	<span class="comment">// 获取表格的第一个tbody元素</span></div><div class="line"><span class="keyword">var</span> trs = tbody.getElementsByTagName(<span class="string">"tr"</span>);	        <span class="comment">// 获取tbody元素下的所有tr元素</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; trs.length; i++)&#123;</div><div class="line">	<span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</div><div class="line">		trs[i].style.backgroundColor = <span class="string">"#cccccc"</span>; <span class="comment">// 改变tr元素背景色.</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// jQuery写法</span></div><div class="line">$(<span class="string">'#tb1 tbody tr:even'</span>).attr(<span class="string">'background'</span>, <span class="string">'#cccccc'</span>);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>有一个复选框，输出选中项个数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原生写法</span></div><div class="line"><span class="keyword">var</span> arrays = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"><span class="keyword">var</span> items = <span class="built_in">document</span>.getElementsByName(<span class="string">"check"</span>);  <span class="comment">// 获取name为check的一组元素(checkbox)</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</div><div class="line">	<span class="keyword">if</span> (items[i].checked) &#123;      <span class="comment">// 判断是否选中</span></div><div class="line">		arrays.push(items[i].value);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">alert(<span class="string">"选中的个数为："</span> + arrays.length);</div><div class="line"></div><div class="line"><span class="comment">// jQuery写法</span></div><div class="line">alert(<span class="string">"选中的个数为："</span> + $(<span class="string">"input[name='check']:checked"</span>).length);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="jQuery-DOM-操作"><a href="#jQuery-DOM-操作" class="headerlink" title="jQuery DOM 操作"></a>jQuery DOM 操作</h2><h3 id="插入节点（append）"><a href="#插入节点（append）" class="headerlink" title="插入节点（append）"></a>插入节点（append）</h3><p>插入一个节点最常用的方法是 <code>append()</code> ，语法一般是 <code>$(selector).append(html)</code>  ，即在节点中插入一个子节点。</p>
<p>需要区别的就是 <code>append()</code> 与 <code>after()</code> 方法，前者插入位置是是在节点中的后面，后者是节点后。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- $('ul').append('&lt;li&gt;...&lt;/li&gt;') 的插入位置 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- $('ul').after('&lt;li&gt;...&lt;/li&gt;') 的插入位置 --&gt;</span></div></pre></td></tr></table></figure>
<p>插入方法一览：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B91.png" alt=""></p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B92.png" alt=""></p>
<h3 id="删除节点（remove）"><a href="#删除节点（remove）" class="headerlink" title="删除节点（remove）"></a>删除节点（remove）</h3><p>删除节点的方法有三个：<code>remove()</code> ，<code>detach()</code> ，<code>empty()</code> </p>
<ul>
<li><p>remove() : 删除内容包含所有匹配的节点以及其后代节点，返回已删除节点的引用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $delDiv = $(<span class="string">'div'</span>).remove(); <span class="comment">// 删除页面中所有 div 元素</span></div><div class="line">$delDiv.appendTo(<span class="string">'body'</span>); <span class="comment">// 将删除的所有节点重新加入到页面中</span></div><div class="line"></div><div class="line">$(<span class="string">'ul li'</span>).remove(<span class="string">'li:gt(2)'</span>); <span class="comment">// 删除表中索引值大于2的li元素</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>detach() : 使用方法等同于 <code>remove()</code> ，不同在于 <code>detach()</code> 将会保留与被删除元素绑定的事件与数据等，恢复后可以继续调用其绑定事件，而 <code>remove()</code> 方法必须重新绑定。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 给p元素绑定click事件</span></div><div class="line">$(<span class="string">'p'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	alert($(<span class="keyword">this</span>).html());</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> $delP1 = $(<span class="string">'p'</span>).detach();</div><div class="line">$delP1.appendTo(<span class="string">'body'</span>); <span class="comment">// 点击p元素，可以触发之前绑定的click事件</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> $delP2 = $(<span class="string">'p'</span>).remove();</div><div class="line">$delP2.appendTo(<span class="string">'body'</span>); <span class="comment">// 点击p元素，不可以触发之前绑定的click事件</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>empty() : 该方法并非删除节点，而是清空节点内容，即将匹配到的元素标签 <code>&lt;xx&gt;</code> 与 <code>&lt;/xx&gt;</code> 之间的内容清除，包括子节点。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div1'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    3.141592653589793238462643383279502884197169...</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="string">'#div1'</span>).empty(); <span class="comment">// ==&gt; &lt;div id='div1'&gt;&lt;/div&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></div><div class="line">	$('p').empty(); // ==&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div1'</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h3 id="复制节点（clone）"><a href="#复制节点（clone）" class="headerlink" title="复制节点（clone）"></a>复制节点（clone）</h3><p>复制节点主要用到了 <code>clone()</code> 方法.</p>
<ul>
<li><p>clone() : 一般语法为 <code>$(selector).clone()</code> ，可以选择参数 <code>true</code> 或者 <code>false</code> ，分别表示复制绑定方法与不复制绑定方法，默认为 <code>false</code> 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 复制索引值为4（第5个）的节点，并将其追加到&lt;ul&gt;元素中</span></div><div class="line">$(<span class="string">'ul li:eq(4)'</span>).clone().appendTo(<span class="string">'ul'</span>); </div><div class="line"></div><div class="line"><span class="comment">// 将id为btn1的节点复制一份，追加到id为btn1的节点之后，并复制其绑定方法</span></div><div class="line">$(<span class="string">'#btn1'</span>).after($(<span class="string">'#btn1'</span>).clone(<span class="literal">true</span>));</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h3 id="替换节点（replace）"><a href="#替换节点（replace）" class="headerlink" title="替换节点（replace）"></a>替换节点（replace）</h3><p>替换节点有 <code>replaceWith()</code> 与 <code>replaceAll()</code> 两个方法。这两个方法作用相同，只不过前者参数是替换内容，后者是被替换节点。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// &lt;div&gt;&lt;p&gt; hahaha:) &lt;/p&gt;&lt;div&gt; ==&gt; &lt;div&gt;&lt;h1&gt;Hello, world!&lt;/h1&gt;&lt;/div&gt;</span></div><div class="line">$(<span class="string">'p'</span>).replaceWith(<span class="string">'&lt;h1&gt;Hello, world!&lt;/h1&gt;'</span>);</div><div class="line">$(<span class="string">'&lt;h1&gt;Hello, world!&lt;/h1&gt;'</span>).replaceAll(<span class="string">'p'</span>); <span class="comment">// 两种方法功能相同</span></div></pre></td></tr></table></figure>
<h3 id="包装节点（wrap）"><a href="#包装节点（wrap）" class="headerlink" title="包装节点（wrap）"></a>包装节点（wrap）</h3><p>所谓包装节点，又称包裹节点，就是把选取的节点外层再包裹一层标签。</p>
<p>实现这一功能的方法是 <code>wrap()</code> 、<code>wrapAll()</code> 与 <code>wrapInner()</code> 。分别对应着单独包裹选取的每一个节点、统一包裹选取的所有节点、单独包裹选取节点的子节点。</p>
<p>具体使用方法如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>first element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>second element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>third element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">wrap1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      	$(<span class="string">'p'</span>).wrap(<span class="string">'&lt;b&gt;&lt;/b&gt;'</span>);</div><div class="line">	&#125;</div><div class="line">  </div><div class="line">  	<span class="function"><span class="keyword">function</span> <span class="title">wrap2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      	$(<span class="string">'p'</span>).wrapAll(<span class="string">'&lt;b&gt;&lt;/b&gt;'</span>);</div><div class="line">	&#125;</div><div class="line">  </div><div class="line">  	<span class="function"><span class="keyword">function</span> <span class="title">wrap3</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      	$(<span class="string">'p'</span>).wrapInner(<span class="string">'&lt;b&gt;&lt;/b&gt;'</span>);</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>执行wrap1() : </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>first element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>second element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>third element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>执行wrap2() : </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>first element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>second element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>third element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>执行wrap3() : </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>first element.<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>second element.<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>third element.<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>需要注意的是，使用 <code>wrapAll()</code> 方法时，如果选取元素之间有其他元素，那么其他元素将被放到包裹元素之后。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 包裹前 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>first element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>A div.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>second element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="string">'p'</span>).wrapAll(<span class="string">'&lt;b&gt;&lt;/b&gt;'</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 包裹后 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>first element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>second element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>A div.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此外，三个wrap函数的参数内容其实就是一个jQuery选择器，这里举一个以供思考的例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 包裹前 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>first element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>A div.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>second element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="string">'p'</span>).wrap(<span class="string">'div'</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 包裹后 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  A div.</div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>first element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>A div.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  A div.</div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>first element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>second element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 被双层包裹 --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="遍历节点（traversal）"><a href="#遍历节点（traversal）" class="headerlink" title="遍历节点（traversal）"></a>遍历节点（traversal）</h3><p>访问临近DOM节点常用的方法一般有：</p>
<ul>
<li><code>children()</code> ：返回选择器匹配元素的子元素集合，不考虑任何子元素的后代元素；</li>
<li><code>next()</code> ：返回紧邻在选择器匹配元素之后的同辈元素；</li>
<li><code>prev()</code> ：返回紧邻在选择器匹配元素之前的同辈元素；</li>
<li><code>siblings()</code> ：返回选择器匹配元素的所有前后同辈元素；</li>
<li><code>closest()</code> ：返回选择器匹配元素的最近匹配参数中选择器的元素。</li>
</ul>
<p>此外还有很多方法，如下表所示：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/%E9%81%8D%E5%8E%86%E8%8A%82%E7%82%B9.png" alt=""></p>
<h3 id="属性操作（attribute）"><a href="#属性操作（attribute）" class="headerlink" title="属性操作（attribute）"></a>属性操作（attribute）</h3><p>这部分比较简单，就不予赘述了。</p>
<ul>
<li>获取属性值：<code>attr(attr_name)</code> </li>
<li>设置属性值：<code>attr(attr_name, attr_value)</code></li>
<li>删除属性：<code>removeAttr(attr_name)</code></li>
</ul>
<h3 id="样式操作（style）"><a href="#样式操作（style）" class="headerlink" title="样式操作（style）"></a>样式操作（style）</h3><p>包括两方面内容，class相关与style相关：</p>
<ol>
<li><p>class相关</p>
<ul>
<li><code>addClass()</code> ：追加class样式（如果要设置class样式应该用 <code>attr()</code> 方法）；</li>
<li><code>removeClass()</code> ：移除class样式，参数值为想要移除的class样式，当无参数时则移除所有class样式；</li>
<li><code>toggleClass()</code> ：切换class样式，若类名存在则删除，若不存在则追加；</li>
<li><code>hasClass()</code> ：判断是否含有某class样式。</li>
</ul>
</li>
<li><p>style相关</p>
<ul>
<li><p><code>css(css_name)</code> ：获取style属性值；</p>
</li>
<li><p><code>css(css_name, css_value)</code> ：设置style属性值；</p>
</li>
<li><p><code>css({css_name1:css_value1, css_name2:css_value2, ...})</code> ：设置多个style属性值；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'p'</span>).css(<span class="string">'color'</span>); <span class="comment">// 获取p元素的样式颜色值</span></div><div class="line">$(<span class="string">'p'</span>).css(<span class="string">'color'</span>, <span class="string">'red'</span>); <span class="comment">// 设置p元素的样式颜色为红色</span></div><div class="line">$(<span class="string">'p'</span>).css(&#123;<span class="string">'color'</span>:<span class="string">'red'</span>, <span class="string">'font-size'</span>:<span class="string">'24px'</span>&#125;); <span class="comment">// 设置p元素字体大小为24像素，样式颜色为红色</span></div><div class="line"></div><div class="line"><span class="comment">// font-size不带引号时应使用驼峰写法，即</span></div><div class="line">$(<span class="string">'p'</span>).css(fontSize, <span class="string">'24px'</span>);</div><div class="line"><span class="comment">// 若带引号则两种写法皆可，即</span></div><div class="line">$(<span class="string">'p'</span>).css(<span class="string">'fontSize'</span>, <span class="string">'24px'</span>);</div><div class="line">$(<span class="string">'p'</span>).css(<span class="string">'font-size'</span>, <span class="string">'24px'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p>除上述几个方法外，还有一些常用的内建方法，如 <code>height()</code> 、<code>width()</code> 、<code>offset()</code> 等，如下所示：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C.png" alt=""></p>
<h3 id="内容操作（value）"><a href="#内容操作（value）" class="headerlink" title="内容操作（value）"></a>内容操作（value）</h3><p>内容操作主要就是三个方法的辨析：<code>html()</code> , <code>text()</code> , <code>val()</code> .</p>
<ul>
<li>html() : 设置或返回指定某个标签开始到结束标签之间的所有内容（包括标签和文本内容）；</li>
<li>text() : 设置或返回被选元素的纯文本内容；</li>
<li>value() : 设置或者获取设置或者获取元素的 value 值，该方法大多用于 input 元素。</li>
</ul>
<p>如果只是这么简单的一段无嵌套纯文本html：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  苟利国家生死以，岂因祸福避趋之。</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>前两者的返回均为：<code>苟利国家生死以，岂因祸福避趋之。</code> ，<code>val()</code> 返回为 <code>&quot;&quot;</code>  。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[写在四月将至]]></title>
      <url>https://flintx.github.io/2017/03/28/April/</url>
      <content type="html"><![CDATA[<h2 id="四月待办事项"><a href="#四月待办事项" class="headerlink" title="四月待办事项"></a>四月待办事项</h2><a id="more"></a>
<h3 id="毕业设计"><a href="#毕业设计" class="headerlink" title="毕业设计"></a>毕业设计</h3><ul>
<li><a href="https://github.com/VREMSoftwareDevelopment/WiFiAnalyzer" target="_blank" rel="external">WifiAnalyzer</a> 源码阅读</li>
<li>把手上的三星 Note3 升级到 Android 6.0+ ，或者使手上的华为 Mate 9 获取到 Root 权限</li>
<li><a href="https://github.com/gpfduoduo/NetWorkTools" target="_blank" rel="external">Tcpdump</a> 调研</li>
<li><a href="https://github.com/chrisk44/Hijacker" target="_blank" rel="external">Hijacker</a> 源码阅读</li>
<li><a href="https://github.com/seemoo-lab/nexmon" target="_blank" rel="external">Nexmon</a> 源码阅读</li>
<li>代码编写</li>
<li>编译测试</li>
<li>论文撰写</li>
</ul>
<hr>
<h3 id="项目组工作"><a href="#项目组工作" class="headerlink" title="项目组工作"></a>项目组工作</h3><ul>
<li>Spring 框架学习（Spring MVC + Hibernate + Spring）</li>
<li>Eclipse 使用学习</li>
<li>Java EE 学习</li>
<li>Java Web 学习</li>
</ul>
<h2 id="碎语"><a href="#碎语" class="headerlink" title="碎语"></a>碎语</h2><p>考研初试已结束八十多天，复试也告一段落快一周了。四月在即，项目4.18要上第一版，毕业论文deadline是5.1.这两件事是4月的主题，望勉之。</p>
<p>我一直以为自己对技术与知识的学习胜在一个广度上，但近几个月才意识到，不精不深，广而无用。</p>
<p>去参加任何面试，我的下场基本是这样的：</p>
<ul>
<li>“你会什么？”</li>
<li>“我会XXX。”</li>
<li>“那说一下你对XXX的YYY机制的理解。”</li>
<li>“…（这是啥玩意儿？）”</li>
<li>“你用XXX做过些什么项目？”</li>
<li>“…（十几个Hello World级别的工具，而且还是copy的代码）”</li>
<li>“这你也好意思说会XXX？”</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习笔记04（BOM 与 DOM）]]></title>
      <url>https://flintx.github.io/2017/03/07/learnjs-04/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考 &amp; 学习：</p>
<p><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖老师的JavaScript教程</a></p>
<p><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰的网络日志</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference" target="_blank" rel="external">JavaScript 参考文档</a></p>
<p><a href="http://www.w3school.com.cn/js/index.asp" target="_blank" rel="external">W3School JavaScript 教程</a></p>
<p>由衷感谢这些资料的提供者与撰写者！</p>
</blockquote>
<a id="more"></a>
<h2 id="浏览器对象模型（BOM）"><a href="#浏览器对象模型（BOM）" class="headerlink" title="浏览器对象模型（BOM）"></a>浏览器对象模型（BOM）</h2><p>BOM 的全称是 <strong>B</strong>rowser <strong>O</strong>bject <strong>M</strong>odel（浏览器对象模型），即把<strong>浏览器</strong>当做一个对象来看待。BOM 是赖以Javascript的 Web 服务的真正核心，该模型提供了很多对象，用于调用与访问浏览器的各种功能与属性，而与网页内容无关。</p>
<p>BOM 提供了很多用于与浏览器交互操作的对象：<code>window</code> ，<code>location</code> ，<code>navigator</code> ，<code>screen</code> ，<code>history</code> 。</p>
<h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><p><code>window</code> 是 BOM 的核心对象，其表示浏览器的一个实例，即使访问浏览器的一个接口，同时也是 ECMAScript 规定的 <code>Global</code> 对象。因此 <code>window.alert()</code> 可直接通过 <code>alert()</code> 调用。</p>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取浏览器窗口宽高</span></div><div class="line">alert(<span class="string">'window inner size: '</span> + <span class="built_in">window</span>.innerWidth + <span class="string">' x '</span> + <span class="built_in">window</span>.innerHeight);</div><div class="line"><span class="comment">// 1366 * 766</span></div></pre></td></tr></table></figure>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打开一个新的url</span></div><div class="line"><span class="comment">// 简单模式</span></div><div class="line"><span class="built_in">window</span>.open(<span class="string">'https://www.baidu.com'</span>);</div><div class="line"><span class="comment">// 复杂模式</span></div><div class="line"><span class="comment">// 第二个参数为新url的target属性，可以有_self, _parent, _top或_blank，也可以传入一个窗口命名字符串</span></div><div class="line"><span class="comment">// 第三个特性字符串不能有空格</span></div><div class="line"><span class="keyword">var</span> myWin = <span class="built_in">window</span>.open(<span class="string">'http://www.flintx.me'</span>, <span class="string">'myWindow'</span>,</div><div class="line">            <span class="string">'height=400,width=400,top=10,left=10,resizable=yes'</span>); </div><div class="line"></div><div class="line"><span class="comment">// 操作浏览器窗口大小的方法 resizeTo() 与 resizeBy() 通常被浏览器禁用.</span></div><div class="line"><span class="comment">// 操作浏览器窗口位置的方法 moveTo() 与 moveBy() 通常被浏览器禁用</span></div><div class="line"></div><div class="line"><span class="comment">// 关闭新打开的窗口</span></div><div class="line">myWin.close();</div><div class="line"></div><div class="line"><span class="comment">// 超时调用</span></div><div class="line"><span class="keyword">var</span> timeoutId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'Time Out!'</span>);</div><div class="line">&#125;, <span class="number">1000</span>);</div><div class="line"><span class="comment">// 撤销超时调用</span></div><div class="line">clearTimeout(timeoutId);</div><div class="line"></div><div class="line"><span class="comment">// 间歇调用</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> intervalId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    count++;</div><div class="line">    <span class="built_in">console</span>.log(count * <span class="number">10</span> + <span class="string">' 秒后, 第 '</span> + count + <span class="string">' 次调用!'</span>);</div><div class="line">&#125;, <span class="number">10000</span>);</div><div class="line"><span class="comment">// 10 秒后, 第 1 次调用!</span></div><div class="line"><span class="comment">// 20 秒后, 第 2 次调用!</span></div><div class="line"><span class="comment">// 30 秒后, 第 3 次调用!</span></div><div class="line"><span class="comment">// 撤销间歇调用</span></div><div class="line">clearInterval(intervalId);</div></pre></td></tr></table></figure>
<h4 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h4><ul>
<li><p><code>window.alert()</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="string">'Hello, Flintx!'</span>);</div></pre></td></tr></table></figure>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170305151836.jpg" alt=""></p>
</li>
<li><p><code>window.confirm()</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (confirm(<span class="string">"To be or not to be?"</span>)) &#123;</div><div class="line">    alert(<span class="string">'this is a question.'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">'this is a question, too.'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170305152236.jpg" alt=""></p>
</li>
<li><p><code>window.prompt()</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = prompt(<span class="string">'道理我都懂，但JavaScript为啥这么坑？'</span>, <span class="string">'说出你的故事'</span>);</div><div class="line"><span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// 我也不知道，我也很绝望啊</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170305152601.jpg" alt=""></p>
</li>
</ul>
<h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p><code>location</code> 是最有用的 BOM 对象之一，它提供了当前窗口的页面有关信息。</p>
<p><code>location</code>，<code>window.location</code>，<code>document.location</code> 引用的是同一个对象。</p>
<p><code>location</code> 可以将一个 URL 解析成独立的片段，并能通过属性来访问这些片段。</p>
<p>以一个 URL 为例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.example.com:4000/blog/index.html?x=1&amp;y=2#1a2c3b4d</div></pre></td></tr></table></figure>
<p>片段分解：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">location.href; <span class="comment">// http://www.example.com:4000/blog/index.html?x=1&amp;y=2#1a2c3b4d</span></div><div class="line">location.host; <span class="comment">// www.example.com:4000</span></div><div class="line">location.hostname; <span class="comment">// www.example.com</span></div><div class="line">location.port; <span class="comment">// 4000</span></div><div class="line">location.protocol; <span class="comment">// http:</span></div><div class="line">location.pathname; <span class="comment">// /blog/index.html</span></div><div class="line">location.search; <span class="comment">// ?x=1&amp;y=2</span></div><div class="line">location.hash; <span class="comment">// #1a2c3b4d</span></div></pre></td></tr></table></figure>
<p>主要方法：</p>
<ul>
<li><code>location.assign()</code> : 加载给定URL的内容资源到这个 <code>location</code> 对象所关联的实例上。</li>
<li><code>location.reload()</code> : 重新加载当前页面，若无参数页面会从浏览器缓存加载，传递参数 <code>true</code> 则强制从服务器重新加载。</li>
<li><code>location.replace()</code> : 用给定的URL替换掉当前的资源。与 <code>assign()</code> 方法不同的是用 <code>replace()</code>替换的新页面不会被保存在会话的历史中，这意味着用户将不能用后退按钮转到该页面。</li>
</ul>
<h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><p><code>navigator</code> 用以表示浏览器的信息。在 Web 开发领域，不同浏览器或者同一浏览器的不同平台版本总是各有所长各有所短，故客户端检测一直是无法回避的一种开发策略，而 <code>navigator</code> 对象的不少属性与方法为客户端检测提供了行而有效的支持。</p>
<p>关于各大浏览器之间的恩怨情仇与一些祖传bug可参考 <a href="https://book.douban.com/subject/10546125/" target="_blank" rel="external">JavaScript高级程序设计（第3版）</a> 的第9章，写得十分详细精彩，不得不说，这就是江湖。并且这一章最后提供了一个完整的客户端检测方案，即优先使用通用方法编程，进而使用能力检测、怪癖检测，最后使用用户代理检测（并附有完整检测代码），值得一阅。</p>
<p><code>navigator</code> 对象属性方法中支持浏览器较多的一部分：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">navigator.appName; <span class="comment">// "Netscape", 大部分浏览器都是"Netscape"</span></div><div class="line">navigator.appCodeName; <span class="comment">// "Mozilla", 通常是"Mozilla", 即使是非Mozilla浏览器</span></div><div class="line">navigator.appVersion;</div><div class="line"><span class="comment">// "5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span></div><div class="line"><span class="comment">// 一般不与实际浏览器对应</span></div></pre></td></tr></table></figure>
<p>以上属性一般没用，原因在注释里。。囧。。</p>
<p>下面介绍有用且支持浏览器较多的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用户代理属性</span></div><div class="line">navigator.userAgent;</div><div class="line"><span class="comment">/* "Mozilla/5.0 (Windows NT 10.0; Win64; x64) </span></div><div class="line"> * AppleWebKit/537.36 (KHTML, like Gecko) </div><div class="line"> * Chrome/56.0.2924.87 </div><div class="line"> * Safari/537.36"</div><div class="line"> */</div><div class="line"><span class="comment">// 和appVersion比较像, 但还是userAgent用的多一些, 客户端检测全靠它</span></div><div class="line"></div><div class="line"><span class="comment">// 检测插件</span></div><div class="line">navigator.plugins.length; <span class="comment">// 5</span></div><div class="line">navigator.plugins[<span class="number">0</span>].name; <span class="comment">// "Widevine Content Decryption Module"</span></div><div class="line">navigator.plugins[<span class="number">0</span>].description</div><div class="line"><span class="comment">// "Enables Widevine licenses for playback of HTML audio/video content. (version: 1.4.8.962)"</span></div><div class="line"></div><div class="line"><span class="comment">// 检查cookie是否启用</span></div><div class="line">navigator.cookieEnabled; <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 检查Java是否启用</span></div><div class="line">navigator.javaEnabled(); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><p>不同于 <code>window</code> 对象反映的是浏览器窗口的信息，<code>screen</code>  对象主要反映的是显示器的信息，用处不大【JavaScript高级程序设计（第3版）钦定的】。</p>
<p>主要用到的属性如下：</p>
<ul>
<li><code>screen.width</code> ：屏幕宽度，以像素为单位；</li>
<li><code>screen.height</code> ：屏幕高度，以像素为单位；</li>
<li><code>screen.colorDepth</code> ：返回颜色位数，如8、16、24。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'Screen size = '</span> + screen.width + <span class="string">' x '</span> + screen.height);</div><div class="line"><span class="comment">// Screen size = 1366 x 768</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Screen color depth is '</span> + screen.colorDepth);</div><div class="line"><span class="comment">// Screen color depth is 24</span></div></pre></td></tr></table></figure>
<h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p><code>history</code> 对象也不常用，调用 <code>history</code> 对象的 <code>back()</code> 或 <code>forward ()</code> 可以模仿浏览器的“后退”和“前进”按钮。但现在频繁交互的Web环境下，这个对象已经属于历史遗留了。当然了，它还有一个用途，即检测用户是否一开始就打开了你的页面：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (history.length === <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// 用户打开窗口之后的第一个页面</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="文档对象模型（DOM）"><a href="#文档对象模型（DOM）" class="headerlink" title="文档对象模型（DOM）"></a>文档对象模型（DOM）</h2><p>W3C对DOM的定义是：</p>
<blockquote>
<p>“一个与系统平台和变成语言无关的接口，程序和脚本可以通过这个接口动态地访问和修改文档的内容，结构，样式.”</p>
</blockquote>
<p>有人说，<strong>前端</strong>的 JavaScript = ECMAScript（基本语法） + BOM（操作浏览器的API） + DOM（操作页面文档的API），虽有几分浮夸，但不无道理。</p>
<p>与 BOM 相比：</p>
<blockquote>
<p>BOM 是为了操作浏览器出现的 API，window 是其主要对象。</p>
<p>而 DOM 是为了操作文档出现的 API，document 是其主要对象；</p>
</blockquote>
<p>关于 JavaScript DOM 操作的各种东西可以写<a href="https://book.douban.com/subject/6038371/" target="_blank" rel="external">一本书</a>了，这里只写比较基础的一些操作。</p>
<p>操作用的网页是自己的一篇文章：<a href="http://flintx.me/2017/02/02/hello/" target="_blank" rel="external">Hello, My Blog</a></p>
<h3 id="查找-HTML-Element"><a href="#查找-HTML-Element" class="headerlink" title="查找 HTML Element"></a>查找 HTML Element</h3><p>通过 DOM 来操作页面的第一步：定位元素。</p>
<p>方法有二：</p>
<h4 id="通过-id-查找"><a href="#通过-id-查找" class="headerlink" title="通过 id 查找"></a>通过 id 查找</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> imageTest = <span class="built_in">document</span>.getElementById(<span class="string">'图片插入测试'</span>);</div><div class="line">imageTest;</div></pre></td></tr></table></figure>
<p>查找出来是这样的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"图片插入测试"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#图片插入测试"</span> <span class="attr">class</span>=<span class="string">"headerlink"</span> <span class="attr">title</span>=<span class="string">"图片插入测试"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>图片插入测试<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="通过-Tag-查找"><a href="#通过-Tag-查找" class="headerlink" title="通过 Tag 查找"></a>通过 Tag 查找</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> h2tag = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'h2'</span>);</div><div class="line">h2tag; <span class="comment">// [h2#图片插入测试, h2#代码高亮测试, h2#数学公式测试]</span></div></pre></td></tr></table></figure>
<h3 id="通过-DOM-修改-HTML"><a href="#通过-DOM-修改-HTML" class="headerlink" title="通过 DOM 修改 HTML"></a>通过 DOM 修改 HTML</h3><p><strong>慎重</strong>使用 <code>document.write()</code> 方法！！！</p>
<p>推荐使用修改元素 <code>innerHTML</code> 属性的方式。</p>
<h4 id="例1-修改文本"><a href="#例1-修改文本" class="headerlink" title="例1.修改文本"></a>例1.修改文本</h4><p>以本地修改新浪微博粉丝数为例：</p>
<p><strong>修改前</strong>：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170306202348.jpg" alt=""></p>
<p>右键 -&gt; 检查，得到这个数字 <code>233</code> 的元素：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">"W_f18"</span>&gt;</span>223<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div></pre></td></tr></table></figure>
<p>定位至该元素：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> strongEle = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'strong'</span>);</div><div class="line">strongEle; <span class="comment">// [strong.W_f18, strong.W_f18, strong.W_f18]</span></div><div class="line">strongEle[<span class="number">0</span>].innerHTML; <span class="comment">// "217" --- 关注数</span></div><div class="line">strongEle[<span class="number">1</span>].innerHTML; <span class="comment">// "223" --- 粉丝数</span></div><div class="line">strongEle[<span class="number">2</span>].innerHTML; <span class="comment">// "342" --- 微博数</span></div></pre></td></tr></table></figure>
<p>现在我们重写粉丝数的 <code>innerHTML</code> 属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strongEle[<span class="number">1</span>].innerHTML = <span class="string">'1000000'</span>;</div></pre></td></tr></table></figure>
<p><strong>修改后</strong>：</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170306203200.jpg" alt=""></p>
<p>哈哈，百万粉留念 ~！</p>
<p><img src="http://okqi2ipwh.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170306203236.jpg" alt=""></p>
<p>不是数字也没问题。嘛，可惜一刷新就没了。。</p>
<h4 id="例2-修改属性"><a href="#例2-修改属性" class="headerlink" title="例2.修改属性"></a>例2.修改属性</h4><p>关于改变一个元素的属性，用如下语法即可：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(id).attribute = <span class="keyword">new</span> value;</div></pre></td></tr></table></figure>
<p>这里用这个demo网页来举例：<a href="http://flintx.me/laboratory/learnjs_04_01.html" target="_blank" rel="external">白学现场</a></p>
<p>源代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>白学现场<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"wa2"</span> <span class="attr">src</span>=<span class="string">"http://flintx.me/images/Kazusa.jpg"</span> <span class="attr">height</span>=<span class="string">"600"</span> <span class="attr">width</span>=<span class="string">"270"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>冬马小三！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"white_theory"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> SetsunaURL = <span class="string">'http://flintx.me/images/Setsuna.jpg'</span>;</div><div class="line">    <span class="keyword">var</span> KazusaURL = <span class="string">'http://flintx.me/images/Kazusa.jpg'</span>;</div><div class="line">    <span class="keyword">var</span> WA2URL = <span class="string">'http://flintx.me/images/WA2.jpg'</span>;</div><div class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</div><div class="line">    <span class="keyword">var</span> wa2Image = <span class="built_in">document</span>.getElementById(<span class="string">'wa2'</span>);</div><div class="line">    <span class="keyword">var</span> wa2Text = <span class="built_in">document</span>.getElementById(<span class="string">'white_theory'</span>);</div><div class="line">    <span class="keyword">var</span> times = <span class="number">0</span>;</div><div class="line">    btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        times++;</div><div class="line">        <span class="keyword">if</span> (times &gt; <span class="number">5</span>) &#123;</div><div class="line">            btn.style.display = <span class="string">'none'</span>;</div><div class="line">            wa2Image.src = WA2URL;</div><div class="line">            wa2Image.height = <span class="string">'720'</span>;</div><div class="line">            wa2Image.width = <span class="string">'1366'</span>;</div><div class="line">            wa2Text.innerHTML = <span class="string">'为什么会这样呢？明明是我先来的'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (times % <span class="number">2</span> === <span class="number">1</span>) &#123;</div><div class="line">            btn.innerHTML = <span class="string">'雪菜碧池！'</span>;</div><div class="line">            wa2Image.src = SetsunaURL;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (times % <span class="number">2</span> === <span class="number">0</span>) &#123;</div><div class="line">            btn.innerHTML = <span class="string">'冬马小三！'</span>;</div><div class="line">            wa2Image.src = KazusaURL;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果就自己去感受吧哈哈 ~ （初次加载可能比较慢，多试几次风味更佳）</p>
<h3 id="通过-DOM-修改-CSS"><a href="#通过-DOM-修改-CSS" class="headerlink" title="通过 DOM 修改 CSS"></a>通过 DOM 修改 CSS</h3><p>若需改变一个元素的样式（style），可用如下语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(id).style.property = <span class="keyword">new</span> style;</div></pre></td></tr></table></figure>
<p>由于 CSS 基础还未学习（直接上手的JS。。），这里只能做一些很基础的演示，点按钮修改字体颜色大小：</p>
<p><a href="http://flintx.me/laboratory/learnjs_04_02.html" target="_blank" rel="external">Change! Change! Change!</a></p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Change! Change! Change!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"pid"</span>&gt;</span></div><div class="line">    Hello World!</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>变大<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>变小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn3"</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn4"</span>&gt;</span>消失<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn5"</span>&gt;</span>出现<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> p = <span class="built_in">document</span>.getElementById(<span class="string">'pid'</span>);</div><div class="line">    <span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">    <span class="keyword">var</span> btn2 = <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>);</div><div class="line">    <span class="keyword">var</span> btn3 = <span class="built_in">document</span>.getElementById(<span class="string">'btn3'</span>);</div><div class="line">    <span class="keyword">var</span> btn4 = <span class="built_in">document</span>.getElementById(<span class="string">'btn4'</span>);</div><div class="line">    <span class="keyword">var</span> btn5 = <span class="built_in">document</span>.getElementById(<span class="string">'btn5'</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getRandomInt</span>(<span class="params">min, max</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>) + min);</div><div class="line">    &#125;</div><div class="line">    btn1.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> fontSize = p.style.fontSize || <span class="string">'20px'</span>;</div><div class="line">        fontSize = <span class="built_in">parseInt</span>(fontSize) + <span class="number">2</span>;</div><div class="line">        p.style.fontSize = fontSize.toString() + <span class="string">'px'</span>;</div><div class="line">    &#125;);</div><div class="line">    btn2.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> fontSize = p.style.fontSize || <span class="string">'20px'</span>;</div><div class="line">        fontSize = <span class="built_in">parseInt</span>(fontSize) - <span class="number">2</span>;</div><div class="line">        p.style.fontSize = fontSize.toString() + <span class="string">'px'</span>;</div><div class="line">    &#125;);</div><div class="line">    btn3.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'pink'</span>, <span class="string">'gray'</span>, <span class="string">'orange'</span>, <span class="string">'yellow'</span>];</div><div class="line">        p.style.color = colors[getRandomInt(<span class="number">0</span>, colors.length - <span class="number">1</span>)];</div><div class="line">    &#125;);</div><div class="line">    btn4.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        p.style.visibility = <span class="string">'hidden'</span>;</div><div class="line">    &#125;);</div><div class="line">    btn5.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        p.style.visibility = <span class="string">'visible'</span>;</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="通过-DOM-监听事件（Event）"><a href="#通过-DOM-监听事件（Event）" class="headerlink" title="通过 DOM 监听事件（Event）"></a>通过 DOM 监听事件（Event）</h3><p>之前通过 DOM 来修改 HTML 和 CSS 其实已经用到了 <code>Event</code> 的概念，即 <code>onclick</code> （鼠标点击）。</p>
<p>接下来通过这个网页来做一些演示：<a href="http://flintx.me/laboratory/learnjs_04_03.html" target="_blank" rel="external">Events Test</a></p>
<ul>
<li><code>onload</code> 与 <code>onunload</code> : 会在用户进入或离开页面时被触发</li>
</ul>
<ul>
<li><code>onchange</code> : 常结合对输入字段的验证</li>
<li><code>onmouseover</code> 和 <code>onmouseout</code> : 用于在用户的鼠标移至 HTML 元素上方或移出元素时触发</li>
<li><code>onmousedown</code>、<code>onmouseup</code> 以及 <code>onclick</code> : 鼠标点击事件的所有部分</li>
</ul>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Events Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"displayTime()"</span> <span class="attr">onunload</span>=<span class="string">"exitPage()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>Flintx OS 尚未加载完成<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>事件1：onchange<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入小写英文字母 <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"input1"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>当离开输入字段时，文本将转换为大写。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>事件2：onmouseover 和 onmouseout<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span>鼠标移动到框中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>事件3：onmousedown 和 onmouseup<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img1"</span> <span class="attr">src</span>=<span class="string">"http://omfq5kywz.bkt.clouddn.com/06.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击图像按住不放<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'input1'</span>).addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">this</span>.value = <span class="keyword">this</span>.value.toUpperCase();</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>).addEventListener(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.innerHTML = <span class="string">'哥们，你听说过安利吗？'</span>;</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>).addEventListener(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">this</span>.innerHTML = <span class="string">'别走啊，大兄弟'</span>;</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'img1'</span>).addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.src = <span class="string">'http://omfq5kywz.bkt.clouddn.com/08.png'</span>;</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'img1'</span>).addEventListener(<span class="string">'mouseup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.src = <span class="string">'http://omfq5kywz.bkt.clouddn.com/06.png'</span>;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">displayTime</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (x &lt; <span class="number">10</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">'0'</span> + x.toString();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> x.toString();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">        <span class="keyword">var</span> timePrint = check(time.getHours()) + <span class="string">':'</span> + check(time.getMinutes()) + <span class="string">':'</span> + check(time.getSeconds());</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'p1'</span>).innerHTML = <span class="string">'Flintx OS 已启动\n当前时间：'</span> + timePrint;</div><div class="line">        setTimeout(displayTime, <span class="number">500</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">exitPage</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">'能量耗尽...'</span>);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>mystyle.css :</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h2</span> &#123;</div><div class="line">    <span class="attribute">color</span>: darkslategray;</div><div class="line">    <span class="attribute">font-size</span>: medium;</div><div class="line">    <span class="attribute">text-decoration</span>: underline;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: Consolas, <span class="string">"Liberation Mono"</span>, Courier, monospace;</div><div class="line">    <span class="attribute">font-size</span>: small;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.div</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background-color</span>: aqua;</div><div class="line">    <span class="attribute">color</span>: maroon;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习笔记03（面向对象编程）]]></title>
      <url>https://flintx.github.io/2017/03/05/learnjs-03/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考 &amp; 学习：</p>
<p><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖老师的JavaScript教程</a></p>
<p><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰的网络日志</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference" target="_blank" rel="external">JavaScript 参考文档</a></p>
<p><a href="http://www.w3school.com.cn/js/index.asp" target="_blank" rel="external">W3School JavaScript 教程</a></p>
<p>由衷感谢这些资料的提供者与撰写者！</p>
</blockquote>
<a id="more"></a>
<h2 id="JavaScript面向对象的基本概念"><a href="#JavaScript面向对象的基本概念" class="headerlink" title="JavaScript面向对象的基本概念"></a>JavaScript面向对象的基本概念</h2><p>JavaScript是一门基于对象的语言，可以说所有数据皆为对象。然而不同于C++/Java/C#，JavaScript没有类（Class）的概念，不区分类和对象实例。换而言之，”student” 和 “the student” 在JS中是没有区别的。</p>
<p>ECMA-262将对象定义为”无序属性的集合，其属性可以是基本值、对象和函数。“故我们可以将JS中的对象想象成散列表，由键值对组成，其中值可以是数据或函数。</p>
<h3 id="对象的创建与生成"><a href="#对象的创建与生成" class="headerlink" title="对象的创建与生成"></a>对象的创建与生成</h3><p>对象创建有多种模式，这里从最原始的模式讲起。</p>
<h4 id="1-原始模式"><a href="#1-原始模式" class="headerlink" title="1.原始模式"></a>1.原始模式</h4><p>原始模式，即通过字面量直接创建对象实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cat1 = &#123;</div><div class="line">	<span class="attr">name</span> : <span class="string">'Tom'</span>,</div><div class="line">	<span class="attr">color</span> : <span class="string">'yellow'</span>,</div><div class="line">	<span class="attr">sayHi</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'喵喵喵~'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="keyword">var</span> cat2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">cat2.name = <span class="string">'Henry'</span>;</div><div class="line">cat2.color = <span class="string">'gray'</span>;</div><div class="line">cat2.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'喵喵喵~'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">cat1.sayHi === cat2.sayHi; <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>原始模式的缺点很明显：重复代码过多，同一类的对象实例之间无关联。</p>
<h4 id="2-工厂模式"><a href="#2-工厂模式" class="headerlink" title="2.工厂模式"></a>2.工厂模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCat</span>(<span class="params">name, color</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">	o.name = name;</div><div class="line">	o.color = color;</div><div class="line">	o.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'喵喵喵~'</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cat1 = createCat(<span class="string">'Tom'</span>, <span class="string">'yellow-brown'</span>);</div><div class="line"><span class="built_in">console</span>.log(cat1.name); <span class="comment">// Tom</span></div><div class="line"><span class="built_in">console</span>.log(cat1.color); <span class="comment">// yellow-brown</span></div><div class="line">cat1.sayHi(); <span class="comment">// 喵喵喵~</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> cat2 = createCat(<span class="string">'Henry'</span>, <span class="string">'gray'</span>);</div><div class="line">cat1 === cat2; <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>工厂模式虽然解决了创建多个相似对象的问题，但是无法解决对象识别的问题，无法知道一个对象实例具体属于什么类。</p>
<h4 id="3-构造函数模式"><a href="#3-构造函数模式" class="headerlink" title="3.构造函数模式"></a>3.构造函数模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name, color</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.color = color;</div><div class="line">	<span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'喵喵喵~'</span>);</div><div class="line">	&#125;;</div><div class="line">  	<span class="comment">// 等效于 new Function("console.log('喵喵喵~')");</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">'azusa'</span>, <span class="string">'black'</span>);</div><div class="line"><span class="keyword">var</span> cat2 = <span class="keyword">new</span> Cat(<span class="string">'yui'</span>, <span class="string">'white'</span>);</div><div class="line">cat1.sayHi(); <span class="comment">// 喵喵喵~</span></div><div class="line"></div><div class="line"><span class="comment">// 也可以在另一对象作用域调用</span></div><div class="line"><span class="keyword">var</span> cat3 = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">Cat.call(cat3, <span class="string">'aki'</span>, <span class="string">'yellow'</span>);</div><div class="line">cat3.sayHi(); <span class="comment">// 喵喵喵~</span></div><div class="line"></div><div class="line">cat1 <span class="keyword">instanceof</span> Cat; <span class="comment">// true</span></div><div class="line">cat1.sayHi === cat2.sayHi; <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>构造函数模式的优点比较明显，即利用创建 <code>Function</code> 对象增加了一个类（Class）的概念，可以有效解决对象识别问题，而且构造函数还能当作普通函数来调用，区别于是否使用 <code>new</code> 运算符。</p>
<p>然而构造函数模式并非没有缺点，每个方法在实例上都要重新创建一遍，存在一个浪费内存的问题。虽然 <code>cat1</code> 与 <code>cat2</code> 都有一个 <code>sayHi()</code> 的方法，但属于不同的 <code>Function</code> 实例。同样的方法要创建不同的实例来实现，十分浪费内存。</p>
<h4 id="4-原型模式"><a href="#4-原型模式" class="headerlink" title="4.原型模式"></a>4.原型模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name, color</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.color = color;</div><div class="line">&#125;</div><div class="line">Cat.prototype.master = <span class="string">'Flint'</span>;</div><div class="line">Cat.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'喵喵喵~'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">'azusa'</span>, <span class="string">'black'</span>);</div><div class="line"><span class="keyword">var</span> cat2 = <span class="keyword">new</span> Cat(<span class="string">'yui'</span>, <span class="string">'white'</span>);</div><div class="line">cat1.sayHi(); <span class="comment">// 喵喵喵~</span></div><div class="line"><span class="built_in">console</span>.log(cat2.master); <span class="comment">// Flint</span></div><div class="line"></div><div class="line">cat1.sayHi === cat2.sayHi; <span class="comment">// true</span></div><div class="line"></div><div class="line">cat1.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></div><div class="line">cat1.hasOwnProperty(<span class="string">'sayHi'</span>); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>准确来说，这是构造函数模式和原型模式的组合使用（因为实例一般或多或少会有独属于自己的属性，故很少有人单纯使用原型模式）。</p>
<p>除此之外，原型模式还有一点语法糖：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name, color</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.color = color;</div><div class="line">&#125;</div><div class="line">Cat.prototype.master = <span class="string">'Flint'</span>;</div><div class="line">Cat.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'喵喵喵~'</span>);</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 上述代码可以写作：</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name, color</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.color = color;</div><div class="line">&#125;</div><div class="line">Cat.prototype = &#123;</div><div class="line">	<span class="attr">master</span> : <span class="string">'Flint'</span>,</div><div class="line">	<span class="attr">sayHi</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'喵喵喵~'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="5-class关键字"><a href="#5-class关键字" class="headerlink" title="5.class关键字"></a>5.class关键字</h4><p>在ES6中新引入了 <code>class</code> 关键字，让类的定义不再依赖于原型来实现，不过目前支持ES6的浏览器还不够多，成为主流代码风格还需要一段时间。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  	<span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Student.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	<span class="built_in">console</span>.log(<span class="string">`Hello, I am <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>!`</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码可利用 <code>class</code> 关键字改写为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>(name) &#123;</div><div class="line">		<span class="keyword">this</span>.name = name</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sayHi() &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">`Hello, I am <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>!`</span>);</div><div class="line">	&#125; <span class="comment">// 定义原型函数不需要function关键字</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'小明'</span>);</div><div class="line">stu1.sayHi(); <span class="comment">// Hello, I am 小明!</span></div><div class="line"><span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student(<span class="string">'小红'</span>);</div><div class="line">stu1.sayHi === stu2.sayHi; <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>ECMAScript 仅支持实现继承，不支持接口继承。而继承方法有如下几种：</p>
<h4 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h4><p>原型链的概念如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Cat() ==&gt; Cat.prototype ==&gt; Animal.prototype ==&gt; <span class="built_in">Object</span>.prototype ==&gt; <span class="literal">null</span></div></pre></td></tr></table></figure>
<p>即新建的实例对象 <code>new Cat()</code> 继承了 <code>Cat</code> 的原型方法，进而继承了 <code>Animal</code> 的原型方法，最后继承了 <code>Object</code> 的原型方法（每一个对象实例继承的顶层对象均为 <code>Object</code> ）。</p>
<p>原型链继承的实现方式就是把 <code>Cat</code> 的原型指向一个 <code>new Animal()</code> ，于是所有的 <code>Cat</code> ( <code>cat1</code> 、<code>cat2</code> 、 <code>cat3</code> …) 就可以调用 <code>Animal</code> 的原型方法了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.species = <span class="string">'动物'</span>;</div><div class="line">&#125;</div><div class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">`I'm eating some <span class="subst">$&#123;food&#125;</span>.`</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name, color</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.color = color;</div><div class="line">&#125;</div><div class="line">Cat.prototype = &#123;</div><div class="line">	<span class="attr">master</span> : <span class="string">'Flint'</span>,</div><div class="line">	<span class="attr">sayHi</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'喵喵喵~'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Cat.prototype = <span class="keyword">new</span> Animal();</div><div class="line">Cat.prototype.constructor = Cat; <span class="comment">//构造函数的纠正</span></div><div class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>, <span class="string">'gray'</span>);</div><div class="line"><span class="built_in">console</span>.log(cat1.species); <span class="comment">// 动物</span></div><div class="line">cat1.eat(<span class="string">'fish'</span>); <span class="comment">// I'm eating some fish.</span></div></pre></td></tr></table></figure>
<p>关于构造函数的纠正概念参考了<a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="external">阮一峰老师的文章</a>。</p>
<p>原型链继承可以使父对象的原型方法与属性被子对象调用，但子对象构造函数无法向父对象构造函数传参。故实践中单纯的原型链模式很少使用。</p>
<h4 id="2-经典继承（构造函数绑定）"><a href="#2-经典继承（构造函数绑定）" class="headerlink" title="2.经典继承（构造函数绑定）"></a>2.经典继承（构造函数绑定）</h4><p>该方法将父对象的构造函数绑定在子对象上，相对于原型链继承有一个优势，即可以在子对象构造函数中向父对象构造函数传参：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">species</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.species = species;</div><div class="line">&#125;</div><div class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">`I'm eating some <span class="subst">$&#123;food&#125;</span>.`</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name, color</span>) </span>&#123;</div><div class="line">	Animal.call(<span class="keyword">this</span>, <span class="string">'猫科动物'</span>);</div><div class="line">  	<span class="comment">// Animal.apply(this, ['猫科动物']);</span></div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.color = color;</div><div class="line">&#125;</div><div class="line">Cat.prototype = &#123;</div><div class="line">	<span class="attr">master</span> : <span class="string">'Flint'</span>,</div><div class="line">	<span class="attr">sayHi</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'喵喵喵~'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">	Animal.call(<span class="keyword">this</span>, <span class="string">'犬科动物'</span>);</div><div class="line">  	<span class="comment">// Animal.apply(this, ['猫科动物']);</span></div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>, <span class="string">'gray'</span>);</div><div class="line"><span class="built_in">console</span>.log(cat1.species); <span class="comment">// 猫科动物</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> dog1 = <span class="keyword">new</span> Dog(<span class="string">'Bey'</span>, <span class="number">7</span>);</div><div class="line"><span class="built_in">console</span>.log(dog1.species); <span class="comment">// 犬科动物</span></div><div class="line"></div><div class="line">cat1.sayHi(); <span class="comment">// 喵喵喵~</span></div><div class="line">cat1.eat(<span class="string">'fish'</span>); <span class="comment">// Uncaught TypeError: cat1.eat is not a function</span></div></pre></td></tr></table></figure>
<p>可以看到，猫与狗都使用了动物 <code>Animal</code> 的构造函数，并传入了不同的参数。然而这个经典继承的缺点也很明显，即子对象无法使用父对象的原型函数与原型属性，仅可使用构造函数</p>
<h4 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3.组合继承"></a>3.组合继承</h4><p>原型链继承可以让子对象使用父对象的原型函数与属性，但不能使用父对象的构造函数，即无法继承父对象的实例方法与属性。而经典继承则反之，可以继承父对象实例方法与属性，但无法继承父对象原型方法和属性。于是取二者之长就有了组合继承法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">species</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.species = species;</div><div class="line">&#125;</div><div class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">`I'm eating some <span class="subst">$&#123;food&#125;</span>.`</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name, color</span>) </span>&#123;</div><div class="line">	Animal.call(<span class="keyword">this</span>, <span class="string">'猫科动物'</span>); <span class="comment">// 经典继承</span></div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.color = color;</div><div class="line">&#125;</div><div class="line">Cat.prototype = &#123;</div><div class="line">	<span class="attr">master</span> : <span class="string">'Flint'</span>,</div><div class="line">	<span class="attr">sayHi</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'喵喵喵~'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Cat.prototype = <span class="keyword">new</span> Animal(); <span class="comment">// 原型链继承</span></div><div class="line">Cat.prototype.constructor = Cat;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>, <span class="string">'gray'</span>);</div><div class="line"><span class="built_in">console</span>.log(cat1.species); <span class="comment">// 猫科动物</span></div><div class="line">cat1.eat(<span class="string">'fish'</span>); <span class="comment">// I'm eating some fish.</span></div></pre></td></tr></table></figure>
<p>组合继承融合了二者优点，是JavaScript目前最为常用的继承模式。</p>
<p>然而组合继承也不是没有缺点，由上例可以看到，<code>Cat</code> 在继承 <code>Animal</code> 的时候，需要调用两次父对象（ <code>Animal</code> ）的构造函数（经典继承一次，原型链继承一次）。</p>
<h4 id="4-寄生组合式继承"><a href="#4-寄生组合式继承" class="headerlink" title="4.寄生组合式继承"></a>4.寄生组合式继承</h4><p>寄生组合式继承源于原型式继承与寄生式（parasitic）继承，由JSON作者道格拉斯提出并推广，其基本模式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> prototype = <span class="built_in">Object</span>(superType.prototype); <span class="comment">// 创建对象</span></div><div class="line">	prototype.constructor = subType; <span class="comment">// 增强对象</span></div><div class="line">	subType.prototype = prototype; <span class="comment">// 指定对象</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一步是创建父对象原型的一个副本；</p>
<p>第二步是为创建的原型副本增添 <code>constructor</code> 方法，从而弥补因原型重写失去的 <code>constructor</code> ；</p>
<p>第三步是将新创建的对象（即父对象原型副本）赋给子对象原型。</p>
<blockquote>
<p>关于 <code>construcor</code> ，举个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">&gt;    <span class="keyword">this</span>.name = name;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; <span class="keyword">var</span> theTree = <span class="keyword">new</span> Tree(<span class="string">"Redwood"</span>);</div><div class="line">&gt; <span class="built_in">console</span>.log( <span class="string">"theTree.constructor is "</span> + theTree.constructor );</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>输出：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; theTree.constructor is <span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">&gt;     <span class="keyword">this</span>.name = name;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>这种继承方式的使用举例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> prototype = <span class="built_in">Object</span>(superType.prototype); <span class="comment">// 创建对象</span></div><div class="line">	prototype.constructor = subType; <span class="comment">// 增强对象</span></div><div class="line">	subType.prototype = prototype; <span class="comment">// 指定对象</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">species</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.species = species;</div><div class="line">&#125;</div><div class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">`I'm eating some <span class="subst">$&#123;food&#125;</span>.`</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name, color</span>) </span>&#123;</div><div class="line">	Animal.call(<span class="keyword">this</span>, <span class="string">'喵星人'</span>);</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.color = color;</div><div class="line">&#125;</div><div class="line">Cat.prototype = &#123;</div><div class="line">	<span class="attr">master</span> : <span class="string">'Flint'</span>,</div><div class="line">	<span class="attr">sayHi</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'喵喵喵~'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">inheritPrototype(Cat, Animal);</div><div class="line">cat1 = <span class="keyword">new</span> Cat(<span class="string">'小仙女'</span>, <span class="string">'琥珀色'</span>);</div><div class="line">cat1.eat(<span class="string">'fish'</span>); <span class="comment">// I'm eating some fish.</span></div><div class="line"><span class="built_in">console</span>.log(cat1.species); <span class="comment">// 喵星人</span></div><div class="line"></div><div class="line">Cat.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Animal.prototype.saySpecies = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.species);</div><div class="line">&#125;</div><div class="line"></div><div class="line">cat1.sayName(); <span class="comment">// 小仙女</span></div><div class="line">cat1.saySpecies(); <span class="comment">// 喵星人</span></div></pre></td></tr></table></figure>
<p>可以看到，这个例子的高效率体现在只调用了一次 <code>Animal</code> 构造函数，并且可以维持原型链保持不变，开发人员普遍认为寄生组合式继承是最理想的继承范式。</p>
<p>在<code>YUI</code> 库中这个继承范式是这样实现的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">Child, Parent</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">	F.prototype = Parent.prototype;</div><div class="line">	Child.prototype = <span class="keyword">new</span> F();</div><div class="line">	Child.prototype.constructor = Child;</div><div class="line">	Child.uber = Parent.prototype;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相较于之前的 <code>inheritPrototype</code> 方法，<code>extend</code> 利用了一个空函数来作为中介。并通过最后一行代码，在子对象上打开了一条通道，可以直接调用父对象的方法（这一行放在这里，只是为了实现继承的完备性，纯属备用性质）</p>
<h4 id="5-class继承"><a href="#5-class继承" class="headerlink" title="5.class继承"></a>5.class继承</h4><p>在ES6中新加入的 <code>class</code> 关键字使得JavaScript的继承更加简洁友好，不需要再编写复杂的原型链代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>(species) &#123;</div><div class="line">		<span class="keyword">this</span>.species = species;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	eat(food) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">`I'm eating some <span class="subst">$&#123;food&#125;</span>.`</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</div><div class="line">	<span class="keyword">constructor</span>(name, color) &#123;</div><div class="line">		<span class="keyword">super</span>(<span class="string">'喵星人'</span>);</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.color = color;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sayHi() &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'喵喵喵'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">'大毛'</span>, <span class="string">'灰色'</span>);</div><div class="line">cat1.eat(<span class="string">'meat'</span>); <span class="comment">// I'm eating some meat.</span></div><div class="line"><span class="built_in">console</span>.log(cat1.species); <span class="comment">// 喵星人</span></div></pre></td></tr></table></figure>
<h2 id="标准对象简介"><a href="#标准对象简介" class="headerlink" title="标准对象简介"></a>标准对象简介</h2><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p><code>Date</code> 对象毫无疑问是用来表示日期（date）和时间（time）的。</p>
<p><code>Date</code> 使用自UTC的1970年1月1日午夜0点开始经过的毫秒数来保存日期，可保存的日期时间范围为1970.1.1之前或之后的 <code>100 000 000</code> 年</p>
<p>方法和属性列表可查阅：</p>
<blockquote>
<p><a href="http://www.w3school.com.cn/jsref/jsref_obj_date.asp" target="_blank" rel="external">JavaScript Date 对象</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="external">MDN - Date</a></p>
</blockquote>
<p>简单使用举例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 获取当前时间 */</span></div><div class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">now; <span class="comment">// Sat Mar 04 2017 19:29:52 GMT+0800 (中国标准时间) -- 不同浏览器显示效果有差异</span></div><div class="line"><span class="built_in">Date</span>.now(); <span class="comment">// 1488627189112</span></div><div class="line"></div><div class="line"><span class="comment">/* 构造一个Date实例 */</span></div><div class="line"><span class="comment">// new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);</span></div><div class="line"><span class="keyword">var</span> ago = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1644</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">ago; <span class="comment">// Mon Feb 01 1644 00:00:00 GMT+0800 (中国标准时间)</span></div><div class="line"></div><div class="line"><span class="comment">// new Date(value);</span></div><div class="line"><span class="keyword">var</span> begin = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>); <span class="comment">// 这里传入的是毫秒数</span></div><div class="line">begin; <span class="comment">// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</span></div><div class="line"></div><div class="line"><span class="comment">// new Date(dateString);</span></div><div class="line"><span class="comment">// 1.</span></div><div class="line"><span class="keyword">var</span> war2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"8/15/1945"</span>);</div><div class="line">war2; <span class="comment">// Wed Aug 15 1945 00:00:00 GMT+0800 (中国标准时间)</span></div><div class="line"><span class="comment">// 2.</span></div><div class="line">war2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"1945-08-15T09:00:00"</span>);</div><div class="line">war2; <span class="comment">// Wed Aug 15 1945 17:00:00 GMT+0800 (中国标准时间)</span></div><div class="line">war2.getTimezoneOffset(); <span class="comment">// -480, 即与UTC时间相差分钟数</span></div><div class="line">war2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"1945-08-15T09:00:00+08:00"</span>);</div><div class="line">war2; <span class="comment">// Wed Aug 15 1945 09:00:00 GMT+0800 (中国标准时间)</span></div><div class="line"><span class="comment">// 3.</span></div><div class="line">war2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"August 15, 1945 03:24:00"</span>);</div><div class="line">war2; <span class="comment">// Wed Aug 15 1945 03:24:00 GMT+0800 (中国标准时间)</span></div><div class="line"></div><div class="line"><span class="comment">/* 时间设置与读入 */</span></div><div class="line"><span class="keyword">var</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">94</span>, <span class="number">10</span>, <span class="number">19</span>);</div><div class="line">birthday; <span class="comment">// Sat Nov 19 1994 00:00:00 GMT+0800 (中国标准时间)</span></div><div class="line">birthday.getFullYear(); <span class="comment">// 1994</span></div><div class="line">birthday.getMonth(); <span class="comment">// 10</span></div><div class="line">birthday.getDate(); <span class="comment">// 19</span></div><div class="line">birthday.getDay(); <span class="comment">// 6</span></div><div class="line"><span class="comment">// ...</span></div><div class="line">birthday.setHours(<span class="number">15</span>);</div><div class="line">birthday; <span class="comment">// Sat Nov 19 1994 15:00:00 GMT+0800 (中国标准时间)</span></div><div class="line"></div><div class="line"><span class="comment">/* 时间格式化输出 */</span></div><div class="line"><span class="comment">// 无format方法，请参考http://blog.csdn.net/vbangle/article/details/5643091</span></div></pre></td></tr></table></figure>
<p><strong>注</strong> ：有个务必要注意的坑，月份的取值范围是0~11，而星期和日期的取值范围却偏偏是1~7和1~28/29/30/31。因而，情人节是 <code>new Date(2017, 1, 14)</code> ，而不是 <code>new Date(2017, 2, 14)</code> ！！！</p>
<h3 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h3><blockquote>
<p>JS正则表达式的学习推荐这个视频：<a href="http://www.imooc.com/learn/706" target="_blank" rel="external">JavaScript正则表达式</a></p>
<p>正则表达式可视化：<a href="https://regexper.com/" target="_blank" rel="external">Regexper</a></p>
</blockquote>
<p>JavaScript 可以用类似 perl 的语法来创建一个正则表达式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> exp = <span class="regexp">/ pattern /</span> flags ;</div></pre></td></tr></table></figure>
<p>也可以用创建 <code>RegExp</code> 对象的方式来构建一个正则表达式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern, flags);</div></pre></td></tr></table></figure>
<h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p><code>flags</code> 主要有如下几个，并且支持组合使用：</p>
<ul>
<li><p><code>g</code> : 全局模式（global），将模式应用于所有字符串。若关闭则在发现第一个匹配项即停止；</p>
</li>
<li><p><code>i</code> : 忽略大小写模式（ignore）;</p>
</li>
<li><p><code>m</code> : 多行模式（multiline），开启后 <code>^</code> 和 <code>$</code> 可以匹配字符串中每一行的开始和结束（行是由 <code>\n</code> 或 <code>\r</code> 分割的），而不只是整个输入字符串的最开始和最末尾处。</p>
<p>举个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">`abc</span></div><div class="line">def</div><div class="line">ghi`;</div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\w+$/</span>;</div><div class="line">str.match(pattern); <span class="comment">// ["ghi"]</span></div><div class="line">pattern = <span class="regexp">/\w+$/m</span>;</div><div class="line">str.match(pattern); <span class="comment">// ["abc"]</span></div><div class="line">pattern = <span class="regexp">/\w+$/gm</span>;</div><div class="line">str.match(pattern); <span class="comment">// ["abc", "def", "ghi"]</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">元字符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>.</code></td>
<td style="text-align:center">匹配除了换行符 （ <code>\n</code> <code>\r</code> <code>\u2028</code> 或 <code>\u2029</code> ）之外的任意<strong>单个</strong>字符</td>
</tr>
<tr>
<td style="text-align:center"><code>\d</code></td>
<td style="text-align:center">匹配任意一个数字字符，等价于 <code>[0-9]</code></td>
</tr>
<tr>
<td style="text-align:center"><code>\w</code></td>
<td style="text-align:center">匹配任意来一个字母或数字字符，以及下划线。等价于 <code>[A-Za-z0-9_]</code></td>
</tr>
<tr>
<td style="text-align:center"><code>\s</code></td>
<td style="text-align:center">匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格</td>
</tr>
<tr>
<td style="text-align:center"><code>\b</code></td>
<td style="text-align:center">匹配单词边界，例如，/\bno/ 匹配 “at noon” 中的 “no”</td>
</tr>
</tbody>
</table>
</div>
<p>以上元字符若改为大写则表示匹配一个不是该元字符的字符（例如 <code>\D</code> 表示一个非数字字符）。</p>
<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><ul>
<li><code>[xyz]</code> : 表示一个字符集合。匹配集合中的任意一个字符。也可以使用连字符 <code>-</code> 指定一个范围，如 <code>[0-9]</code> 表示 <code>[0123456789]</code> ，<code>[a-d]</code> 表示 <code>[abcd]</code> 。</li>
<li><code>[^xyz]</code> : 表示一个字符集合的非集合。匹配不在集合中的任意一个字符。</li>
</ul>
<h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">量词</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>n+</code></td>
<td style="text-align:center">匹配前面的模式一次或多次，等价于 <code>n{1,}</code></td>
</tr>
<tr>
<td style="text-align:center"><code>n*</code></td>
<td style="text-align:center">匹配前面的模式零次或多次，等价于 <code>n{0,}</code></td>
</tr>
<tr>
<td style="text-align:center"><code>n?</code></td>
<td style="text-align:center">匹配前面的模式零次或一次</td>
</tr>
<tr>
<td style="text-align:center"><code>n{x}</code></td>
<td style="text-align:center">匹配前面的模式 <code>x</code> 次</td>
</tr>
<tr>
<td style="text-align:center"><code>n{x,}</code></td>
<td style="text-align:center">匹配前面的模式至少 <code>x</code> 次</td>
</tr>
<tr>
<td style="text-align:center"><code>n{x,y}</code></td>
<td style="text-align:center">匹配前面的模式至少 <code>x</code> 次，至多 <code>y</code> 次</td>
</tr>
<tr>
<td style="text-align:center"><code>?=n</code></td>
<td style="text-align:center">匹配一个紧接指定模式 <code>n</code> 的字符串</td>
</tr>
<tr>
<td style="text-align:center"><code>n$</code></td>
<td style="text-align:center">匹配一个结尾为 <code>n</code> 的字符串</td>
</tr>
<tr>
<td style="text-align:center"><code>^n</code></td>
<td style="text-align:center">匹配一个开头为 <code>n</code> 的字符串</td>
</tr>
</tbody>
</table>
</div>
<h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>用 <code>()</code> 可以达到分组的功能，使量词作用于分组，而不是只是紧跟的单个字符。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'a1b2c3d4'</span>.match(<span class="regexp">/[a-z]\d&#123;3&#125;/g</span>); <span class="comment">// null</span></div><div class="line"><span class="string">'a1b2c3d4'</span>.match(<span class="regexp">/([a-z]\d)&#123;3&#125;/g</span>); <span class="comment">// ["a1b2c3"]</span></div></pre></td></tr></table></figure>
<p>分组还可以用于反向引用，这是正则表达式中很重要的一个概念。</p>
<p>所谓反向引用，即以变量的形式来替换源字符串中的匹配项。</p>
<p>看个例子：</p>
<blockquote>
<p>将“年-月-日”的日期形式替换为“月/日/年”的形式</p>
<p>如：2017-03-04 ==&gt; 03/04/2017</p>
</blockquote>
<p>利用反向引用来实现替换：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/g</span>;</div><div class="line"><span class="string">"2017-03-04"</span>.replace(pattern, <span class="string">'$2/$3/$1'</span>); <span class="comment">// "03/04/2017"</span></div><div class="line"><span class="string">"1994-11-19"</span>.replace(pattern, <span class="string">'$2/$3/$1'</span>); <span class="comment">// "11/19/1994"</span></div><div class="line"><span class="comment">// x-x-x ==&gt; x年x月x日</span></div><div class="line"><span class="string">"2008-08-08"</span>.replace(pattern, <span class="string">'$1年$2月$3日'</span>); <span class="comment">// "2008年08月08日"</span></div></pre></td></tr></table></figure>
<h4 id="RegExp-的方法"><a href="#RegExp-的方法" class="headerlink" title="RegExp 的方法"></a>RegExp 的方法</h4><ul>
<li><p><code>test()</code> : 检测一个字符串是否匹配某个模式。如果字符串中有匹配项返回 true ，否则返回 false。不过需要注意的一点是一直向前匹配，对于同一个RegExp对象执行多次，其 <code>lastIndex</code> 属性，即上一次匹配到的最后索引（非全局模式不生效）可能会一直更新，故执行 <code>test()</code> 方法的RegExp对象最好不要开启全局模式g。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\w/g</span>;</div><div class="line">pattern.test(<span class="string">'ab'</span>); <span class="comment">// true</span></div><div class="line">pattern.test(<span class="string">'ab'</span>); <span class="comment">// true</span></div><div class="line">pattern.test(<span class="string">'ab'</span>); <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> (pattern.test(<span class="string">'NBA'</span>)) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'last index is '</span> + pattern.lastIndex);</div><div class="line">&#125;</div><div class="line"><span class="comment">// last index is 1</span></div><div class="line"><span class="comment">// last index is 2</span></div><div class="line"><span class="comment">// last index is 3</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>exec()</code> : 用于检索字符串中的正则表达式的匹配。返回一个数组，其中存放匹配的结果数组，数组第一项是匹配项，后续项是匹配项中的分组。如果未找到匹配，则返回值为 <code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/\w(\d)(\w)/</span>;</div><div class="line"><span class="keyword">var</span> patt2 = <span class="regexp">/\w(\d)(\w)/g</span>;</div><div class="line"><span class="keyword">var</span> str = <span class="string">'a1Ab2Bc3Cd4De5E'</span>;</div><div class="line"></div><div class="line">patt1.exec(str); <span class="comment">// ["a1A", "1", "A"]</span></div><div class="line">patt1.exec(str); <span class="comment">// ["a1A", "1", "A"]</span></div><div class="line">patt1.exec(str); <span class="comment">// ["a1A", "1", "A"]</span></div><div class="line"></div><div class="line">patt2.exec(str); <span class="comment">// ["a1A", "1", "A"]</span></div><div class="line">patt2.exec(str); <span class="comment">// ["b2B", "2", "B"]</span></div><div class="line">patt2.exec(str); <span class="comment">// ["c3C", "3", "C"]</span></div><div class="line">patt2.exec(str); <span class="comment">// ["d4D", "4", "D"]</span></div><div class="line">patt2.exec(str); <span class="comment">// ["e5E", "5", "E"]</span></div><div class="line">patt2.exec(str); <span class="comment">// null</span></div><div class="line">patt2.exec(str); <span class="comment">// ["a1A", "1", "A"]</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="支持正则表达式的String方法"><a href="#支持正则表达式的String方法" class="headerlink" title="支持正则表达式的String方法"></a>支持正则表达式的String方法</h4><ul>
<li><code>search()</code></li>
<li><code>match()</code></li>
<li><code>replace()</code></li>
<li><code>split()</code></li>
</ul>
<h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>直接查阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math" target="_blank" rel="external">MDN - Math</a> 即可。</p>
<p>这里贴一点JavaScript生成随机数的办法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回一个大于等于0，小于1的伪随机数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回一个介于min和max之间的随机数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomArbitrary</span>(<span class="params">min, max</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() * (max - min) + min;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回一个介于min和max之间的整型随机数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomInt</span>(<span class="params">min, max</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>) + min);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>方法就两个：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse" target="_blank" rel="external"><code>JSON.parse()</code></a> : 解析JSON字符串, 可以选择改变前面解析后的值及其属性，然后返回解析的值。</li>
</ul>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="external"><code>JSON.stringify()</code></a> : 返回指定值的 JSON 字符串，可以自定义只包含某些特定的属性或替换属性值。</li>
</ul>
<p>后续用到再写吧。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习笔记02（Map与Set、函数）]]></title>
      <url>https://flintx.github.io/2017/02/24/learnjs-02/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考 &amp; 学习：</p>
<p><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖老师的JavaScript教程</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference" target="_blank" rel="external">JavaScript 参考文档</a><br><a href="http://www.w3school.com.cn/js/index.asp" target="_blank" rel="external">W3School JavaScript 教程</a></p>
<p>由衷感谢这些资料的提供者与撰写者！</p>
</blockquote>
<a id="more"></a>
<h2 id="Map-与-Set"><a href="#Map-与-Set" class="headerlink" title="Map 与 Set"></a>Map 与 Set</h2><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote>
<p>JavaScript的默认对象表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组键值对。</p>
<p>但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。</p>
<p>为了解决这个问题，最新的ES6规范引入了新的数据类型<code>Map</code>。</p>
</blockquote>
<p><code>Map</code>实例的主要属性包括<code>size</code>一个，而不是<code>length</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'No.1'</span>, <span class="string">'Alice'</span>], [<span class="string">'No.2'</span>, <span class="string">'Bob'</span>], [<span class="string">'No.3'</span>, <span class="string">'Candy'</span>]]);</div><div class="line"><span class="built_in">console</span>.log(m); <span class="comment">// Map &#123;"No.1" =&gt; "Alice", "No.2" =&gt; "Bob", "No.3" =&gt; "Candy"&#125;</span></div><div class="line"><span class="built_in">console</span>.log(m.size); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p><code>Map</code>实例的主要方法有：</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/clear" target="_blank" rel="external"><code>Map.prototype.clear()</code></a></p>
<p>移除<code>Map</code>对象的所有键/值对 。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/delete" target="_blank" rel="external"><code>Map.prototype.delete(key)</code></a></p>
<p>移除任何与键相关联的值，并且返回该值，该值在之前会被<code>Map.prototype.has(key)</code>返回为<code>true</code>。之后再调用<code>Map.prototype.has(key)</code>会返回<code>false</code>。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/entries" target="_blank" rel="external"><code>Map.prototype.entries()</code></a></p>
<p>返回一个新的 <code>Iterator</code> 对象，它按插入顺序包含了<code>Map</code>对象中每个元素的 <strong>[key, value]</strong> <strong>数组</strong>。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach" target="_blank" rel="external"><code>Map.prototype.forEach(callbackFn, thisArg)</code></a></p>
<p>按插入顺序，为 <code>Map</code>对象里的每一键值对调用一次<code>callbackFn</code>函数。如果为<code>forEach</code>提供了<code>thisArg</code>，它将在每次回调中作为<code>this</code>值。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/get" target="_blank" rel="external"><code>Map.prototype.get(key)</code></a></p>
<p>返回键对应的值，如果不存在，则返回<code>undefined</code>。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/has" target="_blank" rel="external"><code>Map.prototype.has(key)</code></a></p>
<p>返回一个布尔值，表示<code>Map</code>实例是否包含键对应的值。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/keys" target="_blank" rel="external"><code>Map.prototype.keys()</code></a></p>
<p>返回一个新的 <code>Iterator</code>对象， 它按插入顺序包含了Map对象中每个元素的<strong>键 </strong>。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/set" target="_blank" rel="external"><code>Map.prototype.set(key, value)</code></a></p>
<p>设置<code>Map</code>对象中键的值。返回该<code>Map</code>对象。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/values" target="_blank" rel="external"><code>Map.prototype.values()</code></a></p>
<p>返回一个新的<code>Iterator</code>对象，它按插入顺序包含了<code>Map</code>对象中每个元素的<strong>值</strong> 。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"></div><div class="line"><span class="keyword">var</span> keyNum = <span class="number">1024</span>,</div><div class="line">	keyStr = <span class="string">'This is a string.'</span>,</div><div class="line">	keyObj = &#123;&#125;,</div><div class="line">	keyFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 添加键key</span></div><div class="line">m.set(keyNum, <span class="string">'数值键1024对应的值'</span>);</div><div class="line">m.set(keyStr, <span class="string">"字符串键'This is a string.'对应的值"</span>);</div><div class="line">m.set(keyObj, <span class="string">'对象键keyObj对应的值'</span>);</div><div class="line">m.set(keyFun, <span class="string">'函数键keyFun对应的值'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(m); </div><div class="line"><span class="comment">// Map &#123;</span></div><div class="line"><span class="comment">// 	1024 =&gt; "数值键1024对应的值", </span></div><div class="line"><span class="comment">// 	"This is a string." =&gt; "字符串键'This is a string.'对应的值", </span></div><div class="line"><span class="comment">// 	Object &#123;&#125; =&gt; "对象键keyObj对应的值", </span></div><div class="line"><span class="comment">// 	function =&gt; "函数键keyFun对应的值"</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="built_in">console</span>.log(m.size);</div><div class="line"><span class="comment">// 4</span></div><div class="line"></div><div class="line"><span class="comment">// 读取值value</span></div><div class="line"><span class="built_in">console</span>.log(m.get(keyNum)); <span class="comment">// 数值键1024对应的值</span></div><div class="line"><span class="built_in">console</span>.log(m.get(keyStr)); <span class="comment">// 字符串键'This is a string.'串对应的值</span></div><div class="line"><span class="built_in">console</span>.log(m.get(keyObj)); <span class="comment">// 对象键keyObj对应的值</span></div><div class="line"><span class="built_in">console</span>.log(m.get(keyFun)); <span class="comment">// 函数键keyFun对应的值</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(m.get(<span class="number">1024</span>)); <span class="comment">// 数值键1024对应的值</span></div><div class="line"><span class="built_in">console</span>.log(m.get(<span class="string">'This is a string.'</span>)); <span class="comment">// 字符串键'This is a string.'串对应的值</span></div><div class="line"><span class="built_in">console</span>.log(m.get(&#123;&#125;)); <span class="comment">// undefined, 因为keyObj !== &#123;&#125;</span></div><div class="line"><span class="built_in">console</span>.log(m.get(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)); <span class="comment">// undefined, 因为keyFunc !== function () &#123;&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 通过Array来构造Map</span></div><div class="line"><span class="keyword">var</span> arr = [[<span class="string">"key1"</span>, <span class="string">"value1"</span>], [<span class="string">"key2"</span>, <span class="string">"value2"</span>]];</div><div class="line"><span class="keyword">var</span> aMap = <span class="keyword">new</span> <span class="built_in">Map</span>(arr);</div><div class="line"><span class="built_in">console</span>.log(aMap.get(<span class="string">'key1'</span>)) <span class="comment">// 'value1';</span></div><div class="line"></div><div class="line"><span class="comment">// 一些迭代技巧</span></div><div class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">myMap.set(<span class="number">0</span>, <span class="string">"zero"</span>);</div><div class="line">myMap.set(<span class="number">1</span>, <span class="string">"one"</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> myMap) &#123;</div><div class="line">  	<span class="built_in">console</span>.log(key + <span class="string">" = "</span> + value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 将会显示两个log。一个是"0 = zero"另一个是"1 = one"</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> myMap.keys()) &#123;</div><div class="line">  	<span class="built_in">console</span>.log(key);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 将会显示两个log。 一个是 "0" 另一个是 "1"</span></div><div class="line"><span class="comment">// keys()方法返回一个可迭代对象Iterator，包含了Map对象中每个元素的键</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> myMap.values()) &#123;</div><div class="line">  	<span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 将会显示两个log。 一个是 "zero" 另一个是 "one"</span></div><div class="line"><span class="comment">// values()方法返回一个可迭代对象Iterator，包含了Map对象中每个元素的值</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> myMap.entries()) &#123;</div><div class="line">  	<span class="built_in">console</span>.log(key + <span class="string">" = "</span> + value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 将会显示两个log。 一个是 "0 = zero" 另一个是 "1 = one"</span></div><div class="line"><span class="comment">// entries()方法以键值对形式返回一个可迭代对象Iterator</span></div><div class="line"></div><div class="line"><span class="comment">// 移除</span></div><div class="line">myMap.delete(<span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(myMap); <span class="comment">// Map &#123;0 =&gt; "zero"&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 清空</span></div><div class="line">myMap.clear();</div><div class="line"><span class="built_in">console</span>.log(myMap); <span class="comment">// Map &#123;&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 判断是否存在某个键</span></div><div class="line">myMap.set(<span class="number">0</span>, <span class="string">"zero"</span>);</div><div class="line">myMap.set(<span class="number">1</span>, <span class="string">"one"</span>);</div><div class="line"><span class="built_in">console</span>.log(myMap.has(<span class="number">0</span>)); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(myMap.has(<span class="number">2</span>)); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><blockquote>
<p><code>Set</code>对象是值的集合，你可以按照插入的顺序迭代它的元素。 <code>Set</code>中的元素只会出现一次，即 <code>Set</code> 中的元素是唯一的。</p>
</blockquote>
<p><code>set</code>对象中元素是唯一的，因而需要判断两个元素是否相等。判断相等的算法略不同于<code>===</code>运算符，其中<code>+0</code>与<code>-0</code>是被视为不同的元素，尽管<code>+0 === -0</code>为<code>true</code>（<code>ECMAScript6</code>中这点已修改，<code>+0</code>与<code>-0</code>已被视为相同元素）。除此之外，<code>NaN</code>与<code>NaN</code>被视为相同元素，尽管<code>NaN !== NaN</code>为<code>true</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">s.add(+<span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(s); <span class="comment">// Set &#123;0&#125;</span></div><div class="line">s.add(<span class="number">-0</span>);</div><div class="line"><span class="built_in">console</span>.log(s); <span class="comment">// Set &#123;0&#125;   Chrome 56.0+</span></div><div class="line">s.add(<span class="literal">NaN</span>);</div><div class="line"><span class="built_in">console</span>.log(s); <span class="comment">// Set &#123;0, NaN&#125;</span></div><div class="line">s.add(<span class="literal">NaN</span>);</div><div class="line"><span class="built_in">console</span>.log(s); <span class="comment">// Set &#123;0, NaN&#125;</span></div></pre></td></tr></table></figure>
<p>同<code>Map</code>实例一样，<code>set</code>实例的主要属性包括<code>size</code>一个，而不是<code>length</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1.1</span>, <span class="number">1.10</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="string">'3'</span>]); <span class="comment">// 通过Array构造一个Set</span></div><div class="line"><span class="built_in">console</span>.log(aSet); <span class="comment">// Set &#123;1, 2, 3, 1.1, undefined, NaN, '3'&#125;</span></div><div class="line"><span class="built_in">console</span>.log(aSet.size); <span class="comment">// 7</span></div></pre></td></tr></table></figure>
<p><code>Set</code>实例包括如下主要方法：</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/add" target="_blank" rel="external"><code>Set.prototype.add(value)</code></a></p>
<p>在<code>Set</code>对象尾部添加一个元素。返回该<code>Set</code>对象。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/clear" target="_blank" rel="external"><code>Set.prototype.clear()</code></a></p>
<p>移除<code>Set</code>对象内的所有元素。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/delete" target="_blank" rel="external"><code>Set.prototype.delete(value)</code></a></p>
<p>移除<code>Set</code>的中与这个值相等的元素，返回<code>Set.prototype.has(value)</code>在这个操作前会返回的值（即如果该元素存在，返回<code>true</code>，否则返回<code>false</code>）。<code>Set.prototype.has(value)</code>在此后会返回<code>false</code></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/entries" target="_blank" rel="external"><code>Set.prototype.entries()</code></a></p>
<p>返回一个新的迭代器对象，该对象包含<code>Set</code>对象中的<strong>按插入顺序排列的</strong>所有元素的值的[value, value]数组。为了使这个方法和<code>Map</code>对象保持相似，不过每个值的键和值相等。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach" target="_blank" rel="external"><code>Set.prototype.forEach(callbackFn, thisArg)</code></a></p>
<p>按照插入顺序，为<code>Set</code>对象中的每一个值调用一次<code>callBackFn</code>。如果提供了<code>thisArg</code>参数，回调中的<code>this</code>会是这个参数。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/has" target="_blank" rel="external"><code>Set.prototype.has(value)</code></a></p>
<p>返回一个布尔值，表示该值在<code>Set</code>中存在与否。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/keys" target="_blank" rel="external"><code>Set.prototype.keys()</code></a></p>
<p>与<code>values()</code>方法相同，返回一个新的迭代器对象，该对象包含<code>Set</code>对象中的<strong>按插入顺序排列的</strong>所有元素的值。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/values" target="_blank" rel="external"><code>Set.prototype.values()</code></a></p>
<p>返回一个新的迭代器对象，该对象包含<code>Set</code>对象中的<strong>按插入顺序排列的</strong>所有元素的值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用Set对象</span></div><div class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line"><span class="keyword">var</span> undefinedVar;</div><div class="line">mySet.add(<span class="number">1</span>);</div><div class="line">mySet.add(<span class="literal">true</span>);</div><div class="line">mySet.add(<span class="string">'a string.'</span>);</div><div class="line">mySet.add(undefinedVar);</div><div class="line">mySet.add(<span class="number">5</span>);</div><div class="line"><span class="built_in">console</span>.log(mySet); <span class="comment">// Set &#123;1, true, "a string.", undefined, 5&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 判断Set中是否存在某元素</span></div><div class="line">mySet.has(<span class="built_in">Math</span>.sqrt(<span class="number">25</span>)); <span class="comment">// true</span></div><div class="line">mySet.has(<span class="string">'A string.'</span>.toLowerCase()); <span class="comment">// true</span></div><div class="line">mySet.has(<span class="literal">undefined</span>); <span class="comment">// true</span></div><div class="line">mySet.has(<span class="number">0.2</span> + <span class="number">0.1</span> === <span class="number">0.3</span>); <span class="comment">// false, 表达式结果为false, mySet里没有false元素，故返回false</span></div><div class="line"></div><div class="line"><span class="comment">// 删除Set中的元素</span></div><div class="line">mySet.delete(<span class="number">5</span>);</div><div class="line">mySet.has(<span class="number">5</span>); <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历Set中的元素</span></div><div class="line"><span class="comment">// for .. of 方式</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> mySet) &#123;</div><div class="line">	<span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1, true, 'a string.', undefined</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> mySet.keys()) &#123;</div><div class="line">	<span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1, true, 'a string.', undefined</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> mySet.values()) &#123;</div><div class="line">	<span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1, true, 'a string.', undefined</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> mySet.entries()) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> ==&gt; <span class="subst">$&#123;value&#125;</span>`</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1 ==&gt; 1, true == &gt; true, 'a string.' ==&gt; 'a string.', undefined ==&gt; undefined</span></div><div class="line"><span class="comment">// 键与值相等</span></div><div class="line"></div><div class="line"><span class="comment">// forEach() 方法</span></div><div class="line">mySet.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(value);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 1, true, 'a string.', undefined</span></div></pre></td></tr></table></figure>
<h2 id="JavaScript中的函数"><a href="#JavaScript中的函数" class="headerlink" title="JavaScript中的函数"></a>JavaScript中的函数</h2><h3 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h3><ul>
<li><p>方式一（面向过程/函数声明风格）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a + b; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>方式二（函数表达式风格）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a + b; </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>方式三（Function构造器，不推荐）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"return a + b;"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>此外还有函数生成器、箭头函数表达式等函数定义方式，属于JS较新特性或高级函数技巧，后续再加以学习。</p>
</li>
</ul>
<h3 id="arguments关键字与rest参数"><a href="#arguments关键字与rest参数" class="headerlink" title="arguments关键字与rest参数"></a>arguments关键字与rest参数</h3><p>调用函数时，JavaScript允许传入任意个参数而不影响调用，即使传入参数多于或少于定义参数也没有问题（多余参数会被忽略）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.max(); <span class="comment">// -Infinity</span></div><div class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>); <span class="comment">// 1</span></div><div class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 2</span></div><div class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 3</span></div><div class="line"><span class="built_in">Math</span>.max([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// NaN</span></div><div class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>, <span class="string">'a string'</span>); <span class="comment">// NaN</span></div></pre></td></tr></table></figure>
<p>除了任意传参之外，JavaScript还提供了与这个特性配套的<code>arguments</code>关键字对象与<code>rest</code>参数。</p>
<ul>
<li><p><code>arguments</code> 只在函数内部起作用，通过 <code>arguments</code> 可获得调用者传入函数的所有参数。</p>
<p><code>arguments</code> 与 <code>Array</code> 比较相似，但不等于 <code>Array</code> ，只具有 <code>length</code> 属性，但可以通过一些方式转换为 <code>Array</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mySum</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> res = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">		res += <span class="built_in">arguments</span>[i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line">mySum(); <span class="comment">// 0</span></div><div class="line">mySum(<span class="number">1</span>); <span class="comment">// 1</span></div><div class="line">mySum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></div><div class="line">mySum(<span class="string">' is '</span>, <span class="string">'zero.'</span>); <span class="comment">// "0 is zero."</span></div><div class="line">mySum(<span class="literal">Infinity</span>, -<span class="literal">Infinity</span>); <span class="comment">// NaN</span></div><div class="line"></div><div class="line"><span class="comment">// 通过arguments连接多个字符串</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myConcat</span>(<span class="params">separator</span>) </span>&#123;</div><div class="line">  	<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">	<span class="keyword">return</span> args.join(separator);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myConcat(<span class="string">", "</span>, <span class="string">"red"</span>, <span class="string">"orange"</span>, <span class="string">"blue"</span>); <span class="comment">// "red, orange, blue"</span></div><div class="line">myConcat(<span class="string">"; "</span>, <span class="string">"elephant"</span>, <span class="string">"giraffe"</span>, <span class="string">"lion"</span>, <span class="string">"cheetah"</span>); <span class="comment">// "elephant; giraffe; lion; cheetah"</span></div><div class="line"></div><div class="line"><span class="comment">// 将arguments转化为Array</span></div><div class="line"><span class="comment">// 通过 from() 方法</span></div><div class="line"><span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</div><div class="line"><span class="comment">// 通过spread运算符</span></div><div class="line"><span class="keyword">var</span> args = [...arguments];</div></pre></td></tr></table></figure>
<p><code>arguments</code> 值永远与对应命名参数的值保持同步：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">	<span class="built_in">arguments</span>[<span class="number">1</span>] = <span class="number">10</span>;</div><div class="line">	<span class="built_in">console</span>.log(num1 + num2);</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 11</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p><code>rest</code> 参数在ES6标准中被引入，若传入参数多于定义参数，多余的参数将以数组形式交给<code>rest</code>，若少于或等于，则 <code>rest</code> 为空数组.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(a);</div><div class="line">	<span class="built_in">console</span>.log(b);</div><div class="line">	<span class="built_in">console</span>.log(rest);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fun1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// [3, 4, 5]</span></div><div class="line">fun1(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// []</span></div><div class="line">fun1(<span class="number">1</span>);</div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// undefined</span></div><div class="line"><span class="comment">// []</span></div><div class="line"></div><div class="line"><span class="comment">// 利用rest，将传入参数返回为一个排序后的数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortRestArgs</span>(<span class="params">...theArgs</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> sortedArgs = theArgs.sort();</div><div class="line">	<span class="built_in">console</span>.log(sortedArgs);</div><div class="line">&#125;</div><div class="line"></div><div class="line">sortRestArgs(<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>); <span class="comment">// [1, 3, 5, 7]</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="作用域问题"><a href="#作用域问题" class="headerlink" title="作用域问题"></a>作用域问题</h3><ul>
<li><p>一般变量的作用域为整个函数体，在函数体外不可引用该变量，并且不同函数内部的同名变量互相独立，互不影响；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line">	x += <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">x += <span class="number">2</span>; <span class="comment">// ReferenceError: x is not defined</span></div></pre></td></tr></table></figure>
</li>
<li><p>全局变量/函数均绑定在 <code>window</code> 对象上；</p>
</li>
<li><p>内部函数可以访问外部函数定义的变量。若内部函数和外部函数的变量名重名，则使用内部函数变量（<strong>由内向外</strong>原则）；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> aVar = <span class="number">100</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">inFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> aVar = <span class="number">200</span>;</div><div class="line">		<span class="built_in">console</span>.log(aVar);</div><div class="line">	&#125;</div><div class="line">	inFun();</div><div class="line">	<span class="built_in">console</span>.log(aVar);</div><div class="line">&#125;</div><div class="line"></div><div class="line">outFun(); <span class="comment">// 200 100</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>变量提升，JS的一个坑。。JavaScript会把整个函数体内部的所有变量提升到顶部进行声明，即以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">	x += <span class="number">10</span>;</div><div class="line">	<span class="keyword">var</span> y = <span class="number">7</span>;</div><div class="line">	y += <span class="number">20</span>;</div><div class="line">	<span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 以上代码等效于</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> y;</div><div class="line">	<span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">	x += <span class="number">10</span>;</div><div class="line">	y = <span class="number">7</span>;</div><div class="line">	y += <span class="number">20</span>;</div><div class="line">	<span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就会导致一个变量可能在声明前就已被使用，但程序可以照常运行，并不符合使用前必须声明的语言规则。因而最好严格遵守 <strong>”在函数内部首先申明所有变量”</strong> 这一规则。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这段代码由于变量提升的特性可以正常运行，但这是不符合规则的bad code</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	<span class="comment">// var y; y的定义被提升到了此处</span></div><div class="line">	<span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">	x += <span class="number">10</span>;</div><div class="line">	y = <span class="number">7</span>; <span class="comment">// 此时按照代码文本，y尚未定义；然而实际上y的定义被提升到了开头处</span></div><div class="line">	<span class="keyword">var</span> y;</div><div class="line">	y += <span class="number">20</span>;</div><div class="line">	<span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line">myFun(); <span class="comment">// 47</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>若一个变量的作用范围仅为类似 <code>for</code> 、<code>while</code> 循环内部的局部范围，则此作用范围称之为 <code>局部作用域</code> / <code>块级作用域</code> ，然而 <code>var</code> 定义的变量范围为函数内部，于局部范围外依然可以引用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">		;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(i); <span class="comment">// 循环外部依然可用</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 以上代码等价为:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	<span class="keyword">var</span> i;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">		;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line">myFun(); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p>为了解决这个问题，ES6引入了 <code>let</code> 关键字来用以声明只具备块级作用域的局部变量：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">		;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(i); <span class="comment">// i 已不可使用</span></div><div class="line">&#125;</div><div class="line">myFun(); <span class="comment">// ReferenceError: i is not defined</span></div></pre></td></tr></table></figure>
<p>故在新标准下，局部变量应使用 <code>let</code> 来声明。</p>
</li>
<li><p>与 <code>let</code> 关键字一起，ES6标准还引入了用于声明 <strong>常量</strong> 的 <code>const</code> 关键字，在此之前，常量只能通过全字母大写来人为定义，并不能限制程序对于一个常量的修改行为。<code>const</code> 定义的变量不可以修改，而且必须初始化。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 过去</span></div><div class="line"><span class="keyword">var</span> PI = <span class="number">3.1415926</span>;</div><div class="line">PI += <span class="number">1.0</span>; <span class="comment">// OK</span></div><div class="line"><span class="comment">// 现在</span></div><div class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</div><div class="line">PI += <span class="number">1.0</span>; <span class="comment">// TypeError: Assignment to constant variable.</span></div></pre></td></tr></table></figure>
<p><strong>注</strong> ：<code>const</code> 定义的常量不可用 <code>delete</code> 删除。</p>
</li>
</ul>
<h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p><code>this</code> 关键字是什么？</p>
<p>答：即编程语言中的“我”的概念。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Flint = &#123;</div><div class="line">  	<span class="attr">age</span> : <span class="number">22</span>,</div><div class="line">  	<span class="attr">sayThis</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      	<span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;;</div><div class="line">Flint.sayThis(); <span class="comment">// Object &#123;age: 22&#125;</span></div></pre></td></tr></table></figure>
<p> <code>this</code> 指向 <code>Flint</code> ，即调用 <code>sayThis</code> 方法的“我”。</p>
<p>鉴于这又是JS的一个大坑（孔乙己：JavaScript ES6的函数有六种调用方式你知道吗？）更多的概念自己也没完全理解，感觉可以另写一篇文章来说明了，于是扔链接跑路=_=</p>
<p>关于对 <code>this</code> 以及通过 <code>apply()</code>，<code>call()</code> 方法来调用函数的更深入理解还是查看以下文档吧：</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external">MDN - this 关键字</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/23804247" target="_blank" rel="external">this 的值到底是什么？一次说清楚</a></p>
<p><a href="http://www.cnblogs.com/lisha-better/p/5684844.html" target="_blank" rel="external">JS中this关键字详解</a></p>
</blockquote>
<p><strong>ps.</strong> 听说记住这三点就不会被坑了：</p>
<blockquote>
<ol>
<li>当函数作为对象的方法调用时，<code>this</code> 就是该对象;</li>
<li>当函数作为单纯函数调用时，严格模式下，<code>this</code> 是 <code>undefined</code> ，非严格模式下是全局对象，浏览器中就是 <code>window</code> ;</li>
<li><code>this</code> 不是变量，嵌套函数中的<code>this</code> 不会从外层继承 <code>this</code> 值！</li>
</ol>
</blockquote>
<p>附：利用 <code>apply()</code> 统计方法调用次数（函数装饰器的简单使用）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> oldParseInt = <span class="built_in">parseInt</span>; <span class="comment">// 保存原函数</span></div><div class="line"></div><div class="line"><span class="built_in">window</span>.parseInt = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    count += <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> oldParseInt.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>); <span class="comment">// 调用原函数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 测试:</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>);</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'20'</span>);</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'30'</span>);</div><div class="line">count; <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>高阶函数又称算子或泛函，在计算机科学被定义为中至少满足下列一个条件的函数：</p>
<blockquote>
<ol>
<li>接受一个或多个函数作为输入；</li>
<li>输出一个函数。</li>
</ol>
</blockquote>
<p>一个简单的高阶函数例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, fun</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> fun(a) + fun(b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">sum(<span class="number">1</span>, <span class="number">-1</span>, <span class="built_in">Math</span>.abs); <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addOne</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> x + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sum(<span class="number">0</span>, <span class="number">0</span>, addOne); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h4 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h4><ul>
<li><p>在JavaScript中，<code>Array.prototype.map()</code> 方法返回一个由原 <code>Array</code> 中的每个元素调用指定方法后的返回值组成的新 <code>Array</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 计算Array中每个元素的平方根</span></div><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>];</div><div class="line"><span class="keyword">var</span> roots = numbers.map(<span class="built_in">Math</span>.sqrt); </div><div class="line">roots; <span class="comment">// [1, 2, 3, 4]</span></div><div class="line"></div><div class="line"><span class="comment">// 打印字符串中每个字符的ASCII码值</span></div><div class="line"><span class="keyword">var</span> map = <span class="built_in">Array</span>.prototype.map;</div><div class="line"><span class="keyword">var</span> arr = map.call(<span class="string">"Hello World"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> c.charCodeAt(<span class="number">0</span>);</div><div class="line">&#125;);</div><div class="line">arr; <span class="comment">// [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]</span></div><div class="line"></div><div class="line"><span class="comment">// 反转字符串</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'12345'</span>;</div><div class="line"><span class="built_in">Array</span>.prototype.map.call(str, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> c;</div><div class="line">&#125;).reverse().join(<span class="string">''</span>); <span class="comment">// "54321"</span></div><div class="line"></div><div class="line"><span class="comment">// 将不规范英文名变为首字母大写其余字母小写的形式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalize</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> s.toLowerCase()[<span class="number">0</span>].toUpperCase() + s.slice(<span class="number">1</span>, s.length).toLowerCase();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> arr.map(f);</div><div class="line">&#125;</div><div class="line">normalize([<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>]); <span class="comment">// ["Adam", "Lisa", "Bart"]</span></div><div class="line"></div><div class="line"><span class="comment">// 传递函数有多个参数时，需要通过自定义用户函数来作为传递函数</span></div><div class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>); <span class="comment">// [1, NaN, NaN], 原因是parseInt需要还需要第二个不可忽略参数：进制</span></div><div class="line"><span class="comment">// 解决办法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myParseInt</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">parseInt</span>(x, <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(myParseInt); <span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p><code>Array.prototype.reduce()</code> 按从左到右的顺序把函数结果继续和序列的下一个元素按指定方法做累积计算。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// [x1, x2, x3, x4].reduce(f) ==&gt; f(f(f(x1, x2), x3), x4)</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a + b;</div><div class="line">&#125;); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p>直觉上 <code>reduce()</code> 只需传入一个参数，即一个传入两个参数返回一个参数的 <code>callback</code> 函数.</p>
<p>实际上该 <code>callback</code> 函数拥有4个参数：<code>accumulator</code>, <code>currentValue</code>, <code>currentIndex</code>, <code>array</code> ；而除了 <code>callback</code></p>
<p>函数这个参数外， <code>reduce()</code> 本身还有一个叫 <code>initialValue</code> 的可选参数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> initialValue = <span class="string">'alpha: '</span>;</div><div class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">accumulator, currentValue, currentIndex, array</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> accumulator + currentValue;</div><div class="line">&#125;, initialValue); <span class="comment">// "alpha: ABCD"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">call</th>
<th style="text-align:center"><code>accumulator</code></th>
<th style="text-align:center"><code>currentValue</code></th>
<th style="text-align:center"><code>currentIndex</code></th>
<th style="text-align:center"><code>array</code></th>
<th style="text-align:center"><code>return value</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">first</td>
<td style="text-align:center"><code>&#39;alpha: &#39;</code></td>
<td style="text-align:center"><code>&#39;A&#39;</code></td>
<td style="text-align:center"><code>1</code></td>
<td style="text-align:center"><code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]</code></td>
<td style="text-align:center"><code>&#39;alpha: A&#39;</code></td>
</tr>
<tr>
<td style="text-align:center">second</td>
<td style="text-align:center"><code>&#39;alpha: A&#39;</code></td>
<td style="text-align:center"><code>&#39;B&#39;</code></td>
<td style="text-align:center"><code>2</code></td>
<td style="text-align:center"><code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]</code></td>
<td style="text-align:center"><code>&#39;alpha: AB&#39;</code></td>
</tr>
<tr>
<td style="text-align:center">third</td>
<td style="text-align:center"><code>&#39;alpha: AB&#39;</code></td>
<td style="text-align:center"><code>&#39;C&#39;</code></td>
<td style="text-align:center"><code>3</code></td>
<td style="text-align:center"><code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]</code></td>
<td style="text-align:center"><code>&#39;alpha: ABC&#39;</code></td>
</tr>
<tr>
<td style="text-align:center">fourth</td>
<td style="text-align:center"><code>&#39;alpha: ABC&#39;</code></td>
<td style="text-align:center"><code>&#39;D&#39;</code></td>
<td style="text-align:center"><code>4</code></td>
<td style="text-align:center"><code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]</code></td>
<td style="text-align:center"><code>&#39;alpha: ABCD&#39;</code></td>
</tr>
</tbody>
</table>
</div>
<p>  一些 <code>reduce()</code> 的简单应用：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组扁平化</span></div><div class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce( <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a.concat(b);</div><div class="line">&#125;); <span class="comment">// [0, 1, 2, 3, 4, 5]</span></div><div class="line"></div><div class="line"><span class="comment">// 统计Array中各个值出现次数</span></div><div class="line"><span class="keyword">var</span> colors = [<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'orangr'</span>, <span class="string">'green'</span>, <span class="string">'red'</span>, <span class="string">'red'</span>, <span class="string">'blue'</span>];</div><div class="line"><span class="keyword">var</span> countedColors = colors.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">allColors, color</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (color <span class="keyword">in</span> allColors) &#123;</div><div class="line">		allColors[color]++;</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		allColors[color] = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> allColors;</div><div class="line">&#125;, &#123;&#125;);</div><div class="line">countedColors; <span class="comment">// Object &#123;blue: 2, red: 3, orangr: 1, green: 1&#125;</span></div></pre></td></tr></table></figure>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p><code>filter()</code> 方法使用指定的函数测试所有元素，并创建一个包含所有通过测试的元素的新数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将Array中的小写字母筛去</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUpper</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> c.charCodeAt(<span class="number">0</span>) &gt;= <span class="string">'A'</span>.charCodeAt(<span class="number">0</span>) &amp;&amp; c.charCodeAt(<span class="number">0</span>) &lt;= <span class="string">'Z'</span>.charCodeAt(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">[<span class="string">'A'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'D'</span>, <span class="string">'e'</span>, <span class="string">'F'</span>].filter(isUpper); <span class="comment">// ["A", "D", "F"]</span></div><div class="line"></div><div class="line"><span class="comment">// 将Array中重复元素删去</span></div><div class="line"><span class="keyword">var</span> elements = [<span class="number">3.14</span>, <span class="string">'pi'</span>, <span class="string">'e'</span>, <span class="number">2.718281828</span>, <span class="string">'e'</span>, <span class="string">'e'</span>, <span class="number">3.14</span>, <span class="number">3.1415926</span>];</div><div class="line">elements.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, self</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> self.indexOf(element) === index;</div><div class="line">&#125;); <span class="comment">// [3.14, "pi", "e", 2.718281828, 3.1415926]</span></div><div class="line"></div><div class="line"><span class="comment">// 筛素数 1 ~ 100</span></div><div class="line"><span class="keyword">var</span> num = [...Array(<span class="number">100</span>).keys()];</div><div class="line">num.filter(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">Math</span>.sqrt(x + <span class="number">0.5</span>); i++) &#123;</div><div class="line">		<span class="keyword">if</span> (x % i === <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> x !== <span class="number">1</span> &amp;&amp; x !== <span class="number">0</span>;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]</span></div></pre></td></tr></table></figure>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>和很多语言不太一样，<code>sort()</code> 方法默认排序顺序是先将数组元素转化为字符串，再根据字符串Unicode码值来排序（即字典序）。</p>
<p>因为这个默认的排序规则，新手使用 <code>sort()</code> 方法常常会遇到一些可怕的事：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">4</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">9</span>].sort(); <span class="comment">// [10, 2, 30, 4, 9] ！！！</span></div><div class="line"><span class="comment">// 数值排序在欢声笑语中打出了GG</span></div></pre></td></tr></table></figure>
<p>好在 <code>sort()</code> 方法有着高阶函数的尊严，可以自定义排序规则：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数值升序排序</span></div><div class="line">[<span class="number">4</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">9</span>].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a &gt; b;</div><div class="line">&#125;); <span class="comment">// [2, 4, 9, 10, 30]</span></div><div class="line"></div><div class="line"><span class="comment">// 数值降序排序</span></div><div class="line">[<span class="number">4</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">9</span>].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> b - a;</div><div class="line">&#125;); <span class="comment">// [30, 10, 9, 4, 2]</span></div><div class="line"></div><div class="line"><span class="comment">// 忽略字母大小写的字典序排序</span></div><div class="line"><span class="keyword">var</span> companys = [<span class="string">'Apple'</span>, <span class="string">'Facebook'</span>, <span class="string">'Microsoft'</span>, <span class="string">'cisio'</span>, <span class="string">'amazon'</span>, <span class="string">'Tecent'</span>, <span class="string">'baidu'</span>, <span class="string">'Alibaba'</span>, <span class="string">'Google'</span>];</div><div class="line">companys.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> s1 = a.toLowerCase();</div><div class="line">	<span class="keyword">var</span> s2 = b.toLowerCase();</div><div class="line">	<span class="keyword">return</span> s1 &gt; s2;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// ["Alibaba", "amazon", "Apple", "baidu", "cisio", "Facebook", "Google", "Microsoft", "Tecent"]</span></div><div class="line"></div><div class="line"><span class="comment">// 按字符串长度排序，若相等则按字典序排序</span></div><div class="line"><span class="keyword">var</span> companys = [<span class="string">'Apple'</span>, <span class="string">'Facebook'</span>, <span class="string">'Microsoft'</span>, <span class="string">'cisio'</span>, <span class="string">'amazon'</span>, <span class="string">'Tecent'</span>, <span class="string">'baidu'</span>, <span class="string">'Alibaba'</span>, <span class="string">'Google'</span>];</div><div class="line">companys.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> len1 = a.length;</div><div class="line">	<span class="keyword">var</span> len2 = b.length;</div><div class="line">	<span class="keyword">return</span> len1 &gt; len2 || (len1 === len2 &amp;&amp; a &gt; b);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// ["Apple", "baidu", "cisio", "Google", "Tecent", "amazon", "Alibaba", "Facebook", "Microsoft"]</span></div></pre></td></tr></table></figure>
<h3 id="闭包（Closure）"><a href="#闭包（Closure）" class="headerlink" title="闭包（Closure）"></a>闭包（Closure）</h3><p>一个较为直观的定义：</p>
<blockquote>
<p>闭包就是能够读取其他函数内部变量的函数</p>
</blockquote>
<p>感觉智商被掏空。。还需要多学习多学习：</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="external">MDN - 闭包</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="external">学习Javascript闭包（Closure） - 阮一峰的网络日志</a></p>
</blockquote>
<p>闭包多用来模拟其他编程语言的 <code>private</code> 属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Counter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> privateCounter = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeBy</span>(<span class="params">val</span>) </span>&#123; <span class="comment">// 实际上changeBy()方法成为私有方法</span></div><div class="line">        privateCounter += val;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">increment</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            changeBy(<span class="number">1</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">decrement</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            changeBy(<span class="number">-1</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> privateCounter;</div><div class="line">        &#125;</div><div class="line">    &#125;   </div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Counter.value()); <span class="comment">// 0</span></div><div class="line">Counter.increment();</div><div class="line">Counter.increment();</div><div class="line"><span class="built_in">console</span>.log(Counter.value()); <span class="comment">// 2</span></div><div class="line">Counter.decrement();</div><div class="line"><span class="built_in">console</span>.log(Counter.value()); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h3 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h3><p>虽然ES6才有的这货长得很像 <code>lambda</code> 函数表达式，但实际上JavaScript本来就是一门大量借鉴了函数式编程思想语言，比起其他语言半残废的 <code>lambda</code> ，JS很早就支持类似概念的匿名函数了。</p>
<p>具体使用方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(param1, param2, …, paramN) =&gt; expression</div><div class="line"><span class="comment">// or</span></div><div class="line">(param1, param2, …, paramN) =&gt; &#123; statements &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> pow = <span class="function"><span class="params">x</span> =&gt;</span> x * x;</div><div class="line">pow(<span class="number">2.5</span>); <span class="comment">// 6.25</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> sayHi = <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">'Hi!'</span>);&#125;</div><div class="line">sayHi(); <span class="comment">// "Hi"</span></div></pre></td></tr></table></figure>
<p>更多特性与使用技巧参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">MDN - Arrow Function</a></p>
<h3 id="yield-关键字-与-generator-对象"><a href="#yield-关键字-与-generator-对象" class="headerlink" title="yield 关键字 与 generator 对象"></a>yield 关键字 与 generator 对象</h3><p>这个概念之前学Python时接触过。。懒得填这个坑了，将来接触 <code>function*</code> 和 <code>AJAX</code> 再单独写文章说明吧。。</p>
<p>简单说调用 <code>generator</code> 的优势在于不立即执行并保存上次执行状态。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习笔记01（基本语法、数据类型、运算符）]]></title>
      <url>https://flintx.github.io/2017/02/23/learnjs-01/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考 &amp; 学习：</p>
<p><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖老师的JavaScript教程</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference" target="_blank" rel="external">JavaScript 参考文档</a><br><a href="http://www.w3school.com.cn/js/index.asp" target="_blank" rel="external">W3School JavaScript 教程</a></p>
<p>由衷感谢这些资料的提供者与撰写者！</p>
</blockquote>
<a id="more"></a>
<h2 id="基本语法-amp-数据类型"><a href="#基本语法-amp-数据类型" class="headerlink" title="基本语法 &amp; 数据类型"></a>基本语法 &amp; 数据类型</h2><h3 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h3><ul>
<li>变量名是大小写英文、数字、<code>$</code>和<code>_</code>的组合，且不能用数字开头，使用var进行基本赋值：<code>var x = 1;</code></li>
</ul>
<h3 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h3><ul>
<li><p>字符串（String）类型可以使用单引号<code>&#39;</code>或双引号<code>&quot;</code>来指示文本范围，并且可以在单引号中使用双引号，或是双引号中使用单引号。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"My name is '233', and you?"</span>); <span class="comment">// My name is '233', and you?</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Nice to meet you, "666"'</span>); <span class="comment">// Nice to meet you, "666"</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果需要存储多行字符串，可使用``来表示.</p>
</li>
<li><p>多个字符串的链接可以使用<code>+</code>操作符，或采用ES6新增的模板字符串.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">     <span class="keyword">var</span> s = <span class="string">`Esl</span></div><div class="line">     Psy</div><div class="line">     Congroo`;</div><div class="line">     <span class="built_in">console</span>.log(s);</div><div class="line">     <span class="comment">/*</span></div><div class="line">* Esl</div><div class="line">* Psy</div><div class="line">* Congroo</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">var</span> name = <span class="string">'Flint'</span>;</div><div class="line"><span class="keyword">var</span> age = <span class="string">'22'</span>;</div><div class="line"><span class="keyword">var</span> s1 = <span class="string">'My name is '</span> + name + <span class="string">' and I\'m '</span> + age + <span class="string">' years old.'</span>;</div><div class="line"><span class="built_in">console</span>.log(s1); <span class="comment">// My name is Flint and I'm 22 years old.</span></div><div class="line"><span class="keyword">var</span> s2 = <span class="string">`My name is <span class="subst">$&#123;name&#125;</span> and I\'m <span class="subst">$&#123;age&#125;</span> years old.`</span>;</div><div class="line"><span class="built_in">console</span>.log(s2); <span class="comment">// My name is Flint and I'm 22 years old.</span></div><div class="line">s1 === s2; <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>注意</strong>：模板字符串仅可用于``包括的字符串.</p>
</li>
<li><p><strong>特别注意</strong>：字符串是不可变的，String 类定义的方法都不能改变字符串的内容。虽然对字符串的某个索引赋值不会有错误提示，但是也没有任何效果。诸如toUpperCase() 方法，返回的是全新的字符串，而不是修改原始字符串。</p>
</li>
<li><p>关于字符串的各种操作，今后使用中再进行整理归纳。</p>
<pre><code>详细资料：[JavaScript String 对象属性与方法](http://www.w3school.com.cn/jsref/jsref_obj_string.asp)
</code></pre></li>
</ul>
<h3 id="数值（Number）"><a href="#数值（Number）" class="headerlink" title="数值（Number）"></a>数值（Number）</h3><ul>
<li><p>基本类型包括：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span>; <span class="comment">// 整数123</span></div><div class="line"><span class="number">0.456</span>; <span class="comment">// 浮点数0.456</span></div><div class="line"><span class="number">6.66666e4</span>; <span class="comment">// 科学计数法表示的6.66666x10^4，等同于66666.6</span></div><div class="line"><span class="number">-789</span>; <span class="comment">// 负数</span></div><div class="line"><span class="literal">NaN</span>; <span class="comment">// NaN表示Not a Number，当无法计算结果时用NaN表示</span></div><div class="line"><span class="literal">Infinity</span>; <span class="comment">// Infinity表示无限大，当数值超过了最大值时，就表示为Infinity</span></div><div class="line"></div><div class="line"><span class="comment">/*基本运算*/</span></div><div class="line"><span class="number">1</span> + <span class="number">1</span>; <span class="comment">// 2</span></div><div class="line"><span class="number">4</span> - <span class="number">5.1</span>; <span class="comment">// -1.0999999999999996</span></div><div class="line"><span class="number">3</span> / <span class="number">2</span> <span class="comment">// 1.5, JS中没有整除运算，需要整除运算可使用Math.floor或Math.ceil</span></div><div class="line"><span class="number">5</span> % <span class="number">3</span> <span class="comment">// 2, 取余数</span></div><div class="line"><span class="number">7.5</span> % <span class="number">1</span> <span class="comment">// 0.5, 浮点数亦可</span></div><div class="line"><span class="number">2</span> / <span class="number">0</span>; <span class="comment">// Infinity</span></div><div class="line"><span class="number">0</span> / <span class="number">0</span>; <span class="comment">// NaN</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>值得注意的是，JS的浮点数运算有一个固有bug，即精度误差：<code>0.1 + 0.2 == 0.3</code> 返回结果为<code>false</code>，利用<code>console.log(0.2 + 0.1)</code>，得到结果<code>0.30000000000000004</code>。这是由于二进制运算机制造成的（部分小数无法用有限位二进制表示，比如<code>0.1</code> <code>0.33</code> 等），几乎所有的编程语言都会有类似精度误差的问题，包括C/C++/Java/Python等。解决此类问题可以参考<a href="http://madscript.com/javascript/javscript-float-number-compute-problem/" target="_blank" rel="external">通过isEqual工具方法判断数值是否相等</a>，或者给出明确的精度要求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 利用fix</span></div><div class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// false</span></div><div class="line"><span class="built_in">parseFloat</span>((<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">2</span>)) === <span class="number">0.3</span>; <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 利用abs</span></div><div class="line"><span class="number">1</span> / <span class="number">3</span> === (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>); <span class="comment">// false</span></div><div class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span> / <span class="number">3</span> - (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>)) &lt; <span class="number">0.0000001</span>; <span class="comment">// true</span></div><div class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span> / <span class="number">3</span> - (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>)) &lt; <span class="number">1e-7</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>此外，JS中所有数字均为<strong>64</strong>位。</p>
<p>详细资料：<a href="http://www.w3school.com.cn/jsref/jsref_obj_number.asp" target="_blank" rel="external">JavaScript Number 对象属性与方法</a></p>
</li>
</ul>
<h3 id="布尔（Boolean）"><a href="#布尔（Boolean）" class="headerlink" title="布尔（Boolean）"></a>布尔（Boolean）</h3><ul>
<li><p>布尔（Boolean）类型只有<code>true</code>、<code>false</code>两种值，以及与<code>&amp;&amp;</code>或<code>||</code>非<code>!</code>三种运算。</p>
<p>详细资料：<a href="http://www.w3school.com.cn/jsref/jsref_obj_boolean.asp" target="_blank" rel="external">JavaScript Boolean 对象属性与方法</a></p>
</li>
</ul>
<h3 id="“空”（undefined、null）"><a href="#“空”（undefined、null）" class="headerlink" title="“空”（undefined、null）"></a>“空”（undefined、null）</h3><ul>
<li>JS中有两种表示”空”的类型，即<code>null</code>与<code>undefined</code>，类似于C/C++的<code>NULL</code>或Python的<code>None</code>。其中<code>null</code>表示一个空的值，而<code>undefined</code>表示值未定义。</li>
<li><code>null</code>不同于<code>0</code>以及<code>&#39;&#39;</code>，<code>0</code>是数值0，<code>&#39;&#39;</code>表示长度为0的字符串</li>
</ul>
<h3 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h3><ul>
<li><p>数组（Array）类型与Python的list比较相似，可以存储不同数据类型的元素，并能直接用[]操作符或<code>new Array()</code>方法来构造一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="string">'dog'</span>, <span class="string">'利'</span>, <span class="string">'郭嘉'</span>, <span class="string">'live'</span> === <span class="string">'die'</span>, <span class="number">1</span>];</div><div class="line"><span class="built_in">console</span>.log(array); <span class="comment">// ["dog", "利", "郭嘉", false, 1]</span></div><div class="line"><span class="built_in">console</span>.log(array.length); <span class="comment">// 5</span></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(array, <span class="string">'Not because of bad fortune to avoid the trend'</span>, <span class="string">'haha'</span>);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [Array[5], "Not because of bad fortune to avoid the trend", "haha"]</span></div><div class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 3</span></div><div class="line">arr[<span class="number">0</span>]; <span class="comment">// ["dog", "利", "郭嘉", false, 1]</span></div><div class="line">arr[<span class="number">1</span>]; <span class="comment">// "Not because of bad fortune to avoid the trend"</span></div><div class="line">arr[<span class="number">3</span>]; <span class="comment">// undefined, 超出索引范围返回undefined</span></div></pre></td></tr></table></figure>
</li>
<li><p>Array 的 <code>length</code> 属性是可读写的，可以通过设置这个属性来移除数组尾部元素与增添新的数组元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>];</div><div class="line"><span class="built_in">console</span>.log(colors.length); <span class="comment">// 3</span></div><div class="line">colors.length = <span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(colors[<span class="number">2</span>]); <span class="comment">// undefined</span></div><div class="line">colors.length = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(colors[<span class="number">2</span>]); <span class="comment">// undefined, 'green'已被删除</span></div><div class="line">colors[<span class="number">2</span>] = <span class="string">'gray'</span>;</div><div class="line">colors[colors.length] = <span class="string">'pink'</span>;</div><div class="line">colors[colors.length] = <span class="string">'orange'</span>;</div><div class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["blue", "red", "gray", "pink", "orange"]</span></div></pre></td></tr></table></figure>
</li>
<li><p>所有对象均有 <code>toLocaleString()</code> 、<code>toString()</code> 、 <code>valueOf()</code> 方法用于转换，默认转换方法为 <code>toString()</code> 。除此之外，默认分隔符为逗号，但可以使用 <code>join()</code> 方法来使用不同分隔符构建字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>];</div><div class="line"><span class="built_in">console</span>.log(colors.join(<span class="string">'! '</span>)); <span class="comment">// blue! red! green</span></div><div class="line"><span class="built_in">console</span>.log(colors.join(<span class="string">' + '</span>)); <span class="comment">// blue + red + green</span></div><div class="line"><span class="built_in">console</span>.log(colors.join(<span class="string">'\n'</span>));</div><div class="line"><span class="comment">// blue</span></div><div class="line"><span class="comment">// red</span></div><div class="line"><span class="comment">// green</span></div></pre></td></tr></table></figure>
</li>
<li><p>Array 通过 <code>concat()</code> 方法来构建新数组，通过 <code>slice()</code> 方法对数组进行切片。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>];</div><div class="line">colors.concat(<span class="string">'orange'</span>, [<span class="string">'pink'</span>, <span class="string">'gray'</span>]);</div><div class="line"><span class="comment">// ["blue", "red", "green", "orange", "pink", "gray"]</span></div><div class="line">colors.slice(<span class="number">0</span>, <span class="number">3</span>);</div><div class="line"><span class="comment">// ["blue", "red", "green"]</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>Array 具有五种迭代方法，分别是：</p>
<ul>
<li><code>every()</code> : 对Array的每一个元素运行指定函数，若该函数对每一项都返回 <code>true</code> ，则返回 <code>true</code> .</li>
<li><code>filter()</code> : 对Array的每一个元素运行指定函数，返回运行该函数返回 <code>true</code> 的元素组成的Array.</li>
<li><code>forEach()</code> : 对Array的每一个元素运行指定函数，无返回值.</li>
<li><code>map()</code> : 对Array的每一个元素运行指定函数，返回每次函数调用结果组成的Array.</li>
<li><code>some()</code> : 对Array的每一个元素运行指定函数，若该函数存在任一项返回 <code>true</code> ，则返回 <code>true</code> .</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'orange'</span>, <span class="string">'pink'</span>];</div><div class="line">colors.every(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (element.length &gt; <span class="number">3</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;); <span class="comment">// false</span></div><div class="line"></div><div class="line">colors.some(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (element.length &gt; <span class="number">3</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;); <span class="comment">// true</span></div><div class="line"></div><div class="line">colors.map(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> element.toUpperCase();</div><div class="line">&#125;); <span class="comment">// ["BLUE", "RED", "GREEN", "ORANGE", "PINK"]</span></div><div class="line"></div><div class="line">colors.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> element.length === <span class="number">4</span>;</div><div class="line">&#125;); <span class="comment">// ["blue", "pink"]</span></div><div class="line"></div><div class="line">colors.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> s = element[<span class="number">0</span>].toUpperCase() + element.slice(<span class="number">1</span>, element.length);</div><div class="line">	<span class="built_in">console</span>.log(s);</div><div class="line">&#125;); </div><div class="line"><span class="comment">// Blue</span></div><div class="line"><span class="comment">// Red</span></div><div class="line"><span class="comment">// Green</span></div><div class="line"><span class="comment">// Orange</span></div><div class="line"><span class="comment">// Pink</span></div></pre></td></tr></table></figure>
</li>
<li><p>Array 可通过 <code>push()</code> 与 <code>pop()</code> 方法实现栈操作，通过 <code>shift()</code> 与 <code>push()</code> 方法（后增前删） 或 <code>unshift()</code> 与 <code>pop()</code> 方法（前增后删）实现队列操作。</p>
</li>
<li><p>Array 可通过 <code>reverse()</code> 方法逆转数组，通过高级函数 <code>sort()</code> 实现自定义比较关系排序（默认字典序）。</p>
</li>
<li><p>Array 可通过 <code>indexOf()</code> 和 <code>lastIndexOf()</code> 方法来查找一个数组中的元素，前者从前往后查找，后者反之，使用全等操作法 <code>===</code> 来比较待查找元素，返回元素在数组中的位置，未找到返回 <code>-1</code> 。第一个参数为查找项，第二个可选参数为查找起点位置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'orange'</span>, <span class="string">'pink'</span>];</div><div class="line">colors.indexOf(<span class="string">'pink'</span>); <span class="comment">// 4</span></div><div class="line">colors.lastIndexOf(<span class="string">'red'</span>); <span class="comment">// 1</span></div><div class="line">colors.indexOf(<span class="string">'red'</span>, <span class="number">2</span>); <span class="comment">// -1</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>详细资料：<a href="http://www.w3school.com.cn/jsref/jsref_obj_array.asp" target="_blank" rel="external">JavaScript Array 对象属性与方法</a></p>
</li>
</ul>
<h3 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h3><ul>
<li><p>对象（Object）感觉更像Python里面的dict，是一种无序的集合数据类型，由若干<code>(key: value)</code>的键值对组成。</p>
</li>
<li><p>基本上 JavaScript 里的任何东西都是对象。</p>
</li>
<li><p>用面向对象（Object - Oriented）的观点来看，对象由属性与方法组成，其本质上也还是键值对，即<code>(属性名/PropertyName: 属性值)</code> 与 <code>(方法名/MethodName: 函数表达式或Function对象)</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myDog = &#123;</div><div class="line">  	<span class="attr">name</span>: <span class="string">'233'</span>,</div><div class="line">  	<span class="attr">age</span>: <span class="number">3</span>,</div><div class="line">  	<span class="string">'back-color'</span>: <span class="number">0x3f3f3f</span>, <span class="comment">// 如果属性名包含特殊字符，必须使用''括起来</span></div><div class="line">  	bark: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"汪汪汪!"</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/*访问对象属性与方法*/</span></div><div class="line"><span class="built_in">console</span>.log(myDog.name); <span class="comment">// 通过.操作符访问对象属性</span></div><div class="line"><span class="built_in">console</span>.log(myDog[<span class="string">'age'</span>]); <span class="comment">// 通过[]操作符访问对象属性</span></div><div class="line"><span class="built_in">console</span>.log(myDog[<span class="string">'back-color'</span>]); <span class="comment">// 若属性名包含特殊字符, 则只能用[]操作符来访问</span></div><div class="line">myDog.bark(); <span class="comment">// 通过.操作符访问对象方法</span></div><div class="line"><span class="built_in">console</span>.log(myDog.girlfrind); <span class="comment">// undefined, 不存在该属性</span></div><div class="line"></div><div class="line"><span class="comment">/*增删对象属性与方法*/</span></div><div class="line">myDog.girlfrind = <span class="string">'666'</span>; <span class="comment">// 新增一个girlfriend属性</span></div><div class="line"><span class="built_in">console</span>.log(myDog.girlfriend); <span class="comment">// 666</span></div><div class="line">myDog.girlfriend = <span class="string">'QAQ'</span>; <span class="comment">// 修改girlfriend属性</span></div><div class="line"><span class="built_in">console</span>.log(myDog.girlfriend); <span class="comment">// QAQ</span></div><div class="line"><span class="keyword">delete</span> myDog.girlfriend; <span class="comment">// 删除girlfriend属性, delete myDog['girlfrind']亦可</span></div><div class="line"><span class="built_in">console</span>.log(myDog.girlfriend); <span class="comment">// undefined, 不存在该属性</span></div><div class="line"></div><div class="line"><span class="comment">/*验证对象是否存在某属性或方法*/</span></div><div class="line"></div><div class="line"><span class="comment">// 检测对象是否拥有某一属性，可以用in操作符</span></div><div class="line"><span class="string">'name'</span> <span class="keyword">in</span> myDog; <span class="comment">// true</span></div><div class="line"><span class="string">'girlfriend'</span> <span class="keyword">in</span> myDog; <span class="comment">// false</span></div><div class="line"><span class="string">'toString'</span> <span class="keyword">in</span> myDog; <span class="comment">// true, 该属性继承自object对象</span></div><div class="line"></div><div class="line"><span class="comment">// 判断一个属性是否为对象自身拥有，而非继承得到，可使用hasOwnProperty()方法</span></div><div class="line">myDog.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></div><div class="line">myDog.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// false</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="条件判断-amp-循环控制"><a href="#条件判断-amp-循环控制" class="headerlink" title="条件判断 &amp; 循环控制"></a>条件判断 &amp; 循环控制</h2><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p>条件判断，与多数编程语言大同小异，就是<code>if</code> <code>else</code> <code>else if</code>，以及<code>switch</code>,并且支持嵌套。</p>
<p>需要注意的就是<code>if</code>后的条件判断语句，一般是值为 <code>true</code> 或 <code>false</code> 的表达式，但JavaScript并没有像Java一样强制要求是逻辑判断表达式，条件语句的位置可能会有其他语句出现。</p>
<p>于是有如下准则：</p>
<blockquote>
<p>所有<strong>不是</strong> <code>undefined</code>、<code>null</code>、<code>0</code>、<code>NaN</code>、空字符串 (<code>&quot;&quot;</code>) 的任意对象，包括值为<code>false</code>的Boolean对象， 在条件语句中都为<strong>true</strong>。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</div><div class="line"><span class="keyword">if</span> (b) <span class="comment">// 表达式的值为true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"><span class="comment">/* </span></div><div class="line"> * 反观C++，若bool b = false;</div><div class="line"> * 则if (b) 表达式值为false.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="string">'123'</span>;</div><div class="line"><span class="keyword">var</span> es = <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span> (s.length) &#123; <span class="comment">// 条件计算结果为3, 表达式值为true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (s) &#123; <span class="comment">// '123'表达式值为true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (es) &#123; <span class="comment">// ''表达式值为false</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> zero = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (zero) <span class="comment">// 表达式结果为false</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"><span class="keyword">if</span> (!zero) <span class="comment">// 表达式结果为true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="comment">// !!!这仅是实验，极其不推荐在条件表达式中单纯的使用赋值语句</span></div><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>, y = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (x = y) <span class="comment">// 表达式结果为false</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>, y = <span class="number">2</span>;</div><div class="line"><span class="keyword">if</span> (x = y) <span class="comment">// 表达式结果为true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"><span class="comment">// 在赋值语句作为条件表达式的情况下，先执行赋值语句，然后将赋值后对象作为条件</span></div></pre></td></tr></table></figure>
<p>总结一下，就是：</p>
<blockquote>
<p>尽量使用值为 true 或 false 的逻辑表达式作为condition</p>
<p>“空”（<code>undefined</code>、<code>null</code>、<code>0</code>、<code>NaN</code>、<code>&quot;&quot;</code>）的东西是<strong>false</strong>，除此之外一切对象皆为<strong>true</strong>。</p>
</blockquote>
<h3 id="迭代器for"><a href="#迭代器for" class="headerlink" title="迭代器for"></a>迭代器<code>for</code></h3><p>迭代器<code>for</code>的使用方式和C++/Java基本一致（除了赋值语句）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ([initialization]; [condition]; [final-expression])</div><div class="line">   statement</div><div class="line"></div><div class="line"><span class="comment">/*example*/</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">*/</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">    <span class="keyword">continue</span>;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">1</div><div class="line">3</div><div class="line">*/</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i &gt; <span class="number">2</span>)</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">*/</div></pre></td></tr></table></figure>
<h3 id="迭代器for-in"><a href="#迭代器for-in" class="headerlink" title="迭代器for ... in"></a>迭代器<code>for ... in</code></h3><p>迭代器<code>for ... in</code>用于以<strong>任意序</strong>迭代一个对象的可枚举属性，其迭代顺序依赖于执行环境。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'Flint'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">22</span>,</div><div class="line">  	<span class="attr">sex</span>: <span class="string">'male'</span>,</div><div class="line">    <span class="attr">city</span>: <span class="string">'Wuhan'</span>,</div><div class="line">  	<span class="attr">cry</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'QAQ'</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123; <span class="comment">// 过滤掉继承的属性</span></div><div class="line">      <span class="built_in">console</span>.log(key); <span class="comment">// 'name', 'age', 'sex', 'city', 'cry'.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'H'</span>, <span class="string">'He'</span>, <span class="string">'Li'</span>, <span class="string">'Be'</span>, <span class="string">'B'</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// '0', '1', '2', '3', '4'. 注意i是string不是number</span></div><div class="line">  <span class="built_in">console</span>.log(arr[i]); <span class="comment">// 'H', 'He', 'Li', 'Be', 'B'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="迭代器for-of"><a href="#迭代器for-of" class="headerlink" title="迭代器for ... of"></a>迭代器<code>for ... of</code></h3><p><code>for ... of</code>语句是在可迭代对象基础上创建的一个循环。不同于<code>for ... in</code>遍历对象属性的名称，<code>for ... of</code>仅遍历一个对象的可迭代部分并且直接遍历属性值而非属性名。区别如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>];</div><div class="line">arr.name = <span class="string">'alpha'</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> arr) &#123;</div><div class="line">  <span class="built_in">console</span>.log(key); <span class="comment">// '0', '1', '2', '3', 'name'</span></div><div class="line">  <span class="built_in">console</span>.log(arr[key]) <span class="comment">// 'apple', 'banana', 'cat', 'dog', 'alpha'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> arr) &#123;</div><div class="line">  <span class="built_in">console</span>.log(key) <span class="comment">// 'apple', 'banana', 'cat', 'dog'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a><code>forEach()</code>方法</h3><p><code>forEach</code>是大部分可迭代对象<code>iterable</code>内置的一个方法，是一种比较推荐的遍历方式。</p>
<p>原型如下（以<code>Array</code>为例）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">array.forEach(callback(currentValue, index, array)&#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;, <span class="keyword">this</span>)</div><div class="line"><span class="comment">// or</span></div><div class="line">array.forEach(callback[, thisArg])</div></pre></td></tr></table></figure>
<blockquote>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li><p><code>callback</code>为数组中每个元素执行的函数，该函数接收三个参数：</p>
<ul>
<li><code>currentValue(当前值)</code> ：数组中正在处理的当前元素。</li>
<li><code>index(索引)</code> ：数组中正在处理的当前元素的索引。</li>
<li><code>array</code> ：<code>forEach()</code>方法正在操作的数组。 </li>
</ul>
</li>
<li><p><code>thisArg</code>为可选参数。当执行回调函数时用作<code>this</code>值。</p>
<p>​</p>
</li>
</ul>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul>
<li><code>undefined</code></li>
</ul>
</blockquote>
<p>使用示范：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>];</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'arr['</span> + index + <span class="string">'] = '</span> + element);</div><div class="line">&#125;);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * arr[0] = apple</div><div class="line"> * arr[1] = banana</div><div class="line"> * arr[2] = cat</div><div class="line"> * arr[3] = dog</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArrayElements</span>(<span class="params">item, i, arr</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'array['</span> + i + <span class="string">'] = '</span> + item + <span class="string">";"</span>);</div><div class="line">  <span class="keyword">if</span> (i === arr.length - <span class="number">1</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'array is : '</span> + arr);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">[<span class="string">'Aa'</span>, <span class="string">'Bb'</span>, <span class="string">'Cc'</span>].forEach(logArrayElements);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * array[0] = Aa;</div><div class="line"> * array[1] = Bb;</div><div class="line"> * array[2] = Cc;</div><div class="line"> * array is : Aa,Bb,Cc</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// Set与Map的forEach()方法各有其定义</span></div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="literal">undefined</span>]);</div><div class="line">s.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, sameValue, set</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;value&#125;</span> and <span class="subst">$&#123;sameValue&#125;</span>;`</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// A and A;</span></div><div class="line"><span class="comment">// B and B;</span></div><div class="line"><span class="comment">// C and C;</span></div><div class="line"><span class="comment">// undefined and undefined;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'No.1'</span>, <span class="string">'Alice'</span>], [<span class="string">'No.2'</span>, <span class="string">'Bob'</span>], [<span class="string">'No.3'</span>, <span class="string">'Candy'</span>]]);</div><div class="line">m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> ==&gt; <span class="subst">$&#123;value&#125;</span>;`</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// No.1 ==&gt; Alice;</span></div><div class="line"><span class="comment">// No.2 ==&gt; Bob;</span></div><div class="line"><span class="comment">// No.3 ==&gt; Candy;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PC程序清单 & 实用小工具]]></title>
      <url>https://flintx.github.io/2017/02/04/tools-list/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前用的PC大限将至，即将随本科岁月一起成为过往。</p>
<p>在寿终正寝之前，整理一份陪伴五年时光的程序清单。</p>
<a id="more"></a>
<h2 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h2><hr>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><blockquote>
<p><code>Google Chrome</code></p>
<p><code>Mozilla Firefox</code></p>
</blockquote>
<h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><blockquote>
<p><code>网易云音乐</code></p>
</blockquote>
<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><blockquote>
<p><code>PotPlayer</code></p>
</blockquote>
<h3 id="聊天"><a href="#聊天" class="headerlink" title="聊天"></a>聊天</h3><blockquote>
<p><code>QQ轻聊版</code></p>
</blockquote>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><blockquote>
<p><code>迅雷极速版</code></p>
<p><code>百度云客户端</code></p>
<p><code>µTorrent 2.0.4</code> </p>
</blockquote>
<h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><blockquote>
<p><code>Steam</code></p>
<p><code>TGP</code></p>
<p><code>UPlay</code></p>
</blockquote>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><h4 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h4><blockquote>
<p><strong>C/C++/C#:</strong></p>
<p>​    <code>Dev C++ 4.9.9.2</code></p>
<p>​    <code>Code::Blocks IDE 16.1.1.0</code></p>
<p>​    <code>Microsoft Visual Studio 14.0</code></p>
<p><strong>Java:</strong></p>
<p>​    <code>IntelliJ IDEA 15.0.2</code></p>
<p>​    <code>Android Studio 2.2</code></p>
<p>​    <code>Eclipse Java Mars</code></p>
<p><strong>Python:</strong></p>
<p>​    <code>PyCharm 2016.1</code></p>
<p><strong>PHP:</strong></p>
<p>​    <code>PhpStorm 10.0.3</code></p>
</blockquote>
<h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4><blockquote>
<p><code>Notepad++ 6.9.2</code> （普通文本处理）</p>
<p><code>gVim 7.4</code>（单文件程序、算法demo编写）</p>
<p><code>Sublime text 3</code>（前端处理）</p>
<p><code>Visual Studio Code 1.8.1</code>（闲置中Orz）</p>
<p><code>Typora 0.9.23</code>（markdown文件）</p>
</blockquote>
<h4 id="编译器-amp-解释器"><a href="#编译器-amp-解释器" class="headerlink" title="编译器 &amp; 解释器"></a>编译器 &amp; 解释器</h4><blockquote>
<p><code>gcc 4.7.1</code></p>
<p><code>jdk 1.8.0_73</code></p>
<p><code>Python 3.4 &amp; 2.7</code></p>
<p><code>PHP 7.0 &amp; 5.5</code></p>
</blockquote>
<h4 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h4><blockquote>
<p><code>MySQL</code></p>
<p><code>Git</code></p>
<p><code>Node.js</code></p>
<p><code>Apache 2.4</code></p>
<p>…</p>
</blockquote>
<h3 id="学习-研究"><a href="#学习-研究" class="headerlink" title="学习/研究"></a>学习/研究</h3><blockquote>
<p><code>Microsoft Office 2016</code> （文档处理）</p>
<p><code>Microsoft Visio 2016</code> （绘图）</p>
<p><code>MATLAB R2016a</code>（科学计算、图像处理）</p>
<p><code>Acrobat Reader DC</code>（pdf阅读）</p>
<p><code>VMware Workstation Pro 12.1</code>（虚拟机）</p>
<p><code>Adobe Photoshop CS6</code> （表情包制作【???】）</p>
</blockquote>
<h3 id="实用小工具"><a href="#实用小工具" class="headerlink" title="实用小工具"></a>实用小工具</h3><blockquote>
<p>本地文件检索：</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/Everything-1.3.4.686.x64.Multilingual-Setup.exe" target="_blank" rel="external">Everything.exe</a></p>
<p>电脑色温控制：</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/flux-setup.exe" target="_blank" rel="external">flux.exe</a></p>
<p>host修改器：</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/tool.exe" target="_blank" rel="external">HostTool.exe</a></p>
<p>源码可参考(<a href="https://github.com/HostsTools/Windows" target="_blank" rel="external">https://github.com/HostsTools/Windows</a>)</p>
<p>Windows字体渲染：</p>
<p><a href="http://www.mactype.net/" target="_blank" rel="external">MacType</a></p>
<p>截图:</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/Snipaste-1.11.3-x64.zip" target="_blank" rel="external">Snipaste.exe</a></p>
<p>最喜欢的三款字体：</p>
<p><a href="https://github.com/adobe-fonts/source-code-pro/archive/2.030R-ro/1.050R-it.zip" target="_blank" rel="external">Source Code Pro</a></p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/MONACO.TTF" target="_blank" rel="external">Moncao</a></p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/Fira%20Code.rar" target="_blank" rel="external">Fira Code</a></p>
<p>MinGW编译器：</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/mingw-get-setup.exe" target="_blank" rel="external">mingw-get-setup.exe</a></p>
<p>Windows系统下查看Linux（双系统）文件：</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/Linux_Reader.exe" target="_blank" rel="external">Linux_Reader.exe</a></p>
</blockquote>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line">source $VIMRUNTIME/mswin.vim</div><div class="line"></div><div class="line">behave mswin</div><div class="line">set nocompatible</div><div class="line">set nobackup</div><div class="line">set ignorecase</div><div class="line">syn on</div><div class="line">&quot;set t_Co=256 </div><div class="line">colo molokai</div><div class="line">set hlsearch</div><div class="line">filetype indent on</div><div class="line">se ru nu ar sw=4 ts=4 noswf et sta nowrap ww=&lt;,&gt;,[,] gfn=Source_Code_Pro_Medium:h14:cANSI</div><div class="line">set shiftwidth=4</div><div class="line">set tabstop=4</div><div class="line"></div><div class="line">&quot;高亮当前行</div><div class="line">&quot;set cursorline</div><div class="line"></div><div class="line">&quot;统计字数</div><div class="line">map &lt;Enter&gt;&lt;Enter&gt; g&lt;c-G&gt;</div><div class="line"></div><div class="line">&quot;隐藏工具栏与菜单栏</div><div class="line">&quot;set guioptions-=m</div><div class="line">set guioptions-=T</div><div class="line">set guioptions-=r</div><div class="line">set guioptions-=L</div><div class="line"></div><div class="line">autocmd BufEnter * lcd %:p:h</div><div class="line"></div><div class="line"></div><div class="line">imap &lt;c-d&gt; &lt;c-o&gt;dd</div><div class="line">imap &lt;c-]&gt; &#123;&lt;cr&gt;&#125;&lt;c-o&gt;O&lt;left&gt;&lt;right&gt;</div><div class="line">imap &lt;c-k&gt; &lt;up&gt;</div><div class="line">imap &lt;c-j&gt; &lt;down&gt;</div><div class="line">imap &lt;c-h&gt; &lt;left&gt;</div><div class="line">imap &lt;c-l&gt; &lt;right&gt;</div><div class="line">imap &lt;c-tab&gt; &lt;esc&gt;gt</div><div class="line">imap &lt;cr&gt; &lt;cr&gt;&lt;left&gt;&lt;right&gt;</div><div class="line"></div><div class="line">inoremap ( ()&lt;left&gt;</div><div class="line">inoremap [ []&lt;left&gt;</div><div class="line"></div><div class="line">noremap &lt;F6&gt; =a&#123;</div><div class="line"></div><div class="line">map &lt;F7&gt; :g/^\s*$/d&lt;CR&gt;</div><div class="line">map &lt;c-t&gt; :tabnew&lt;CR&gt;</div><div class="line">map &lt;F3&gt; :e test.cpp&lt;CR&gt;</div><div class="line">map &lt;F9&gt; :call CR()&lt;CR&gt;&lt;CR&gt;</div><div class="line">func CR()</div><div class="line">exec &apos;update&apos;</div><div class="line">if &amp;filetype == &quot;java&quot;  </div><div class="line">    exec &quot;!javac % &amp;&amp; java %&lt;&quot; </div><div class="line">elseif &amp;filetype == &quot;python&quot;</div><div class="line">    exec &quot;!python %&quot;</div><div class="line">else</div><div class="line">    exec &apos;!g++ %&lt;.cpp -o %&lt; &amp;&amp; %&lt;&apos;</div><div class="line">endif</div><div class="line">endfunc</div><div class="line">map &lt;f2&gt; :call SetTitle()&lt;CR&gt;Gkkk</div><div class="line">func SetTitle()</div><div class="line">let l = 0</div><div class="line">let l = l + 1 | call setline(l, &apos;/*&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;Creat Time:&apos;.strftime(&apos;%c&apos;))</div><div class="line">let l = l + 1 | call setline(l, &apos;*/&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;//#pragma comment(linker, &quot;/STACK:102400000,102400000&quot;)&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;iostream&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;cstdio&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;cstring&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;cstdlib&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;cmath&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;algorithm&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;functional&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;string&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;map&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;set&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;vector&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;queue&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;stack&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;bitset&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;ctime&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;using namespace std;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define clr( x , y ) memset(x,y,sizeof(x))&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define cls( x ) memset(x,0,sizeof(x))&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define pr( x ) cout &lt;&lt; #x &lt;&lt; &quot; = &quot; &lt;&lt; x &lt;&lt; endl &apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define pri( x ) cout &lt;&lt; #x &lt;&lt; &quot; = &quot; &lt;&lt; x &lt;&lt; &quot; &quot; &apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define test( t ) int t ; cin &gt;&gt; t ; int kase = 1 ; while( t-- )&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define out( kase ) printf( &quot;Case %d: &quot; , kase++ )&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define sqr( x ) ( x * x )&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define mp make_pair&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define pii pair&lt;int,int&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define fi first&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define se second&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define pb push_back&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;typedef long long lint;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;const double eps = 1e-8 ;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;const int inf = 0x3f3f3f3f ;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;const long long INF = 0x3f3f3f3f3f3f3f3fLL ;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;int main()&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&#123;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    //freopen(&quot;my.in&quot;,&quot;r&quot;,stdin);&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    //freopen(&quot;my.out&quot;,&quot;w&quot;,stdout);&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    return 0;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&#125;&apos;)</div><div class="line">endfunc</div><div class="line"></div><div class="line">map&lt;f4&gt; :call AddComment()&lt;cr&gt;</div><div class="line">func AddComment()</div><div class="line">    if matchstr(getline(&apos;.&apos;), &apos;[^ ]&apos;) == &apos;/&apos;</div><div class="line">        normal ^xx</div><div class="line">    else</div><div class="line">        normal ^i//</div><div class="line">    endif</div><div class="line">endfunc</div><div class="line"></div><div class="line">map &lt;f5&gt; :call SetTitle2()&lt;CR&gt;Gkkk</div><div class="line">func SetTitle2()</div><div class="line">let l = 0</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;bits/stdc++.h&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;using namespace std;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;int main()&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&#123;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    freopen(&quot;my.in&quot;,&quot;r&quot;,stdin);&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    //freopen(&quot;my.out&quot;,&quot;w&quot;,stdout);&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    return 0;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&#125;&apos;)</div><div class="line">endfunc</div><div class="line"></div><div class="line"></div><div class="line">set printoptions=syntax:n,number:y,portrait:y</div><div class="line"></div><div class="line">cd E:\Coder\my vim\</div><div class="line"></div><div class="line">set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</div><div class="line">au GUIEnter * simalt ~x                           &quot;窗口启动时自动最大化</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello, My Blog]]></title>
      <url>https://flintx.github.io/2017/02/02/hello/</url>
      <content type="html"><![CDATA[<h2 id="图片插入测试"><a href="#图片插入测试" class="headerlink" title="图片插入测试"></a>图片插入测试</h2><p><img src="http://okqi2ipwh.bkt.clouddn.com/39163751_p0.jpg" alt="a image"></p>
<a id="more"></a>
<h2 id="代码高亮测试"><a href="#代码高亮测试" class="headerlink" title="代码高亮测试"></a>代码高亮测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">print(<span class="string">"hello, my blog"</span>)</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.math.BigInteger;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner cin = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">int</span> t = cin.nextInt();</div><div class="line">		<span class="keyword">int</span> i = <span class="number">1</span> ;</div><div class="line">		<span class="keyword">while</span>( i &lt;= t )&#123;</div><div class="line">			BigInteger a = cin.nextBigInteger();</div><div class="line">			BigInteger b = cin.nextBigInteger();</div><div class="line">			BigInteger c = a.mod(b) ;</div><div class="line">			<span class="keyword">if</span>( c == BigInteger.ZERO )</div><div class="line">				System.out.println(<span class="string">"Case "</span>+i+<span class="string">": divisible"</span>);</div><div class="line">			<span class="keyword">else</span></div><div class="line">				System.out.println(<span class="string">"Case "</span>+i+<span class="string">": not divisible"</span>);</div><div class="line">		&#125;</div><div class="line">		cin.close();</div><div class="line">		</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数学公式测试"><a href="#数学公式测试" class="headerlink" title="数学公式测试"></a>数学公式测试</h2><script type="math/tex; mode=display">
\begin{array}{c|lcr}
n & \text{Left} & \text{Center} & \text{Right} \\
\hline
1 & 0.24 & 1 & 125 \\
2 & -1 & 189 & -8 \\
3 & -20 & 2000 & 1+10i \\
\end{array}</script><p>$ x^2 + y^2 = z_1 + z_{a2} $</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[建站日志]]></title>
      <url>https://flintx.github.io/2017/02/02/Blog-Logs/</url>
      <content type="html"><![CDATA[<h2 id="2017-07-11"><a href="#2017-07-11" class="headerlink" title="2017 - 07 - 11"></a>2017 - 07 - 11</h2><ul>
<li>增加hexo分支，便于文章源文件、配置文件同步，参考：<a href="http://www.jianshu.com/p/beb8d611340a" target="_blank" rel="external">Hexo博客从一台电脑迁移到其他电脑</a></li>
</ul>
<h2 id="2017-02-08"><a href="#2017-02-08" class="headerlink" title="2017 - 02 - 08"></a>2017 - 02 - 08</h2><ul>
<li>增加文章加密功能（解密后会出现数学公式渲染与字体api引起的代码高亮错误，仅适用于加密简单文本）</li>
</ul>
<h2 id="2017-02-07"><a href="#2017-02-07" class="headerlink" title="2017 - 02 - 07"></a>2017 - 02 - 07</h2><ul>
<li>添加友链</li>
<li>添加<code>README.md</code>文件</li>
<li>添加<code>RSS</code>连接</li>
</ul>
<h2 id="2017-02-06"><a href="#2017-02-06" class="headerlink" title="2017 - 02 - 06"></a>2017 - 02 - 06</h2><ul>
<li>增加多说评论功能、<code>UA</code>显示功能</li>
<li>增加阅读次数统计功能（利用<code>LeanCloud</code>）</li>
<li>添加<code>关于</code>、<code>分类</code>、<code>标签</code>页面</li>
</ul>
<h2 id="2017-02-04"><a href="#2017-02-04" class="headerlink" title="2017 - 02 - 04"></a>2017 - 02 - 04</h2><ul>
<li>blog主题由<code>NexT</code>修改为<code>yilia</code></li>
<li>绑定域名<a href="http://www.flintx.me" target="_blank" rel="external">flintx.me</a></li>
<li>blog主题由<code>yilia</code>修改为<code>NexT</code></li>
<li>外观Scheme由<code>Pisces</code>修改为<code>Mist</code></li>
<li>开启代码高亮功能</li>
<li>开启<code>MathJax</code>数学公式支持</li>
<li>更换部分字体，并将fonts api的host由google切换至中科大镜像</li>
<li>使用七牛云作为图床</li>
</ul>
<h2 id="2017-02-03"><a href="#2017-02-03" class="headerlink" title="2017 - 02 - 03"></a>2017 - 02 - 03</h2><ul>
<li>修改语言为中文</li>
</ul>
<h2 id="2017-02-02"><a href="#2017-02-02" class="headerlink" title="2017 - 02 - 02"></a>2017 - 02 - 02</h2><ul>
<li>建立项目<a href="https://github.com/flintx/flintx.github.io" target="_blank" rel="external">flintx.github.io</a></li>
<li>blog框架由<code>Jekyll</code>切换为<code>Hexo</code></li>
<li>使用<code>NexT</code>作为blog主题，并采用<code>Pisces</code>作为外观Scheme</li>
<li>添加侧边栏社交link</li>
<li>添加作者头像、描述</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
