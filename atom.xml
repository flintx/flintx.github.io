<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flintx</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://flintx.github.io/"/>
  <updated>2017-02-24T14:20:10.575Z</updated>
  <id>https://flintx.github.io/</id>
  
  <author>
    <name>Flint Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript学习笔记02（Map与Set、函数）</title>
    <link href="https://flintx.github.io/2017/02/24/learnjs-02/"/>
    <id>https://flintx.github.io/2017/02/24/learnjs-02/</id>
    <published>2017-02-24T14:04:13.000Z</published>
    <updated>2017-02-24T14:20:10.575Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>参考 &amp; 学习：</p>
<p><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖老师的JavaScript教程</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference" target="_blank" rel="external">JavaScript 参考文档</a><br><a href="http://www.w3school.com.cn/js/index.asp" target="_blank" rel="external">W3School JavaScript 教程</a></p>
<p>由衷感谢这些资料的提供者与撰写者！</p>
</blockquote>
<a id="more"></a>
<h2 id="Map-与-Set"><a href="#Map-与-Set" class="headerlink" title="Map 与 Set"></a>Map 与 Set</h2><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote>
<p>JavaScript的默认对象表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组键值对。</p>
<p>但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。</p>
<p>为了解决这个问题，最新的ES6规范引入了新的数据类型<code>Map</code>。</p>
</blockquote>
<p><code>Map</code>实例的主要属性包括<code>size</code>一个，而不是<code>length</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'No.1'</span>, <span class="string">'Alice'</span>], [<span class="string">'No.2'</span>, <span class="string">'Bob'</span>], [<span class="string">'No.3'</span>, <span class="string">'Candy'</span>]]);</div><div class="line"><span class="built_in">console</span>.log(m); <span class="comment">// Map &#123;"No.1" =&gt; "Alice", "No.2" =&gt; "Bob", "No.3" =&gt; "Candy"&#125;</span></div><div class="line"><span class="built_in">console</span>.log(m.size); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p><code>Map</code>实例的主要方法有：</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/clear" target="_blank" rel="external"><code>Map.prototype.clear()</code></a></p>
<p>移除<code>Map</code>对象的所有键/值对 。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/delete" target="_blank" rel="external"><code>Map.prototype.delete(key)</code></a></p>
<p>移除任何与键相关联的值，并且返回该值，该值在之前会被<code>Map.prototype.has(key)</code>返回为<code>true</code>。之后再调用<code>Map.prototype.has(key)</code>会返回<code>false</code>。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/entries" target="_blank" rel="external"><code>Map.prototype.entries()</code></a></p>
<p>返回一个新的 <code>Iterator</code> 对象，它按插入顺序包含了<code>Map</code>对象中每个元素的 <strong>[key, value]</strong> <strong>数组</strong>。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach" target="_blank" rel="external"><code>Map.prototype.forEach(callbackFn, thisArg)</code></a></p>
<p>按插入顺序，为 <code>Map</code>对象里的每一键值对调用一次<code>callbackFn</code>函数。如果为<code>forEach</code>提供了<code>thisArg</code>，它将在每次回调中作为<code>this</code>值。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/get" target="_blank" rel="external"><code>Map.prototype.get(key)</code></a></p>
<p>返回键对应的值，如果不存在，则返回<code>undefined</code>。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/has" target="_blank" rel="external"><code>Map.prototype.has(key)</code></a></p>
<p>返回一个布尔值，表示<code>Map</code>实例是否包含键对应的值。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/keys" target="_blank" rel="external"><code>Map.prototype.keys()</code></a></p>
<p>返回一个新的 <code>Iterator</code>对象， 它按插入顺序包含了Map对象中每个元素的<strong>键 </strong>。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/set" target="_blank" rel="external"><code>Map.prototype.set(key, value)</code></a></p>
<p>设置<code>Map</code>对象中键的值。返回该<code>Map</code>对象。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/values" target="_blank" rel="external"><code>Map.prototype.values()</code></a></p>
<p>返回一个新的<code>Iterator</code>对象，它按插入顺序包含了<code>Map</code>对象中每个元素的<strong>值</strong> 。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"></div><div class="line"><span class="keyword">var</span> keyNum = <span class="number">1024</span>,</div><div class="line">	keyStr = <span class="string">'This is a string.'</span>,</div><div class="line">	keyObj = &#123;&#125;,</div><div class="line">	keyFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 添加键key</span></div><div class="line">m.set(keyNum, <span class="string">'数值键1024对应的值'</span>);</div><div class="line">m.set(keyStr, <span class="string">"字符串键'This is a string.'对应的值"</span>);</div><div class="line">m.set(keyObj, <span class="string">'对象键keyObj对应的值'</span>);</div><div class="line">m.set(keyFun, <span class="string">'函数键keyFun对应的值'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(m); </div><div class="line"><span class="comment">// Map &#123;</span></div><div class="line"><span class="comment">// 	1024 =&gt; "数值键1024对应的值", </span></div><div class="line"><span class="comment">// 	"This is a string." =&gt; "字符串键'This is a string.'对应的值", </span></div><div class="line"><span class="comment">// 	Object &#123;&#125; =&gt; "对象键keyObj对应的值", </span></div><div class="line"><span class="comment">// 	function =&gt; "函数键keyFun对应的值"</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="built_in">console</span>.log(m.size);</div><div class="line"><span class="comment">// 4</span></div><div class="line"></div><div class="line"><span class="comment">// 读取值value</span></div><div class="line"><span class="built_in">console</span>.log(m.get(keyNum)); <span class="comment">// 数值键1024对应的值</span></div><div class="line"><span class="built_in">console</span>.log(m.get(keyStr)); <span class="comment">// 字符串键'This is a string.'串对应的值</span></div><div class="line"><span class="built_in">console</span>.log(m.get(keyObj)); <span class="comment">// 对象键keyObj对应的值</span></div><div class="line"><span class="built_in">console</span>.log(m.get(keyFun)); <span class="comment">// 函数键keyFun对应的值</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(m.get(<span class="number">1024</span>)); <span class="comment">// 数值键1024对应的值</span></div><div class="line"><span class="built_in">console</span>.log(m.get(<span class="string">'This is a string.'</span>)); <span class="comment">// 字符串键'This is a string.'串对应的值</span></div><div class="line"><span class="built_in">console</span>.log(m.get(&#123;&#125;)); <span class="comment">// undefined, 因为keyObj !== &#123;&#125;</span></div><div class="line"><span class="built_in">console</span>.log(m.get(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)); <span class="comment">// undefined, 因为keyFunc !== function () &#123;&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 通过Array来构造Map</span></div><div class="line"><span class="keyword">var</span> arr = [[<span class="string">"key1"</span>, <span class="string">"value1"</span>], [<span class="string">"key2"</span>, <span class="string">"value2"</span>]];</div><div class="line"><span class="keyword">var</span> aMap = <span class="keyword">new</span> <span class="built_in">Map</span>(arr);</div><div class="line"><span class="built_in">console</span>.log(aMap.get(<span class="string">'key1'</span>)) <span class="comment">// 'value1';</span></div><div class="line"></div><div class="line"><span class="comment">// 一些迭代技巧</span></div><div class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">myMap.set(<span class="number">0</span>, <span class="string">"zero"</span>);</div><div class="line">myMap.set(<span class="number">1</span>, <span class="string">"one"</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> myMap) &#123;</div><div class="line">  	<span class="built_in">console</span>.log(key + <span class="string">" = "</span> + value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 将会显示两个log。一个是"0 = zero"另一个是"1 = one"</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> myMap.keys()) &#123;</div><div class="line">  	<span class="built_in">console</span>.log(key);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 将会显示两个log。 一个是 "0" 另一个是 "1"</span></div><div class="line"><span class="comment">// keys()方法返回一个可迭代对象Iterator，包含了Map对象中每个元素的键</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> myMap.values()) &#123;</div><div class="line">  	<span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 将会显示两个log。 一个是 "zero" 另一个是 "one"</span></div><div class="line"><span class="comment">// values()方法返回一个可迭代对象Iterator，包含了Map对象中每个元素的值</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> myMap.entries()) &#123;</div><div class="line">  	<span class="built_in">console</span>.log(key + <span class="string">" = "</span> + value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 将会显示两个log。 一个是 "0 = zero" 另一个是 "1 = one"</span></div><div class="line"><span class="comment">// entries()方法以键值对形式返回一个可迭代对象Iterator</span></div><div class="line"></div><div class="line"><span class="comment">// 移除</span></div><div class="line">myMap.delete(<span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(myMap); <span class="comment">// Map &#123;0 =&gt; "zero"&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 清空</span></div><div class="line">myMap.clear();</div><div class="line"><span class="built_in">console</span>.log(myMap); <span class="comment">// Map &#123;&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 判断是否存在某个键</span></div><div class="line">myMap.set(<span class="number">0</span>, <span class="string">"zero"</span>);</div><div class="line">myMap.set(<span class="number">1</span>, <span class="string">"one"</span>);</div><div class="line"><span class="built_in">console</span>.log(myMap.has(<span class="number">0</span>)); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(myMap.has(<span class="number">2</span>)); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><blockquote>
<p><code>Set</code>对象是值的集合，你可以按照插入的顺序迭代它的元素。 <code>Set</code>中的元素只会出现一次，即 <code>Set</code> 中的元素是唯一的。</p>
</blockquote>
<p><code>set</code>对象中元素是唯一的，因而需要判断两个元素是否相等。判断相等的算法略不同于<code>===</code>运算符，其中<code>+0</code>与<code>-0</code>是被视为不同的元素，尽管<code>+0 === -0</code>为<code>true</code>（<code>ECMAScript6</code>中这点已修改，<code>+0</code>与<code>-0</code>已被视为相同元素）。除此之外，<code>NaN</code>与<code>NaN</code>被视为相同元素，尽管<code>NaN !== NaN</code>为<code>true</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">s.add(+<span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(s); <span class="comment">// Set &#123;0&#125;</span></div><div class="line">s.add(<span class="number">-0</span>);</div><div class="line"><span class="built_in">console</span>.log(s); <span class="comment">// Set &#123;0&#125;   Chrome 56.0+</span></div><div class="line">s.add(<span class="literal">NaN</span>);</div><div class="line"><span class="built_in">console</span>.log(s); <span class="comment">// Set &#123;0, NaN&#125;</span></div><div class="line">s.add(<span class="literal">NaN</span>);</div><div class="line"><span class="built_in">console</span>.log(s); <span class="comment">// Set &#123;0, NaN&#125;</span></div></pre></td></tr></table></figure>
<p>同<code>Map</code>实例一样，<code>set</code>实例的主要属性包括<code>size</code>一个，而不是<code>length</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1.1</span>, <span class="number">1.10</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="string">'3'</span>]); <span class="comment">// 通过Array构造一个Set</span></div><div class="line"><span class="built_in">console</span>.log(aSet); <span class="comment">// Set &#123;1, 2, 3, 1.1, undefined, NaN, '3'&#125;</span></div><div class="line"><span class="built_in">console</span>.log(aSet.size); <span class="comment">// 7</span></div></pre></td></tr></table></figure>
<p><code>Set</code>实例包括如下主要方法：</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/add" target="_blank" rel="external"><code>Set.prototype.add(value)</code></a></p>
<p>在<code>Set</code>对象尾部添加一个元素。返回该<code>Set</code>对象。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/clear" target="_blank" rel="external"><code>Set.prototype.clear()</code></a></p>
<p>移除<code>Set</code>对象内的所有元素。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/delete" target="_blank" rel="external"><code>Set.prototype.delete(value)</code></a></p>
<p>移除<code>Set</code>的中与这个值相等的元素，返回<code>Set.prototype.has(value)</code>在这个操作前会返回的值（即如果该元素存在，返回<code>true</code>，否则返回<code>false</code>）。<code>Set.prototype.has(value)</code>在此后会返回<code>false</code></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/entries" target="_blank" rel="external"><code>Set.prototype.entries()</code></a></p>
<p>返回一个新的迭代器对象，该对象包含<code>Set</code>对象中的<strong>按插入顺序排列的</strong>所有元素的值的[value, value]数组。为了使这个方法和<code>Map</code>对象保持相似，不过每个值的键和值相等。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach" target="_blank" rel="external"><code>Set.prototype.forEach(callbackFn, thisArg)</code></a></p>
<p>按照插入顺序，为<code>Set</code>对象中的每一个值调用一次<code>callBackFn</code>。如果提供了<code>thisArg</code>参数，回调中的<code>this</code>会是这个参数。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/has" target="_blank" rel="external"><code>Set.prototype.has(value)</code></a></p>
<p>返回一个布尔值，表示该值在<code>Set</code>中存在与否。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/keys" target="_blank" rel="external"><code>Set.prototype.keys()</code></a></p>
<p>与<code>values()</code>方法相同，返回一个新的迭代器对象，该对象包含<code>Set</code>对象中的<strong>按插入顺序排列的</strong>所有元素的值。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/values" target="_blank" rel="external"><code>Set.prototype.values()</code></a></p>
<p>返回一个新的迭代器对象，该对象包含<code>Set</code>对象中的<strong>按插入顺序排列的</strong>所有元素的值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用Set对象</span></div><div class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line"><span class="keyword">var</span> undefinedVar;</div><div class="line">mySet.add(<span class="number">1</span>);</div><div class="line">mySet.add(<span class="literal">true</span>);</div><div class="line">mySet.add(<span class="string">'a string.'</span>);</div><div class="line">mySet.add(undefinedVar);</div><div class="line">mySet.add(<span class="number">5</span>);</div><div class="line"><span class="built_in">console</span>.log(mySet); <span class="comment">// Set &#123;1, true, "a string.", undefined, 5&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 判断Set中是否存在某元素</span></div><div class="line">mySet.has(<span class="built_in">Math</span>.sqrt(<span class="number">25</span>)); <span class="comment">// true</span></div><div class="line">mySet.has(<span class="string">'A string.'</span>.toLowerCase()); <span class="comment">// true</span></div><div class="line">mySet.has(<span class="literal">undefined</span>); <span class="comment">// true</span></div><div class="line">mySet.has(<span class="number">0.2</span> + <span class="number">0.1</span> === <span class="number">0.3</span>); <span class="comment">// false, 表达式结果为false, mySet里没有false元素，故返回false</span></div><div class="line"></div><div class="line"><span class="comment">// 删除Set中的元素</span></div><div class="line">mySet.delete(<span class="number">5</span>);</div><div class="line">mySet.has(<span class="number">5</span>); <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历Set中的元素</span></div><div class="line"><span class="comment">// for .. of 方式</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> mySet) &#123;</div><div class="line">	<span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1, true, 'a string.', undefined</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> mySet.keys()) &#123;</div><div class="line">	<span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1, true, 'a string.', undefined</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> mySet.values()) &#123;</div><div class="line">	<span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1, true, 'a string.', undefined</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> mySet.entries()) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> ==&gt; <span class="subst">$&#123;value&#125;</span>`</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1 ==&gt; 1, true == &gt; true, 'a string.' ==&gt; 'a string.', undefined ==&gt; undefined</span></div><div class="line"><span class="comment">// 键与值相等</span></div><div class="line"></div><div class="line"><span class="comment">// forEach() 方法</span></div><div class="line">mySet.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(value);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 1, true, 'a string.', undefined</span></div></pre></td></tr></table></figure>
<h2 id="JavaScript中的函数"><a href="#JavaScript中的函数" class="headerlink" title="JavaScript中的函数"></a>JavaScript中的函数</h2><h3 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h3><ul>
<li><p>方式一（面向过程/函数声明风格）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a + b; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>方式二（函数表达式风格）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a + b; </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>方式三（Function构造器，不推荐）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"return a + b;"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>此外还有函数生成器、箭头函数表达式等函数定义方式，属于JS较新特性或高级函数技巧，后续再加以学习。</p>
</li>
</ul>
<h3 id="arguments关键字与rest参数"><a href="#arguments关键字与rest参数" class="headerlink" title="arguments关键字与rest参数"></a>arguments关键字与rest参数</h3><p>调用函数时，JavaScript允许传入任意个参数而不影响调用，即使传入参数多于或少于定义参数也没有问题（多余参数会被忽略）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.max(); <span class="comment">// -Infinity</span></div><div class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>); <span class="comment">// 1</span></div><div class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 2</span></div><div class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 3</span></div><div class="line"><span class="built_in">Math</span>.max([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// NaN</span></div><div class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>, <span class="string">'a string'</span>); <span class="comment">// NaN</span></div></pre></td></tr></table></figure>
<p>除了任意传参之外，JavaScript还提供了与这个特性配套的<code>arguments</code>关键字对象与<code>rest</code>参数。</p>
<ul>
<li><p><code>arguments</code> 只在函数内部起作用，通过 <code>arguments</code> 可获得调用者传入函数的所有参数。</p>
<p><code>arguments</code> 与 <code>Array</code> 比较相似，但不等于 <code>Array</code> ，只具有 <code>length</code> 属性，但可以通过一些方式转换为 <code>Array</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mySum</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> res = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">		res += <span class="built_in">arguments</span>[i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line">mySum(); <span class="comment">// 0</span></div><div class="line">mySum(<span class="number">1</span>); <span class="comment">// 1</span></div><div class="line">mySum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></div><div class="line">mySum(<span class="string">' is '</span>, <span class="string">'zero.'</span>); <span class="comment">// "0 is zero."</span></div><div class="line">mySum(<span class="literal">Infinity</span>, -<span class="literal">Infinity</span>); <span class="comment">// NaN</span></div><div class="line"></div><div class="line"><span class="comment">// 通过arguments连接多个字符串</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myConcat</span>(<span class="params">separator</span>) </span>&#123;</div><div class="line">  	<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">	<span class="keyword">return</span> args.join(separator);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myConcat(<span class="string">", "</span>, <span class="string">"red"</span>, <span class="string">"orange"</span>, <span class="string">"blue"</span>); <span class="comment">// "red, orange, blue"</span></div><div class="line">myConcat(<span class="string">"; "</span>, <span class="string">"elephant"</span>, <span class="string">"giraffe"</span>, <span class="string">"lion"</span>, <span class="string">"cheetah"</span>); <span class="comment">// "elephant; giraffe; lion; cheetah"</span></div><div class="line"></div><div class="line"><span class="comment">// 将arguments转化为Array</span></div><div class="line"><span class="comment">// 通过 from() 方法</span></div><div class="line"><span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</div><div class="line"><span class="comment">// 通过spread运算符</span></div><div class="line"><span class="keyword">var</span> args = [...arguments];</div></pre></td></tr></table></figure>
<p><code>arguments</code> 值永远与对应命名参数的值保持同步：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">	<span class="built_in">arguments</span>[<span class="number">1</span>] = <span class="number">10</span>;</div><div class="line">	<span class="built_in">console</span>.log(num1 + num2);</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 11</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p><code>rest</code> 参数在ES6标准中被引入，若传入参数多于定义参数，多余的参数将以数组形式交给<code>rest</code>，若少于或等于，则 <code>rest</code> 为空数组.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(a);</div><div class="line">	<span class="built_in">console</span>.log(b);</div><div class="line">	<span class="built_in">console</span>.log(rest);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fun1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// [3, 4, 5]</span></div><div class="line">fun1(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// []</span></div><div class="line">fun1(<span class="number">1</span>);</div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// undefined</span></div><div class="line"><span class="comment">// []</span></div><div class="line"></div><div class="line"><span class="comment">// 利用rest，将传入参数返回为一个排序后的数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortRestArgs</span>(<span class="params">...theArgs</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> sortedArgs = theArgs.sort();</div><div class="line">	<span class="built_in">console</span>.log(sortedArgs);</div><div class="line">&#125;</div><div class="line"></div><div class="line">sortRestArgs(<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>); <span class="comment">// [1, 3, 5, 7]</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="作用域问题"><a href="#作用域问题" class="headerlink" title="作用域问题"></a>作用域问题</h3><ul>
<li><p>一般变量的作用域为整个函数体，在函数体外不可引用该变量，并且不同函数内部的同名变量互相独立，互不影响；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line">	x += <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">x += <span class="number">2</span>; <span class="comment">// ReferenceError: x is not defined</span></div></pre></td></tr></table></figure>
</li>
<li><p>全局变量/函数均绑定在 <code>window</code> 对象上；</p>
</li>
<li><p>内部函数可以访问外部函数定义的变量。若内部函数和外部函数的变量名重名，则使用内部函数变量（<strong>由内向外</strong>原则）；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> aVar = <span class="number">100</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">inFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> aVar = <span class="number">200</span>;</div><div class="line">		<span class="built_in">console</span>.log(aVar);</div><div class="line">	&#125;</div><div class="line">	inFun();</div><div class="line">	<span class="built_in">console</span>.log(aVar);</div><div class="line">&#125;</div><div class="line"></div><div class="line">outFun(); <span class="comment">// 200 100</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>变量提升，JS的一个坑。。JavaScript会把整个函数体内部的所有变量提升到顶部进行声明，即以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">	x += <span class="number">10</span>;</div><div class="line">	<span class="keyword">var</span> y = <span class="number">7</span>;</div><div class="line">	y += <span class="number">20</span>;</div><div class="line">	<span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 以上代码等效于</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> y;</div><div class="line">	<span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">	x += <span class="number">10</span>;</div><div class="line">	y = <span class="number">7</span>;</div><div class="line">	y += <span class="number">20</span>;</div><div class="line">	<span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就会导致一个变量可能在声明前就已被使用，但程序可以照常运行，并不符合使用前必须声明的语言规则。因而最好严格遵守 <strong>”在函数内部首先申明所有变量”</strong> 这一规则。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这段代码由于变量提升的特性可以正常运行，但这是不符合规则的bad code</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	<span class="comment">// var y; y的定义被提升到了此处</span></div><div class="line">	<span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">	x += <span class="number">10</span>;</div><div class="line">	y = <span class="number">7</span>; <span class="comment">// 此时按照代码文本，y尚未定义；然而实际上y的定义被提升到了开头处</span></div><div class="line">	<span class="keyword">var</span> y;</div><div class="line">	y += <span class="number">20</span>;</div><div class="line">	<span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line">myFun(); <span class="comment">// 47</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>若一个变量的作用范围仅为类似 <code>for</code> 、<code>while</code> 循环内部的局部范围，则此作用范围称之为 <code>局部作用域</code> / <code>块级作用域</code> ，然而 <code>var</code> 定义的变量范围为函数内部，于局部范围外依然可以引用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">		;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(i); <span class="comment">// 循环外部依然可用</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 以上代码等价为:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	<span class="keyword">var</span> i;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">		;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line">myFun(); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p>为了解决这个问题，ES6引入了 <code>let</code> 关键字来用以声明只具备块级作用域的局部变量：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">		;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(i); <span class="comment">// i 已不可使用</span></div><div class="line">&#125;</div><div class="line">myFun(); <span class="comment">// ReferenceError: i is not defined</span></div></pre></td></tr></table></figure>
<p>故在新标准下，局部变量应使用 <code>let</code> 来声明。</p>
</li>
<li><p>与 <code>let</code> 关键字一起，ES6标准还引入了用于声明 <strong>常量</strong> 的 <code>const</code> 关键字，在此之前，常量只能通过全字母大写来人为定义，并不能限制程序对于一个常量的修改行为。<code>const</code> 定义的变量不可以修改，而且必须初始化。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 过去</span></div><div class="line"><span class="keyword">var</span> PI = <span class="number">3.1415926</span>;</div><div class="line">PI += <span class="number">1.0</span>; <span class="comment">// OK</span></div><div class="line"><span class="comment">// 现在</span></div><div class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</div><div class="line">PI += <span class="number">1.0</span>; <span class="comment">// TypeError: Assignment to constant variable.</span></div></pre></td></tr></table></figure>
<p><strong>注</strong> ：<code>const</code> 定义的常量不可用 <code>delete</code> 删除。</p>
</li>
</ul>
<h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p><code>this</code> 关键字是什么？</p>
<p>答：即编程语言中的“我”的概念。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Flint = &#123;</div><div class="line">  	<span class="attr">age</span> : <span class="number">22</span>,</div><div class="line">  	<span class="attr">sayThis</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      	<span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;;</div><div class="line">Flint.sayThis(); <span class="comment">// Object &#123;age: 22&#125;</span></div></pre></td></tr></table></figure>
<p> <code>this</code> 指向 <code>Flint</code> ，即调用 <code>sayThis</code> 方法的“我”。</p>
<p>鉴于这又是JS的一个大坑（孔乙己：JavaScript ES6的函数有六种调用方式你知道吗？）更多的概念自己也没完全理解，感觉可以另写一篇文章来说明了，于是扔链接跑路=_=</p>
<p>关于对 <code>this</code> 以及通过 <code>apply()</code>，<code>call()</code> 方法来调用函数的更深入理解还是查看以下文档吧：</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external">MDN - this 关键字</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/23804247" target="_blank" rel="external">this 的值到底是什么？一次说清楚</a></p>
<p><a href="http://www.cnblogs.com/lisha-better/p/5684844.html" target="_blank" rel="external">JS中this关键字详解</a></p>
</blockquote>
<p><strong>ps.</strong> 听说记住这三点就不会被坑了：</p>
<blockquote>
<ol>
<li>当函数作为对象的方法调用时，<code>this</code> 就是该对象;</li>
<li>当函数作为单纯函数调用时，严格模式下，<code>this</code> 是 <code>undefined</code> ，非严格模式下是全局对象，浏览器中就是 <code>window</code> ;</li>
<li><code>this</code> 不是变量，嵌套函数中的<code>this</code> 不会从外层继承 <code>this</code> 值！</li>
</ol>
</blockquote>
<p>附：利用 <code>apply()</code> 统计方法调用次数（函数装饰器的简单使用）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> oldParseInt = <span class="built_in">parseInt</span>; <span class="comment">// 保存原函数</span></div><div class="line"></div><div class="line"><span class="built_in">window</span>.parseInt = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    count += <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> oldParseInt.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>); <span class="comment">// 调用原函数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 测试:</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>);</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'20'</span>);</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'30'</span>);</div><div class="line">count; <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>高阶函数又称算子或泛函，在计算机科学被定义为中至少满足下列一个条件的函数：</p>
<blockquote>
<ol>
<li>接受一个或多个函数作为输入；</li>
<li>输出一个函数。</li>
</ol>
</blockquote>
<p>一个简单的高阶函数例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, fun</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> fun(a) + fun(b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">sum(<span class="number">1</span>, <span class="number">-1</span>, <span class="built_in">Math</span>.abs); <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addOne</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> x + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sum(<span class="number">0</span>, <span class="number">0</span>, addOne); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h4 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h4><ul>
<li><p>在JavaScript中，<code>Array.prototype.map()</code> 方法返回一个由原 <code>Array</code> 中的每个元素调用指定方法后的返回值组成的新 <code>Array</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 计算Array中每个元素的平方根</span></div><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>];</div><div class="line"><span class="keyword">var</span> roots = numbers.map(<span class="built_in">Math</span>.sqrt); </div><div class="line">roots; <span class="comment">// [1, 2, 3, 4]</span></div><div class="line"></div><div class="line"><span class="comment">// 打印字符串中每个字符的ASCII码值</span></div><div class="line"><span class="keyword">var</span> map = <span class="built_in">Array</span>.prototype.map;</div><div class="line"><span class="keyword">var</span> arr = map.call(<span class="string">"Hello World"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> c.charCodeAt(<span class="number">0</span>);</div><div class="line">&#125;);</div><div class="line">arr; <span class="comment">// [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]</span></div><div class="line"></div><div class="line"><span class="comment">// 反转字符串</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'12345'</span>;</div><div class="line"><span class="built_in">Array</span>.prototype.map.call(str, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> c;</div><div class="line">&#125;).reverse().join(<span class="string">''</span>); <span class="comment">// "54321"</span></div><div class="line"></div><div class="line"><span class="comment">// 将不规范英文名变为首字母大写其余字母小写的形式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalize</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> s.toLowerCase()[<span class="number">0</span>].toUpperCase() + s.slice(<span class="number">1</span>, s.length).toLowerCase();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> arr.map(f);</div><div class="line">&#125;</div><div class="line">normalize([<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>]); <span class="comment">// ["Adam", "Lisa", "Bart"]</span></div><div class="line"></div><div class="line"><span class="comment">// 传递函数有多个参数时，需要通过自定义用户函数来作为传递函数</span></div><div class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>); <span class="comment">// [1, NaN, NaN], 原因是parseInt需要还需要第二个不可忽略参数：进制</span></div><div class="line"><span class="comment">// 解决办法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myParseInt</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">parseInt</span>(x, <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(myParseInt); <span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p><code>Array.prototype.reduce()</code> 按从左到右的顺序把函数结果继续和序列的下一个元素按指定方法做累积计算。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// [x1, x2, x3, x4].reduce(f) ==&gt; f(f(f(x1, x2), x3), x4)</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a + b;</div><div class="line">&#125;); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p>直觉上 <code>reduce()</code> 只需传入一个参数，即一个传入两个参数返回一个参数的 <code>callback</code> 函数.</p>
<p>实际上该 <code>callback</code> 函数拥有4个参数：<code>accumulator</code>, <code>currentValue</code>, <code>currentIndex</code>, <code>array</code> ；而除了 <code>callback</code></p>
<p>函数这个参数外， <code>reduce()</code> 本身还有一个叫 <code>initialValue</code> 的可选参数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> initialValue = <span class="string">'alpha: '</span>;</div><div class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">accumulator, currentValue, currentIndex, array</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> accumulator + currentValue;</div><div class="line">&#125;, initialValue); <span class="comment">// "alpha: ABCD"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">call</th>
<th style="text-align:center"><code>accumulator</code></th>
<th style="text-align:center"><code>currentValue</code></th>
<th style="text-align:center"><code>currentIndex</code></th>
<th style="text-align:center"><code>array</code></th>
<th style="text-align:center"><code>return value</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">first</td>
<td style="text-align:center"><code>&#39;alpha: &#39;</code></td>
<td style="text-align:center"><code>&#39;A&#39;</code></td>
<td style="text-align:center"><code>1</code></td>
<td style="text-align:center"><code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]</code></td>
<td style="text-align:center"><code>&#39;alpha: A&#39;</code></td>
</tr>
<tr>
<td style="text-align:center">second</td>
<td style="text-align:center"><code>&#39;alpha: A&#39;</code></td>
<td style="text-align:center"><code>&#39;B&#39;</code></td>
<td style="text-align:center"><code>2</code></td>
<td style="text-align:center"><code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]</code></td>
<td style="text-align:center"><code>&#39;alpha: AB&#39;</code></td>
</tr>
<tr>
<td style="text-align:center">third</td>
<td style="text-align:center"><code>&#39;alpha: AB&#39;</code></td>
<td style="text-align:center"><code>&#39;C&#39;</code></td>
<td style="text-align:center"><code>3</code></td>
<td style="text-align:center"><code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]</code></td>
<td style="text-align:center"><code>&#39;alpha: ABC&#39;</code></td>
</tr>
<tr>
<td style="text-align:center">fourth</td>
<td style="text-align:center"><code>&#39;alpha: ABC&#39;</code></td>
<td style="text-align:center"><code>&#39;D&#39;</code></td>
<td style="text-align:center"><code>4</code></td>
<td style="text-align:center"><code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]</code></td>
<td style="text-align:center"><code>&#39;alpha: ABCD&#39;</code></td>
</tr>
</tbody>
</table>
</div>
<p>  一些 <code>reduce()</code> 的简单应用：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组扁平化</span></div><div class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce( <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a.concat(b);</div><div class="line">&#125;); <span class="comment">// [0, 1, 2, 3, 4, 5]</span></div><div class="line"></div><div class="line"><span class="comment">// 统计Array中各个值出现次数</span></div><div class="line"><span class="keyword">var</span> colors = [<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'orangr'</span>, <span class="string">'green'</span>, <span class="string">'red'</span>, <span class="string">'red'</span>, <span class="string">'blue'</span>];</div><div class="line"><span class="keyword">var</span> countedColors = colors.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">allColors, color</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (color <span class="keyword">in</span> allColors) &#123;</div><div class="line">		allColors[color]++;</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		allColors[color] = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> allColors;</div><div class="line">&#125;, &#123;&#125;);</div><div class="line">countedColors; <span class="comment">// Object &#123;blue: 2, red: 3, orangr: 1, green: 1&#125;</span></div></pre></td></tr></table></figure>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p><code>filter()</code> 方法使用指定的函数测试所有元素，并创建一个包含所有通过测试的元素的新数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将Array中的小写字母筛去</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUpper</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> c.charCodeAt(<span class="number">0</span>) &gt;= <span class="string">'A'</span>.charCodeAt(<span class="number">0</span>) &amp;&amp; c.charCodeAt(<span class="number">0</span>) &lt;= <span class="string">'Z'</span>.charCodeAt(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">[<span class="string">'A'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'D'</span>, <span class="string">'e'</span>, <span class="string">'F'</span>].filter(isUpper); <span class="comment">// ["A", "D", "F"]</span></div><div class="line"></div><div class="line"><span class="comment">// 将Array中重复元素删去</span></div><div class="line"><span class="keyword">var</span> elements = [<span class="number">3.14</span>, <span class="string">'pi'</span>, <span class="string">'e'</span>, <span class="number">2.718281828</span>, <span class="string">'e'</span>, <span class="string">'e'</span>, <span class="number">3.14</span>, <span class="number">3.1415926</span>];</div><div class="line">elements.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, self</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> self.indexOf(element) === index;</div><div class="line">&#125;); <span class="comment">// [3.14, "pi", "e", 2.718281828, 3.1415926]</span></div><div class="line"></div><div class="line"><span class="comment">// 筛素数 1 ~ 100</span></div><div class="line"><span class="keyword">var</span> num = [...Array(<span class="number">100</span>).keys()];</div><div class="line">num.filter(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">Math</span>.sqrt(x + <span class="number">0.5</span>); i++) &#123;</div><div class="line">		<span class="keyword">if</span> (x % i === <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> x !== <span class="number">1</span> &amp;&amp; x !== <span class="number">0</span>;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]</span></div></pre></td></tr></table></figure>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>和很多语言不太一样，<code>sort()</code> 方法默认排序顺序是先将数组元素转化为字符串，再根据字符串Unicode码值来排序（即字典序）。</p>
<p>因为这个默认的排序规则，新手使用 <code>sort()</code> 方法常常会遇到一些可怕的事：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">4</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">9</span>].sort(); <span class="comment">// [10, 2, 30, 4, 9] ！！！</span></div><div class="line"><span class="comment">// 数值排序在欢声笑语中打出了GG</span></div></pre></td></tr></table></figure>
<p>好在 <code>sort()</code> 方法有着高阶函数的尊严，可以自定义排序规则：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数值升序排序</span></div><div class="line">[<span class="number">4</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">9</span>].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a &gt; b;</div><div class="line">&#125;); <span class="comment">// [2, 4, 9, 10, 30]</span></div><div class="line"></div><div class="line"><span class="comment">// 数值降序排序</span></div><div class="line">[<span class="number">4</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">9</span>].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> b - a;</div><div class="line">&#125;); <span class="comment">// [30, 10, 9, 4, 2]</span></div><div class="line"></div><div class="line"><span class="comment">// 忽略字母大小写的字典序排序</span></div><div class="line"><span class="keyword">var</span> companys = [<span class="string">'Apple'</span>, <span class="string">'Facebook'</span>, <span class="string">'Microsoft'</span>, <span class="string">'cisio'</span>, <span class="string">'amazon'</span>, <span class="string">'Tecent'</span>, <span class="string">'baidu'</span>, <span class="string">'Alibaba'</span>, <span class="string">'Google'</span>];</div><div class="line">companys.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> s1 = a.toLowerCase();</div><div class="line">	<span class="keyword">var</span> s2 = b.toLowerCase();</div><div class="line">	<span class="keyword">return</span> s1 &gt; s2;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// ["Alibaba", "amazon", "Apple", "baidu", "cisio", "Facebook", "Google", "Microsoft", "Tecent"]</span></div><div class="line"></div><div class="line"><span class="comment">// 按字符串长度排序，若相等则按字典序排序</span></div><div class="line"><span class="keyword">var</span> companys = [<span class="string">'Apple'</span>, <span class="string">'Facebook'</span>, <span class="string">'Microsoft'</span>, <span class="string">'cisio'</span>, <span class="string">'amazon'</span>, <span class="string">'Tecent'</span>, <span class="string">'baidu'</span>, <span class="string">'Alibaba'</span>, <span class="string">'Google'</span>];</div><div class="line">companys.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> len1 = a.length;</div><div class="line">	<span class="keyword">var</span> len2 = b.length;</div><div class="line">	<span class="keyword">return</span> len1 &gt; len2 || (len1 === len2 &amp;&amp; a &gt; b);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// ["Apple", "baidu", "cisio", "Google", "Tecent", "amazon", "Alibaba", "Facebook", "Microsoft"]</span></div></pre></td></tr></table></figure>
<h3 id="闭包（Closure）"><a href="#闭包（Closure）" class="headerlink" title="闭包（Closure）"></a>闭包（Closure）</h3><p>一个较为直观的定义：</p>
<blockquote>
<p>闭包就是能够读取其他函数内部变量的函数</p>
</blockquote>
<p>感觉智商被掏空。。还需要多学习多学习：</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="external">MDN - 闭包</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="external">学习Javascript闭包（Closure） - 阮一峰的网络日志</a></p>
</blockquote>
<p>闭包多用来模拟其他编程语言的 <code>private</code> 属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Counter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> privateCounter = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeBy</span>(<span class="params">val</span>) </span>&#123; <span class="comment">// 实际上changeBy()方法成为私有方法</span></div><div class="line">        privateCounter += val;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">increment</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            changeBy(<span class="number">1</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">decrement</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            changeBy(<span class="number">-1</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> privateCounter;</div><div class="line">        &#125;</div><div class="line">    &#125;   </div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Counter.value()); <span class="comment">// 0</span></div><div class="line">Counter.increment();</div><div class="line">Counter.increment();</div><div class="line"><span class="built_in">console</span>.log(Counter.value()); <span class="comment">// 2</span></div><div class="line">Counter.decrement();</div><div class="line"><span class="built_in">console</span>.log(Counter.value()); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h3 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h3><p>虽然ES6才有的这货长得很像 <code>lambda</code> 函数表达式，但实际上JavaScript本来就是一门大量借鉴了函数式编程思想语言，比起其他语言半残废的 <code>lambda</code> ，JS很早就支持类似概念的匿名函数了。</p>
<p>具体使用方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(param1, param2, …, paramN) =&gt; expression</div><div class="line"><span class="comment">// or</span></div><div class="line">(param1, param2, …, paramN) =&gt; &#123; statements &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> pow = <span class="function"><span class="params">x</span> =&gt;</span> x * x;</div><div class="line">pow(<span class="number">2.5</span>); <span class="comment">// 6.25</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> sayHi = <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">'Hi!'</span>);&#125;</div><div class="line">sayHi(); <span class="comment">// "Hi"</span></div></pre></td></tr></table></figure>
<p>更多特性与使用技巧参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">MDN - Arrow Function</a></p>
<h3 id="yield-关键字-与-generator-对象"><a href="#yield-关键字-与-generator-对象" class="headerlink" title="yield 关键字 与 generator 对象"></a>yield 关键字 与 generator 对象</h3><p>这个概念之前学Python时接触过。。懒得填这个坑了，将来接触 <code>function*</code> 和 <code>AJAX</code> 再单独写文章说明吧。。</p>
<p>简单说调用 <code>generator</code> 的优势在于不立即执行并保存上次执行状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考 &amp;amp; 学习：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000&quot;&gt;廖老师的JavaScript教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference&quot;&gt;JavaScript 参考文档&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3school.com.cn/js/index.asp&quot;&gt;W3School JavaScript 教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由衷感谢这些资料的提供者与撰写者！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript学习" scheme="https://flintx.github.io/categories/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="https://flintx.github.io/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://flintx.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记01（基本语法、数据类型、运算符）</title>
    <link href="https://flintx.github.io/2017/02/23/learnjs-01/"/>
    <id>https://flintx.github.io/2017/02/23/learnjs-01/</id>
    <published>2017-02-23T04:40:58.000Z</published>
    <updated>2017-03-03T08:13:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>参考 &amp; 学习：</p>
<p><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖老师的JavaScript教程</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference" target="_blank" rel="external">JavaScript 参考文档</a><br><a href="http://www.w3school.com.cn/js/index.asp" target="_blank" rel="external">W3School JavaScript 教程</a></p>
<p>由衷感谢这些资料的提供者与撰写者！</p>
</blockquote>
<a id="more"></a>
<h2 id="基本语法-amp-数据类型"><a href="#基本语法-amp-数据类型" class="headerlink" title="基本语法 &amp; 数据类型"></a>基本语法 &amp; 数据类型</h2><h3 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h3><ul>
<li>变量名是大小写英文、数字、<code>$</code>和<code>_</code>的组合，且不能用数字开头，使用var进行基本赋值：<code>var x = 1;</code></li>
</ul>
<h3 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h3><ul>
<li><p>字符串（String）类型可以使用单引号<code>&#39;</code>或双引号<code>&quot;</code>来指示文本范围，并且可以在单引号中使用双引号，或是双引号中使用单引号。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"My name is '233', and you?"</span>); <span class="comment">// My name is '233', and you?</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Nice to meet you, "666"'</span>); <span class="comment">// Nice to meet you, "666"</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果需要存储多行字符串，可使用``来表示.</p>
</li>
<li><p>多个字符串的链接可以使用<code>+</code>操作符，或采用ES6新增的模板字符串.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">     <span class="keyword">var</span> s = <span class="string">`Esl</span></div><div class="line">     Psy</div><div class="line">     Congroo`;</div><div class="line">     <span class="built_in">console</span>.log(s);</div><div class="line">     <span class="comment">/*</span></div><div class="line">* Esl</div><div class="line">* Psy</div><div class="line">* Congroo</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">var</span> name = <span class="string">'Flint'</span>;</div><div class="line"><span class="keyword">var</span> age = <span class="string">'22'</span>;</div><div class="line"><span class="keyword">var</span> s1 = <span class="string">'My name is '</span> + name + <span class="string">' and I\'m '</span> + age + <span class="string">' years old.'</span>;</div><div class="line"><span class="built_in">console</span>.log(s1); <span class="comment">// My name is Flint and I'm 22 years old.</span></div><div class="line"><span class="keyword">var</span> s2 = <span class="string">`My name is <span class="subst">$&#123;name&#125;</span> and I\'m <span class="subst">$&#123;age&#125;</span> years old.`</span>;</div><div class="line"><span class="built_in">console</span>.log(s2); <span class="comment">// My name is Flint and I'm 22 years old.</span></div><div class="line">s1 === s2; <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>注意</strong>：模板字符串仅可用于``包括的字符串.</p>
</li>
<li><p><strong>特别注意</strong>：字符串是不可变的，String 类定义的方法都不能改变字符串的内容。虽然对字符串的某个索引赋值不会有错误提示，但是也没有任何效果。诸如toUpperCase() 方法，返回的是全新的字符串，而不是修改原始字符串。</p>
</li>
<li><p>关于字符串的各种操作，今后使用中再进行整理归纳。</p>
<pre><code>详细资料：[JavaScript String 对象属性与方法](http://www.w3school.com.cn/jsref/jsref_obj_string.asp)
</code></pre></li>
</ul>
<h3 id="数值（Number）"><a href="#数值（Number）" class="headerlink" title="数值（Number）"></a>数值（Number）</h3><ul>
<li><p>基本类型包括：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span>; <span class="comment">// 整数123</span></div><div class="line"><span class="number">0.456</span>; <span class="comment">// 浮点数0.456</span></div><div class="line"><span class="number">6.66666e4</span>; <span class="comment">// 科学计数法表示的6.66666x10^4，等同于66666.6</span></div><div class="line"><span class="number">-789</span>; <span class="comment">// 负数</span></div><div class="line"><span class="literal">NaN</span>; <span class="comment">// NaN表示Not a Number，当无法计算结果时用NaN表示</span></div><div class="line"><span class="literal">Infinity</span>; <span class="comment">// Infinity表示无限大，当数值超过了最大值时，就表示为Infinity</span></div><div class="line"></div><div class="line"><span class="comment">/*基本运算*/</span></div><div class="line"><span class="number">1</span> + <span class="number">1</span>; <span class="comment">// 2</span></div><div class="line"><span class="number">4</span> - <span class="number">5.1</span>; <span class="comment">// -1.0999999999999996</span></div><div class="line"><span class="number">3</span> / <span class="number">2</span> <span class="comment">// 1.5, JS中没有整除运算，需要整除运算可使用Math.floor或Math.ceil</span></div><div class="line"><span class="number">5</span> % <span class="number">3</span> <span class="comment">// 2, 取余数</span></div><div class="line"><span class="number">7.5</span> % <span class="number">1</span> <span class="comment">// 0.5, 浮点数亦可</span></div><div class="line"><span class="number">2</span> / <span class="number">0</span>; <span class="comment">// Infinity</span></div><div class="line"><span class="number">0</span> / <span class="number">0</span>; <span class="comment">// NaN</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>值得注意的是，JS的浮点数运算有一个固有bug，即精度误差：<code>0.1 + 0.2 == 0.3</code> 返回结果为<code>false</code>，利用<code>console.log(0.2 + 0.1)</code>，得到结果<code>0.30000000000000004</code>。这是由于二进制运算机制造成的（部分小数无法用有限位二进制表示，比如<code>0.1</code> <code>0.33</code> 等），几乎所有的编程语言都会有类似精度误差的问题，包括C/C++/Java/Python等。解决此类问题可以参考<a href="http://madscript.com/javascript/javscript-float-number-compute-problem/" target="_blank" rel="external">通过isEqual工具方法判断数值是否相等</a>，或者给出明确的精度要求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 利用fix</span></div><div class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// false</span></div><div class="line"><span class="built_in">parseFloat</span>((<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">2</span>)) === <span class="number">0.3</span>; <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 利用abs</span></div><div class="line"><span class="number">1</span> / <span class="number">3</span> === (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>); <span class="comment">// false</span></div><div class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span> / <span class="number">3</span> - (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>)) &lt; <span class="number">0.0000001</span>; <span class="comment">// true</span></div><div class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span> / <span class="number">3</span> - (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>)) &lt; <span class="number">1e-7</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>此外，JS中所有数字均为<strong>64</strong>位。</p>
<p>详细资料：<a href="http://www.w3school.com.cn/jsref/jsref_obj_number.asp" target="_blank" rel="external">JavaScript Number 对象属性与方法</a></p>
</li>
</ul>
<h3 id="布尔（Boolean）"><a href="#布尔（Boolean）" class="headerlink" title="布尔（Boolean）"></a>布尔（Boolean）</h3><ul>
<li><p>布尔（Boolean）类型只有<code>true</code>、<code>false</code>两种值，以及与<code>&amp;&amp;</code>或<code>||</code>非<code>!</code>三种运算。</p>
<p>详细资料：<a href="http://www.w3school.com.cn/jsref/jsref_obj_boolean.asp" target="_blank" rel="external">JavaScript Boolean 对象属性与方法</a></p>
</li>
</ul>
<h3 id="“空”（undefined、null）"><a href="#“空”（undefined、null）" class="headerlink" title="“空”（undefined、null）"></a>“空”（undefined、null）</h3><ul>
<li>JS中有两种表示”空”的类型，即<code>null</code>与<code>undefined</code>，类似于C/C++的<code>NULL</code>或Python的<code>None</code>。其中<code>null</code>表示一个空的值，而<code>undefined</code>表示值未定义。</li>
<li><code>null</code>不同于<code>0</code>以及<code>&#39;&#39;</code>，<code>0</code>是数值0，<code>&#39;&#39;</code>表示长度为0的字符串</li>
</ul>
<h3 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h3><ul>
<li><p>数组（Array）类型与Python的list比较相似，可以存储不同数据类型的元素，并能直接用[]操作符或<code>new Array()</code>方法来构造一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="string">'dog'</span>, <span class="string">'利'</span>, <span class="string">'郭嘉'</span>, <span class="string">'live'</span> === <span class="string">'die'</span>, <span class="number">1</span>];</div><div class="line"><span class="built_in">console</span>.log(array); <span class="comment">// ["dog", "利", "郭嘉", false, 1]</span></div><div class="line"><span class="built_in">console</span>.log(array.length); <span class="comment">// 5</span></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(array, <span class="string">'Not because of bad fortune to avoid the trend'</span>, <span class="string">'haha'</span>);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [Array[5], "Not because of bad fortune to avoid the trend", "haha"]</span></div><div class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 3</span></div><div class="line">arr[<span class="number">0</span>]; <span class="comment">// ["dog", "利", "郭嘉", false, 1]</span></div><div class="line">arr[<span class="number">1</span>]; <span class="comment">// "Not because of bad fortune to avoid the trend"</span></div><div class="line">arr[<span class="number">3</span>]; <span class="comment">// undefined, 超出索引范围返回undefined</span></div></pre></td></tr></table></figure>
</li>
<li><p>Array 的 <code>length</code> 属性是可读写的，可以通过设置这个属性来移除数组尾部元素与增添新的数组元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>];</div><div class="line"><span class="built_in">console</span>.log(colors.length); <span class="comment">// 3</span></div><div class="line">colors.length = <span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(colors[<span class="number">2</span>]); <span class="comment">// undefined</span></div><div class="line">colors.length = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(colors[<span class="number">2</span>]); <span class="comment">// undefined, 'green'已被删除</span></div><div class="line">colors[<span class="number">2</span>] = <span class="string">'gray'</span>;</div><div class="line">colors[colors.length] = <span class="string">'pink'</span>;</div><div class="line">colors[colors.length] = <span class="string">'orange'</span>;</div><div class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["blue", "red", "gray", "pink", "orange"]</span></div></pre></td></tr></table></figure>
</li>
<li><p>所有对象均有 <code>toLocaleString()</code> 、<code>toString()</code> 、 <code>valueOf()</code> 方法用于转换，默认转换方法为 <code>toString()</code> 。除此之外，默认分隔符为逗号，但可以使用 <code>join()</code> 方法来使用不同分隔符构建字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>];</div><div class="line"><span class="built_in">console</span>.log(colors.join(<span class="string">'! '</span>)); <span class="comment">// blue! red! green</span></div><div class="line"><span class="built_in">console</span>.log(colors.join(<span class="string">' + '</span>)); <span class="comment">// blue + red + green</span></div><div class="line"><span class="built_in">console</span>.log(colors.join(<span class="string">'\n'</span>));</div><div class="line"><span class="comment">// blue</span></div><div class="line"><span class="comment">// red</span></div><div class="line"><span class="comment">// green</span></div></pre></td></tr></table></figure>
</li>
<li><p>Array 通过 <code>concat()</code> 方法来构建新数组，通过 <code>slice()</code> 方法对数组进行切片。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>];</div><div class="line">colors.concat(<span class="string">'orange'</span>, [<span class="string">'pink'</span>, <span class="string">'gray'</span>]);</div><div class="line"><span class="comment">// ["blue", "red", "green", "orange", "pink", "gray"]</span></div><div class="line">colors.slice(<span class="number">0</span>, <span class="number">3</span>);</div><div class="line"><span class="comment">// ["blue", "red", "green"]</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>Array 具有五种迭代方法，分别是：</p>
<ul>
<li><code>every()</code> : 对Array的每一个元素运行指定函数，若该函数对每一项都返回 <code>true</code> ，则返回 <code>true</code> .</li>
<li><code>filter()</code> : 对Array的每一个元素运行指定函数，返回运行该函数返回 <code>true</code> 的元素组成的Array.</li>
<li><code>forEach()</code> : 对Array的每一个元素运行指定函数，无返回值.</li>
<li><code>map()</code> : 对Array的每一个元素运行指定函数，返回每次函数调用结果组成的Array.</li>
<li><code>some()</code> : 对Array的每一个元素运行指定函数，若该函数存在任一项返回 <code>true</code> ，则返回 <code>true</code> .</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'orange'</span>, <span class="string">'pink'</span>];</div><div class="line">colors.every(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (element.length &gt; <span class="number">3</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;); <span class="comment">// false</span></div><div class="line"></div><div class="line">colors.some(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (element.length &gt; <span class="number">3</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;); <span class="comment">// true</span></div><div class="line"></div><div class="line">colors.map(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> element.toUpperCase();</div><div class="line">&#125;); <span class="comment">// ["BLUE", "RED", "GREEN", "ORANGE", "PINK"]</span></div><div class="line"></div><div class="line">colors.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> element.length === <span class="number">4</span>;</div><div class="line">&#125;); <span class="comment">// ["blue", "pink"]</span></div><div class="line"></div><div class="line">colors.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> s = element[<span class="number">0</span>].toUpperCase() + element.slice(<span class="number">1</span>, element.length);</div><div class="line">	<span class="built_in">console</span>.log(s);</div><div class="line">&#125;); </div><div class="line"><span class="comment">// Blue</span></div><div class="line"><span class="comment">// Red</span></div><div class="line"><span class="comment">// Green</span></div><div class="line"><span class="comment">// Orange</span></div><div class="line"><span class="comment">// Pink</span></div></pre></td></tr></table></figure>
</li>
<li><p>Array 可通过 <code>push()</code> 与 <code>pop()</code> 方法实现栈操作，通过 <code>shift()</code> 与 <code>push()</code> 方法（后增前删） 或 <code>unshift()</code> 与 <code>pop()</code> 方法（前增后删）实现队列操作。</p>
</li>
<li><p>Array 可通过 <code>reverse()</code> 方法逆转数组，通过高级函数 <code>sort()</code> 实现自定义比较关系排序（默认字典序）。</p>
</li>
<li><p>Array 可通过 <code>indexOf()</code> 和 <code>lastIndexOf()</code> 方法来查找一个数组中的元素，前者从前往后查找，后者反之，使用全等操作法 <code>===</code> 来比较待查找元素，返回元素在数组中的位置，未找到返回 <code>-1</code> 。第一个参数为查找项，第二个可选参数为查找起点位置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'orange'</span>, <span class="string">'pink'</span>];</div><div class="line">colors.indexOf(<span class="string">'pink'</span>); <span class="comment">// 4</span></div><div class="line">colors.lastIndexOf(<span class="string">'red'</span>); <span class="comment">// 1</span></div><div class="line">colors.indexOf(<span class="string">'red'</span>, <span class="number">2</span>); <span class="comment">// -1</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>详细资料：<a href="http://www.w3school.com.cn/jsref/jsref_obj_array.asp" target="_blank" rel="external">JavaScript Array 对象属性与方法</a></p>
</li>
</ul>
<h3 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h3><ul>
<li><p>对象（Object）感觉更像Python里面的dict，是一种无序的集合数据类型，由若干<code>(key: value)</code>的键值对组成。</p>
</li>
<li><p>基本上 JavaScript 里的任何东西都是对象。</p>
</li>
<li><p>用面向对象（Object - Oriented）的观点来看，对象由属性与方法组成，其本质上也还是键值对，即<code>(属性名/PropertyName: 属性值)</code> 与 <code>(方法名/MethodName: 函数表达式或Function对象)</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myDog = &#123;</div><div class="line">  	<span class="attr">name</span>: <span class="string">'233'</span>,</div><div class="line">  	<span class="attr">age</span>: <span class="number">3</span>,</div><div class="line">  	<span class="string">'back-color'</span>: <span class="number">0x3f3f3f</span>, <span class="comment">// 如果属性名包含特殊字符，必须使用''括起来</span></div><div class="line">  	bark: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"汪汪汪!"</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/*访问对象属性与方法*/</span></div><div class="line"><span class="built_in">console</span>.log(myDog.name); <span class="comment">// 通过.操作符访问对象属性</span></div><div class="line"><span class="built_in">console</span>.log(myDog[<span class="string">'age'</span>]); <span class="comment">// 通过[]操作符访问对象属性</span></div><div class="line"><span class="built_in">console</span>.log(myDog[<span class="string">'back-color'</span>]); <span class="comment">// 若属性名包含特殊字符, 则只能用[]操作符来访问</span></div><div class="line">myDog.bark(); <span class="comment">// 通过.操作符访问对象方法</span></div><div class="line"><span class="built_in">console</span>.log(myDog.girlfrind); <span class="comment">// undefined, 不存在该属性</span></div><div class="line"></div><div class="line"><span class="comment">/*增删对象属性与方法*/</span></div><div class="line">myDog.girlfrind = <span class="string">'666'</span>; <span class="comment">// 新增一个girlfriend属性</span></div><div class="line"><span class="built_in">console</span>.log(myDog.girlfriend); <span class="comment">// 666</span></div><div class="line">myDog.girlfriend = <span class="string">'QAQ'</span>; <span class="comment">// 修改girlfriend属性</span></div><div class="line"><span class="built_in">console</span>.log(myDog.girlfriend); <span class="comment">// QAQ</span></div><div class="line"><span class="keyword">delete</span> myDog.girlfriend; <span class="comment">// 删除girlfriend属性, delete myDog['girlfrind']亦可</span></div><div class="line"><span class="built_in">console</span>.log(myDog.girlfriend); <span class="comment">// undefined, 不存在该属性</span></div><div class="line"></div><div class="line"><span class="comment">/*验证对象是否存在某属性或方法*/</span></div><div class="line"></div><div class="line"><span class="comment">// 检测对象是否拥有某一属性，可以用in操作符</span></div><div class="line"><span class="string">'name'</span> <span class="keyword">in</span> myDog; <span class="comment">// true</span></div><div class="line"><span class="string">'girlfriend'</span> <span class="keyword">in</span> myDog; <span class="comment">// false</span></div><div class="line"><span class="string">'toString'</span> <span class="keyword">in</span> myDog; <span class="comment">// true, 该属性继承自object对象</span></div><div class="line"></div><div class="line"><span class="comment">// 判断一个属性是否为对象自身拥有，而非继承得到，可使用hasOwnProperty()方法</span></div><div class="line">myDog.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></div><div class="line">myDog.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// false</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="条件判断-amp-循环控制"><a href="#条件判断-amp-循环控制" class="headerlink" title="条件判断 &amp; 循环控制"></a>条件判断 &amp; 循环控制</h2><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p>条件判断，与多数编程语言大同小异，就是<code>if</code> <code>else</code> <code>else if</code>，以及<code>switch</code>,并且支持嵌套。</p>
<p>需要注意的就是<code>if</code>后的条件判断语句，一般是值为 <code>true</code> 或 <code>false</code> 的表达式，但JavaScript并没有像Java一样强制要求是逻辑判断表达式，条件语句的位置可能会有其他语句出现。</p>
<p>于是有如下准则：</p>
<blockquote>
<p>所有<strong>不是</strong> <code>undefined</code>、<code>null</code>、<code>0</code>、<code>NaN</code>、空字符串 (<code>&quot;&quot;</code>) 的任意对象，包括值为<code>false</code>的Boolean对象， 在条件语句中都为<strong>true</strong>。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</div><div class="line"><span class="keyword">if</span> (b) <span class="comment">// 表达式的值为true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"><span class="comment">/* </span></div><div class="line"> * 反观C++，若bool b = false;</div><div class="line"> * 则if (b) 表达式值为false.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="string">'123'</span>;</div><div class="line"><span class="keyword">var</span> es = <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span> (s.length) &#123; <span class="comment">// 条件计算结果为3, 表达式值为true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (s) &#123; <span class="comment">// '123'表达式值为true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (es) &#123; <span class="comment">// ''表达式值为false</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> zero = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (zero) <span class="comment">// 表达式结果为false</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"><span class="keyword">if</span> (!zero) <span class="comment">// 表达式结果为true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="comment">// !!!这仅是实验，极其不推荐在条件表达式中单纯的使用赋值语句</span></div><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>, y = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (x = y) <span class="comment">// 表达式结果为false</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>, y = <span class="number">2</span>;</div><div class="line"><span class="keyword">if</span> (x = y) <span class="comment">// 表达式结果为true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>);</div><div class="line"><span class="comment">// 在赋值语句作为条件表达式的情况下，先执行赋值语句，然后将赋值后对象作为条件</span></div></pre></td></tr></table></figure>
<p>总结一下，就是：</p>
<blockquote>
<p>尽量使用值为 true 或 false 的逻辑表达式作为condition</p>
<p>“空”（<code>undefined</code>、<code>null</code>、<code>0</code>、<code>NaN</code>、<code>&quot;&quot;</code>）的东西是<strong>false</strong>，除此之外一切对象皆为<strong>true</strong>。</p>
</blockquote>
<h3 id="迭代器for"><a href="#迭代器for" class="headerlink" title="迭代器for"></a>迭代器<code>for</code></h3><p>迭代器<code>for</code>的使用方式和C++/Java基本一致（除了赋值语句）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ([initialization]; [condition]; [final-expression])</div><div class="line">   statement</div><div class="line"></div><div class="line"><span class="comment">/*example*/</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">*/</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">    <span class="keyword">continue</span>;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">1</div><div class="line">3</div><div class="line">*/</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i &gt; <span class="number">2</span>)</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">*/</div></pre></td></tr></table></figure>
<h3 id="迭代器for-in"><a href="#迭代器for-in" class="headerlink" title="迭代器for ... in"></a>迭代器<code>for ... in</code></h3><p>迭代器<code>for ... in</code>用于以<strong>任意序</strong>迭代一个对象的可枚举属性，其迭代顺序依赖于执行环境。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'Flint'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">22</span>,</div><div class="line">  	<span class="attr">sex</span>: <span class="string">'male'</span>,</div><div class="line">    <span class="attr">city</span>: <span class="string">'Wuhan'</span>,</div><div class="line">  	<span class="attr">cry</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'QAQ'</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123; <span class="comment">// 过滤掉继承的属性</span></div><div class="line">      <span class="built_in">console</span>.log(key); <span class="comment">// 'name', 'age', 'sex', 'city', 'cry'.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'H'</span>, <span class="string">'He'</span>, <span class="string">'Li'</span>, <span class="string">'Be'</span>, <span class="string">'B'</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// '0', '1', '2', '3', '4'. 注意i是string不是number</span></div><div class="line">  <span class="built_in">console</span>.log(arr[i]); <span class="comment">// 'H', 'He', 'Li', 'Be', 'B'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="迭代器for-of"><a href="#迭代器for-of" class="headerlink" title="迭代器for ... of"></a>迭代器<code>for ... of</code></h3><p><code>for ... of</code>语句是在可迭代对象基础上创建的一个循环。不同于<code>for ... in</code>遍历对象属性的名称，<code>for ... of</code>仅遍历一个对象的可迭代部分并且直接遍历属性值而非属性名。区别如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>];</div><div class="line">arr.name = <span class="string">'alpha'</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> arr) &#123;</div><div class="line">  <span class="built_in">console</span>.log(key); <span class="comment">// '0', '1', '2', '3', 'name'</span></div><div class="line">  <span class="built_in">console</span>.log(arr[key]) <span class="comment">// 'apple', 'banana', 'cat', 'dog', 'alpha'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> arr) &#123;</div><div class="line">  <span class="built_in">console</span>.log(key) <span class="comment">// 'apple', 'banana', 'cat', 'dog'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a><code>forEach()</code>方法</h3><p><code>forEach</code>是大部分可迭代对象<code>iterable</code>内置的一个方法，是一种比较推荐的遍历方式。</p>
<p>原型如下（以<code>Array</code>为例）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">array.forEach(callback(currentValue, index, array)&#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;, <span class="keyword">this</span>)</div><div class="line"><span class="comment">// or</span></div><div class="line">array.forEach(callback[, thisArg])</div></pre></td></tr></table></figure>
<blockquote>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li><p><code>callback</code>为数组中每个元素执行的函数，该函数接收三个参数：</p>
<ul>
<li><code>currentValue(当前值)</code> ：数组中正在处理的当前元素。</li>
<li><code>index(索引)</code> ：数组中正在处理的当前元素的索引。</li>
<li><code>array</code> ：<code>forEach()</code>方法正在操作的数组。 </li>
</ul>
</li>
<li><p><code>thisArg</code>为可选参数。当执行回调函数时用作<code>this</code>值。</p>
<p>​</p>
</li>
</ul>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul>
<li><code>undefined</code></li>
</ul>
</blockquote>
<p>使用示范：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>];</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'arr['</span> + index + <span class="string">'] = '</span> + element);</div><div class="line">&#125;);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * arr[0] = apple</div><div class="line"> * arr[1] = banana</div><div class="line"> * arr[2] = cat</div><div class="line"> * arr[3] = dog</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArrayElements</span>(<span class="params">item, i, arr</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'array['</span> + i + <span class="string">'] = '</span> + item + <span class="string">";"</span>);</div><div class="line">  <span class="keyword">if</span> (i === arr.length - <span class="number">1</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'array is : '</span> + arr);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">[<span class="string">'Aa'</span>, <span class="string">'Bb'</span>, <span class="string">'Cc'</span>].forEach(logArrayElements);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * array[0] = Aa;</div><div class="line"> * array[1] = Bb;</div><div class="line"> * array[2] = Cc;</div><div class="line"> * array is : Aa,Bb,Cc</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// Set与Map的forEach()方法各有其定义</span></div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="literal">undefined</span>]);</div><div class="line">s.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, sameValue, set</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;value&#125;</span> and <span class="subst">$&#123;sameValue&#125;</span>;`</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// A and A;</span></div><div class="line"><span class="comment">// B and B;</span></div><div class="line"><span class="comment">// C and C;</span></div><div class="line"><span class="comment">// undefined and undefined;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'No.1'</span>, <span class="string">'Alice'</span>], [<span class="string">'No.2'</span>, <span class="string">'Bob'</span>], [<span class="string">'No.3'</span>, <span class="string">'Candy'</span>]]);</div><div class="line">m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> ==&gt; <span class="subst">$&#123;value&#125;</span>;`</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// No.1 ==&gt; Alice;</span></div><div class="line"><span class="comment">// No.2 ==&gt; Bob;</span></div><div class="line"><span class="comment">// No.3 ==&gt; Candy;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考 &amp;amp; 学习：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000&quot;&gt;廖老师的JavaScript教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference&quot;&gt;JavaScript 参考文档&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3school.com.cn/js/index.asp&quot;&gt;W3School JavaScript 教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由衷感谢这些资料的提供者与撰写者！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript学习" scheme="https://flintx.github.io/categories/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="https://flintx.github.io/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://flintx.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>PC程序清单 &amp; 实用小工具</title>
    <link href="https://flintx.github.io/2017/02/04/tools-list/"/>
    <id>https://flintx.github.io/2017/02/04/tools-list/</id>
    <published>2017-02-04T09:43:17.000Z</published>
    <updated>2017-02-22T07:36:51.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前用的PC大限将至，即将随本科岁月一起成为过往。</p>
<p>在寿终正寝之前，整理一份陪伴五年时光的程序清单。</p>
<a id="more"></a>
<h2 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h2><hr>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><blockquote>
<p><code>Google Chrome</code></p>
<p><code>Mozilla Firefox</code></p>
</blockquote>
<h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><blockquote>
<p><code>网易云音乐</code></p>
</blockquote>
<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><blockquote>
<p><code>PotPlayer</code></p>
</blockquote>
<h3 id="聊天"><a href="#聊天" class="headerlink" title="聊天"></a>聊天</h3><blockquote>
<p><code>QQ轻聊版</code></p>
</blockquote>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><blockquote>
<p><code>迅雷极速版</code></p>
<p><code>百度云客户端</code></p>
<p><code>µTorrent 2.0.4</code> </p>
</blockquote>
<h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><blockquote>
<p><code>Steam</code></p>
<p><code>TGP</code></p>
<p><code>UPlay</code></p>
</blockquote>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><h4 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h4><blockquote>
<p><strong>C/C++/C#:</strong></p>
<p>​    <code>Dev C++ 4.9.9.2</code></p>
<p>​    <code>Code::Blocks IDE 16.1.1.0</code></p>
<p>​    <code>Microsoft Visual Studio 14.0</code></p>
<p><strong>Java:</strong></p>
<p>​    <code>IntelliJ IDEA 15.0.2</code></p>
<p>​    <code>Android Studio 2.2</code></p>
<p>​    <code>Eclipse Java Mars</code></p>
<p><strong>Python:</strong></p>
<p>​    <code>PyCharm 2016.1</code></p>
<p><strong>PHP:</strong></p>
<p>​    <code>PhpStorm 10.0.3</code></p>
</blockquote>
<h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4><blockquote>
<p><code>Notepad++ 6.9.2</code> （普通文本处理）</p>
<p><code>gVim 7.4</code>（单文件程序、算法demo编写）</p>
<p><code>Sublime text 3</code>（前端处理）</p>
<p><code>Visual Studio Code 1.8.1</code>（闲置中Orz）</p>
<p><code>Typora 0.9.23</code>（markdown文件）</p>
</blockquote>
<h4 id="编译器-amp-解释器"><a href="#编译器-amp-解释器" class="headerlink" title="编译器 &amp; 解释器"></a>编译器 &amp; 解释器</h4><blockquote>
<p><code>gcc 4.7.1</code></p>
<p><code>jdk 1.8.0_73</code></p>
<p><code>Python 3.4 &amp; 2.7</code></p>
<p><code>PHP 7.0 &amp; 5.5</code></p>
</blockquote>
<h4 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h4><blockquote>
<p><code>MySQL</code></p>
<p><code>Git</code></p>
<p><code>Node.js</code></p>
<p><code>Apache 2.4</code></p>
<p>…</p>
</blockquote>
<h3 id="学习-研究"><a href="#学习-研究" class="headerlink" title="学习/研究"></a>学习/研究</h3><blockquote>
<p><code>Microsoft Office 2016</code> （文档处理）</p>
<p><code>Microsoft Visio 2016</code> （绘图）</p>
<p><code>MATLAB R2016a</code>（科学计算、图像处理）</p>
<p><code>Acrobat Reader DC</code>（pdf阅读）</p>
<p><code>VMware Workstation Pro 12.1</code>（虚拟机）</p>
<p><code>Adobe Photoshop CS6</code> （表情包制作【???】）</p>
</blockquote>
<h3 id="实用小工具"><a href="#实用小工具" class="headerlink" title="实用小工具"></a>实用小工具</h3><blockquote>
<p>本地文件检索：</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/Everything-1.3.4.686.x64.Multilingual-Setup.exe" target="_blank" rel="external">Everything.exe</a></p>
<p>电脑色温控制：</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/flux-setup.exe" target="_blank" rel="external">flux.exe</a></p>
<p>host修改器：</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/tool.exe" target="_blank" rel="external">HostTool.exe</a></p>
<p>源码可参考(<a href="https://github.com/HostsTools/Windows" target="_blank" rel="external">https://github.com/HostsTools/Windows</a>)</p>
<p>Windows字体渲染：</p>
<p><a href="http://www.mactype.net/" target="_blank" rel="external">MacType</a></p>
<p>截图:</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/Snipaste-1.11.3-x64.zip" target="_blank" rel="external">Snipaste.exe</a></p>
<p>最喜欢的两款字体：</p>
<p><a href="https://github.com/adobe-fonts/source-code-pro/archive/2.030R-ro/1.050R-it.zip" target="_blank" rel="external">Source Code Pro</a></p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/MONACO.TTF" target="_blank" rel="external">Moncao</a></p>
<p>MinGW编译器：</p>
<p><a href="http://okqi2ipwh.bkt.clouddn.com/mingw-get-setup.exe" target="_blank" rel="external">mingw-get-setup.exe</a></p>
</blockquote>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line">source $VIMRUNTIME/mswin.vim</div><div class="line"></div><div class="line">behave mswin</div><div class="line">set nocompatible</div><div class="line">set nobackup</div><div class="line">set ignorecase</div><div class="line">syn on</div><div class="line">&quot;set t_Co=256 </div><div class="line">colo molokai</div><div class="line">set hlsearch</div><div class="line">filetype indent on</div><div class="line">se ru nu ar sw=4 ts=4 noswf et sta nowrap ww=&lt;,&gt;,[,] gfn=Source_Code_Pro_Medium:h14:cANSI</div><div class="line">set shiftwidth=4</div><div class="line">set tabstop=4</div><div class="line"></div><div class="line">&quot;高亮当前行</div><div class="line">&quot;set cursorline</div><div class="line"></div><div class="line">&quot;统计字数</div><div class="line">map &lt;Enter&gt;&lt;Enter&gt; g&lt;c-G&gt;</div><div class="line"></div><div class="line">&quot;隐藏工具栏与菜单栏</div><div class="line">&quot;set guioptions-=m</div><div class="line">set guioptions-=T</div><div class="line">set guioptions-=r</div><div class="line">set guioptions-=L</div><div class="line"></div><div class="line">autocmd BufEnter * lcd %:p:h</div><div class="line"></div><div class="line"></div><div class="line">imap &lt;c-d&gt; &lt;c-o&gt;dd</div><div class="line">imap &lt;c-]&gt; &#123;&lt;cr&gt;&#125;&lt;c-o&gt;O&lt;left&gt;&lt;right&gt;</div><div class="line">imap &lt;c-k&gt; &lt;up&gt;</div><div class="line">imap &lt;c-j&gt; &lt;down&gt;</div><div class="line">imap &lt;c-h&gt; &lt;left&gt;</div><div class="line">imap &lt;c-l&gt; &lt;right&gt;</div><div class="line">imap &lt;c-tab&gt; &lt;esc&gt;gt</div><div class="line">imap &lt;cr&gt; &lt;cr&gt;&lt;left&gt;&lt;right&gt;</div><div class="line"></div><div class="line">inoremap ( ()&lt;left&gt;</div><div class="line">inoremap [ []&lt;left&gt;</div><div class="line"></div><div class="line">noremap &lt;F6&gt; =a&#123;</div><div class="line"></div><div class="line">map &lt;F7&gt; :g/^\s*$/d&lt;CR&gt;</div><div class="line">map &lt;c-t&gt; :tabnew&lt;CR&gt;</div><div class="line">map &lt;F3&gt; :e test.cpp&lt;CR&gt;</div><div class="line">map &lt;F9&gt; :call CR()&lt;CR&gt;&lt;CR&gt;</div><div class="line">func CR()</div><div class="line">exec &apos;update&apos;</div><div class="line">if &amp;filetype == &quot;java&quot;  </div><div class="line">    exec &quot;!javac % &amp;&amp; java %&lt;&quot; </div><div class="line">elseif &amp;filetype == &quot;python&quot;</div><div class="line">    exec &quot;!python %&quot;</div><div class="line">else</div><div class="line">    exec &apos;!g++ %&lt;.cpp -o %&lt; &amp;&amp; %&lt;&apos;</div><div class="line">endif</div><div class="line">endfunc</div><div class="line">map &lt;f2&gt; :call SetTitle()&lt;CR&gt;Gkkk</div><div class="line">func SetTitle()</div><div class="line">let l = 0</div><div class="line">let l = l + 1 | call setline(l, &apos;/*&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;Creat Time:&apos;.strftime(&apos;%c&apos;))</div><div class="line">let l = l + 1 | call setline(l, &apos;*/&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;//#pragma comment(linker, &quot;/STACK:102400000,102400000&quot;)&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;iostream&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;cstdio&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;cstring&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;cstdlib&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;cmath&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;algorithm&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;functional&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;string&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;map&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;set&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;vector&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;queue&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;stack&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;bitset&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;ctime&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;using namespace std;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define clr( x , y ) memset(x,y,sizeof(x))&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define cls( x ) memset(x,0,sizeof(x))&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define pr( x ) cout &lt;&lt; #x &lt;&lt; &quot; = &quot; &lt;&lt; x &lt;&lt; endl &apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define pri( x ) cout &lt;&lt; #x &lt;&lt; &quot; = &quot; &lt;&lt; x &lt;&lt; &quot; &quot; &apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define test( t ) int t ; cin &gt;&gt; t ; int kase = 1 ; while( t-- )&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define out( kase ) printf( &quot;Case %d: &quot; , kase++ )&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define sqr( x ) ( x * x )&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define mp make_pair&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define pii pair&lt;int,int&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define fi first&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define se second&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;#define pb push_back&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;typedef long long lint;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;const double eps = 1e-8 ;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;const int inf = 0x3f3f3f3f ;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;const long long INF = 0x3f3f3f3f3f3f3f3fLL ;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;int main()&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&#123;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    //freopen(&quot;my.in&quot;,&quot;r&quot;,stdin);&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    //freopen(&quot;my.out&quot;,&quot;w&quot;,stdout);&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    return 0;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&#125;&apos;)</div><div class="line">endfunc</div><div class="line"></div><div class="line">map&lt;f4&gt; :call AddComment()&lt;cr&gt;</div><div class="line">func AddComment()</div><div class="line">    if matchstr(getline(&apos;.&apos;), &apos;[^ ]&apos;) == &apos;/&apos;</div><div class="line">        normal ^xx</div><div class="line">    else</div><div class="line">        normal ^i//</div><div class="line">    endif</div><div class="line">endfunc</div><div class="line"></div><div class="line">map &lt;f5&gt; :call SetTitle2()&lt;CR&gt;Gkkk</div><div class="line">func SetTitle2()</div><div class="line">let l = 0</div><div class="line">let l = l + 1 | call setline(l, &apos;#include&lt;bits/stdc++.h&gt;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;using namespace std;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;int main()&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&#123;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    freopen(&quot;my.in&quot;,&quot;r&quot;,stdin);&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    //freopen(&quot;my.out&quot;,&quot;w&quot;,stdout);&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;    return 0;&apos;)</div><div class="line">let l = l + 1 | call setline(l, &apos;&#125;&apos;)</div><div class="line">endfunc</div><div class="line"></div><div class="line"></div><div class="line">set printoptions=syntax:n,number:y,portrait:y</div><div class="line"></div><div class="line">cd E:\Coder\my vim\</div><div class="line"></div><div class="line">set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</div><div class="line">au GUIEnter * simalt ~x                           &quot;窗口启动时自动最大化</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;目前用的PC大限将至，即将随本科岁月一起成为过往。&lt;/p&gt;
&lt;p&gt;在寿终正寝之前，整理一份陪伴五年时光的程序清单。&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="https://flintx.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="工具" scheme="https://flintx.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="软件" scheme="https://flintx.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hello, My Blog</title>
    <link href="https://flintx.github.io/2017/02/02/hello/"/>
    <id>https://flintx.github.io/2017/02/02/hello/</id>
    <published>2017-02-02T04:23:44.000Z</published>
    <updated>2017-02-08T12:50:48.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图片插入测试"><a href="#图片插入测试" class="headerlink" title="图片插入测试"></a>图片插入测试</h2><p><img src="http://okqi2ipwh.bkt.clouddn.com/39163751_p0.jpg" alt="a image"></p>
<a id="more"></a>
<h2 id="代码高亮测试"><a href="#代码高亮测试" class="headerlink" title="代码高亮测试"></a>代码高亮测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">print(<span class="string">"hello, my blog"</span>)</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.math.BigInteger;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner cin = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">int</span> t = cin.nextInt();</div><div class="line">		<span class="keyword">int</span> i = <span class="number">1</span> ;</div><div class="line">		<span class="keyword">while</span>( i &lt;= t )&#123;</div><div class="line">			BigInteger a = cin.nextBigInteger();</div><div class="line">			BigInteger b = cin.nextBigInteger();</div><div class="line">			BigInteger c = a.mod(b) ;</div><div class="line">			<span class="keyword">if</span>( c == BigInteger.ZERO )</div><div class="line">				System.out.println(<span class="string">"Case "</span>+i+<span class="string">": divisible"</span>);</div><div class="line">			<span class="keyword">else</span></div><div class="line">				System.out.println(<span class="string">"Case "</span>+i+<span class="string">": not divisible"</span>);</div><div class="line">		&#125;</div><div class="line">		cin.close();</div><div class="line">		</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数学公式测试"><a href="#数学公式测试" class="headerlink" title="数学公式测试"></a>数学公式测试</h2><script type="math/tex; mode=display">
\begin{array}{c|lcr}
n & \text{Left} & \text{Center} & \text{Right} \\
\hline
1 & 0.24 & 1 & 125 \\
2 & -1 & 189 & -8 \\
3 & -20 & 2000 & 1+10i \\
\end{array}</script><p>$ x^2 + y^2 = z_1 + z_{a2} $</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;图片插入测试&quot;&gt;&lt;a href=&quot;#图片插入测试&quot; class=&quot;headerlink&quot; title=&quot;图片插入测试&quot;&gt;&lt;/a&gt;图片插入测试&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://okqi2ipwh.bkt.clouddn.com/39163751_p0.jpg&quot; alt=&quot;a image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客相关" scheme="https://flintx.github.io/tags/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>建站日志</title>
    <link href="https://flintx.github.io/2017/02/02/Blog-Logs/"/>
    <id>https://flintx.github.io/2017/02/02/Blog-Logs/</id>
    <published>2017-02-01T16:41:29.000Z</published>
    <updated>2017-02-08T12:52:47.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017-02-08"><a href="#2017-02-08" class="headerlink" title="2017 - 02 - 08"></a>2017 - 02 - 08</h2><ul>
<li>增加文章加密功能（解密后会出现数学公式渲染与字体api引起的代码高亮错误，仅适用于加密简单文本）</li>
</ul>
<h2 id="2017-02-07"><a href="#2017-02-07" class="headerlink" title="2017 - 02 - 07"></a>2017 - 02 - 07</h2><ul>
<li>添加友链</li>
<li>添加<code>README.md</code>文件</li>
<li>添加<code>RSS</code>连接</li>
</ul>
<h2 id="2017-02-06"><a href="#2017-02-06" class="headerlink" title="2017 - 02 - 06"></a>2017 - 02 - 06</h2><ul>
<li>增加多说评论功能、<code>UA</code>显示功能</li>
<li>增加阅读次数统计功能（利用<code>LeanCloud</code>）</li>
<li>添加<code>关于</code>、<code>分类</code>、<code>标签</code>页面</li>
</ul>
<h2 id="2017-02-04"><a href="#2017-02-04" class="headerlink" title="2017 - 02 - 04"></a>2017 - 02 - 04</h2><ul>
<li>blog主题由<code>NexT</code>修改为<code>yilia</code></li>
<li>绑定域名<a href="http://www.flintx.me" target="_blank" rel="external">flintx.me</a></li>
<li>blog主题由<code>yilia</code>修改为<code>NexT</code></li>
<li>外观Scheme由<code>Pisces</code>修改为<code>Mist</code></li>
<li>开启代码高亮功能</li>
<li>开启<code>MathJax</code>数学公式支持</li>
<li>更换部分字体，并将fonts api的host由google切换至中科大镜像</li>
<li>使用七牛云作为图床</li>
</ul>
<h2 id="2017-02-03"><a href="#2017-02-03" class="headerlink" title="2017 - 02 - 03"></a>2017 - 02 - 03</h2><ul>
<li>修改语言为中文</li>
</ul>
<h2 id="2017-02-02"><a href="#2017-02-02" class="headerlink" title="2017 - 02 - 02"></a>2017 - 02 - 02</h2><ul>
<li>建立项目<a href="https://github.com/flintx/flintx.github.io" target="_blank" rel="external">flintx.github.io</a></li>
<li>blog框架由<code>Jekyll</code>切换为<code>Hexo</code></li>
<li>使用<code>NexT</code>作为blog主题，并采用<code>Pisces</code>作为外观Scheme</li>
<li>添加侧边栏社交link</li>
<li>添加作者头像、描述</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2017-02-08&quot;&gt;&lt;a href=&quot;#2017-02-08&quot; class=&quot;headerlink&quot; title=&quot;2017 - 02 - 08&quot;&gt;&lt;/a&gt;2017 - 02 - 08&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;增加文章加密功能（解密后会出现数学公式渲染与字体
    
    </summary>
    
    
      <category term="博客相关" scheme="https://flintx.github.io/tags/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
</feed>
